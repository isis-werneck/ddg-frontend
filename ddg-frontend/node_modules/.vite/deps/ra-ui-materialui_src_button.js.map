{
  "version": 3,
  "sources": ["../../ra-ui-materialui/src/button/CloneButton.tsx", "../../ra-ui-materialui/src/button/Button.tsx", "../../ra-ui-materialui/src/button/CreateButton.tsx", "../../ra-ui-materialui/src/button/ShowButton.tsx", "../../ra-ui-materialui/src/button/SortButton.tsx", "../../ra-ui-materialui/src/button/BulkDeleteWithConfirmButton.tsx", "../../ra-ui-materialui/src/layout/AccessDenied.tsx", "../../ra-ui-materialui/src/layout/AppBar.tsx", "../../ra-ui-materialui/src/layout/SidebarToggleButton.tsx", "../../ra-ui-materialui/src/layout/useSidebarState.ts", "../../ra-ui-materialui/src/layout/LoadingIndicator.tsx", "../../ra-ui-materialui/src/layout/UserMenu.tsx", "../../ra-ui-materialui/src/auth/Logout.tsx", "../../ra-ui-materialui/src/layout/UserMenuContext.ts", "../../ra-ui-materialui/src/layout/UserMenuContextProvider.tsx", "../../ra-ui-materialui/src/layout/HideOnScroll.tsx", "../../ra-ui-materialui/src/layout/TitlePortal.tsx", "../../ra-ui-materialui/src/theme/useThemesContext.ts", "../../ra-ui-materialui/src/theme/ThemesContext.ts", "../../ra-ui-materialui/src/button/ToggleThemeButton.tsx", "../../ra-ui-materialui/src/theme/useTheme.ts", "../../ra-ui-materialui/src/theme/ThemeProvider.tsx", "../../ra-ui-materialui/src/theme/defaultTheme.ts", "../../ra-ui-materialui/src/theme/nanoTheme.ts", "../../ra-ui-materialui/src/theme/radiantTheme.ts", "../../ra-ui-materialui/src/theme/houseTheme.ts", "../../ra-ui-materialui/src/layout/ApplicationUpdatedNotification.tsx", "../../ra-ui-materialui/src/layout/AuthenticationError.tsx", "../../ra-ui-materialui/src/layout/Title.tsx", "../../ra-ui-materialui/src/layout/PageTitle.tsx", "../../ra-ui-materialui/src/preferences/Configurable.tsx", "../../ra-ui-materialui/src/preferences/FieldToggle.tsx", "../../ra-ui-materialui/src/preferences/FieldsSelector.tsx", "../../ra-ui-materialui/src/preferences/Inspector.tsx", "../../ra-ui-materialui/src/preferences/InspectorRoot.tsx", "../../ra-ui-materialui/src/preferences/InspectorButton.tsx", "../../ra-ui-materialui/src/layout/PageTitleConfigurable.tsx", "../../ra-ui-materialui/src/layout/CardContentInner.tsx", "../../ra-ui-materialui/src/layout/CheckForApplicationUpdate.tsx", "../../ra-ui-materialui/src/layout/Confirm.tsx", "../../ra-ui-materialui/src/layout/DashboardMenuItem.tsx", "../../ra-ui-materialui/src/layout/MenuItemLink.tsx", "../../ra-ui-materialui/src/layout/DeviceTestWrapper.tsx", "../../ra-ui-materialui/src/layout/Error.tsx", "../../ra-ui-materialui/src/layout/Layout.tsx", "../../ra-ui-materialui/src/layout/Sidebar.tsx", "../../ra-ui-materialui/src/layout/Menu.tsx", "../../ra-ui-materialui/src/layout/ResourceMenuItem.tsx", "../../ra-ui-materialui/src/layout/ResourceMenuItems.tsx", "../../ra-ui-materialui/src/layout/Loading.tsx", "../../ra-ui-materialui/src/layout/LinearProgress.tsx", "../../ra-ui-materialui/src/layout/LoadingPage.tsx", "../../ra-ui-materialui/src/layout/NotFound.tsx", "../../ra-ui-materialui/src/layout/Notification.tsx", "../../ra-ui-materialui/src/layout/TopToolbar.tsx", "../../ra-ui-materialui/src/layout/useUserMenu.ts", "../../ra-ui-materialui/src/button/BulkDeleteWithUndoButton.tsx", "../../ra-ui-materialui/src/button/BulkDeleteButton.tsx", "../../ra-ui-materialui/src/button/BulkExportButton.tsx", "../../ra-ui-materialui/src/button/BulkUpdateWithConfirmButton.tsx", "../../ra-ui-materialui/src/button/BulkUpdateWithUndoButton.tsx", "../../ra-ui-materialui/src/button/BulkUpdateButton.tsx", "../../ra-ui-materialui/src/button/DeleteWithUndoButton.tsx", "../../ra-ui-materialui/src/button/DeleteWithConfirmButton.tsx", "../../ra-ui-materialui/src/button/DeleteButton.tsx", "../../ra-ui-materialui/src/button/EditButton.tsx", "../../ra-ui-materialui/src/button/ExportButton.tsx", "../../ra-ui-materialui/src/button/IconButtonWithTooltip.tsx", "../../ra-ui-materialui/src/button/LocalesMenuButton.tsx", "../../ra-ui-materialui/src/button/ListButton.tsx", "../../ra-ui-materialui/src/button/PrevNextButtons.tsx", "../../ra-ui-materialui/src/button/RefreshButton.tsx", "../../ra-ui-materialui/src/button/RefreshIconButton.tsx", "../../ra-ui-materialui/src/button/SaveButton.tsx", "../../ra-ui-materialui/src/button/SkipNavigationButton.tsx", "../../ra-ui-materialui/src/button/UpdateWithConfirmButton.tsx", "../../ra-ui-materialui/src/button/UpdateWithUndoButton.tsx", "../../ra-ui-materialui/src/button/UpdateButton.tsx"],
  "sourcesContent": ["import * as React from 'react';\nimport { memo, ReactElement } from 'react';\nimport Queue from '@mui/icons-material/Queue';\nimport { Link } from 'react-router-dom';\nimport { stringify } from 'query-string';\nimport { useResourceContext, useRecordContext, useCreatePath } from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\nexport const CloneButton = (props: CloneButtonProps) => {\n    const {\n        label = 'ra.action.clone',\n        scrollToTop = true,\n        icon = defaultIcon,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    const record = useRecordContext(props);\n    const createPath = useCreatePath();\n    const pathname = createPath({ resource, type: 'create' });\n    return (\n        <Button\n            component={Link}\n            to={\n                record\n                    ? {\n                          pathname,\n                          search: stringify({\n                              source: JSON.stringify(omitId(record)),\n                          }),\n                      }\n                    : pathname\n            }\n            state={{ _scrollToTop: scrollToTop }}\n            label={label}\n            onClick={stopPropagation}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\nconst defaultIcon = <Queue />;\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\nconst omitId = ({ id, ...rest }: any) => rest;\n\nconst sanitizeRestProps = ({\n    resource,\n    record,\n    ...rest\n}: Omit<CloneButtonProps, 'label' | 'scrollToTop' | 'icon'>) => rest;\n\ninterface Props {\n    record?: any;\n    icon?: ReactElement;\n    scrollToTop?: boolean;\n}\n\nexport type CloneButtonProps = Props & Omit<ButtonProps<typeof Link>, 'to'>;\n\nexport default memo(CloneButton);\n", "import * as React from 'react';\nimport {\n    Button as MuiButton,\n    ButtonProps as MuiButtonProps,\n    Tooltip,\n    IconButton,\n    useMediaQuery,\n    Theme,\n} from '@mui/material';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { useTranslate } from 'ra-core';\nimport { Path, To } from 'react-router';\n\n/**\n * A generic Button with side icon. Only the icon is displayed on small screens.\n *\n * The component translates the label. Pass the icon as child.\n * The icon displays on the left side of the button by default. Set alignIcon prop to 'right' to inverse.\n *\n * @example\n *\n * <Button label=\"Edit\" color=\"secondary\" onClick={doEdit}>\n *   <ContentCreate />\n * </Button>\n *\n */\nexport const Button = <RootComponent extends React.ElementType = 'button'>(\n    inProps: ButtonProps<RootComponent>\n) => {\n    const props = useThemeProps({ props: inProps, name: 'RaButton' });\n    const {\n        alignIcon = 'left',\n        children,\n        className,\n        disabled,\n        label,\n        color = 'primary',\n        size = 'small',\n        to: locationDescriptor,\n        ...rest\n    } = props;\n\n    const translate = useTranslate();\n    const translatedLabel = label ? translate(label, { _: label }) : undefined;\n    const linkParams = getLinkParams(locationDescriptor);\n\n    const isXSmall = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('sm')\n    );\n\n    return isXSmall ? (\n        label && !disabled ? (\n            <Tooltip title={translatedLabel}>\n                <IconButton\n                    aria-label={translatedLabel}\n                    className={className}\n                    color={color}\n                    size=\"large\"\n                    {...linkParams}\n                    {...rest}\n                >\n                    {children}\n                </IconButton>\n            </Tooltip>\n        ) : (\n            <IconButton\n                className={className}\n                color={color}\n                disabled={disabled}\n                size=\"large\"\n                {...linkParams}\n                {...rest}\n            >\n                {children}\n            </IconButton>\n        )\n    ) : (\n        <StyledButton\n            className={className}\n            color={color}\n            size={size}\n            aria-label={translatedLabel}\n            disabled={disabled}\n            startIcon={alignIcon === 'left' && children ? children : undefined}\n            endIcon={alignIcon === 'right' && children ? children : undefined}\n            {...linkParams}\n            {...rest}\n        >\n            {translatedLabel}\n        </StyledButton>\n    );\n};\n\ninterface Props<RootComponent extends React.ElementType> {\n    alignIcon?: 'left' | 'right';\n    children?: React.ReactElement;\n    className?: string;\n    component?: RootComponent;\n    to?: LocationDescriptor | To;\n    disabled?: boolean;\n    label?: string;\n    size?: 'small' | 'medium' | 'large';\n    variant?: string;\n}\n\nexport type ButtonProps<RootComponent extends React.ElementType = 'button'> =\n    Props<RootComponent> & MuiButtonProps<RootComponent>;\n\nconst PREFIX = 'RaButton';\n\nconst StyledButton = styled(MuiButton, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    '&.MuiButton-sizeSmall': {\n        // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n        lineHeight: 1.5,\n    },\n});\n\nconst getLinkParams = (locationDescriptor?: LocationDescriptor | string) => {\n    // eslint-disable-next-line eqeqeq\n    if (locationDescriptor == undefined) {\n        return undefined;\n    }\n\n    if (typeof locationDescriptor === 'string') {\n        return { to: locationDescriptor };\n    }\n\n    const { redirect, replace, state, ...to } = locationDescriptor;\n    return {\n        to,\n        redirect,\n        replace,\n        state,\n    };\n};\n\nexport type LocationDescriptor = Partial<Path> & {\n    redirect?: boolean;\n    state?: any;\n    replace?: boolean;\n};\n", "import * as React from 'react';\nimport ContentAdd from '@mui/icons-material/Add';\nimport { Fab, useMediaQuery, Theme } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport clsx from 'clsx';\nimport isEqual from 'lodash/isEqual';\nimport merge from 'lodash/merge';\nimport {\n    useTranslate,\n    useResourceContext,\n    useCreatePath,\n    useCanAccess,\n} from 'ra-core';\nimport { Link, To } from 'react-router-dom';\n\nimport { Button, ButtonProps, LocationDescriptor } from './Button';\n\n/**\n * Opens the Create view of a given resource\n *\n * Renders as a regular button on desktop, and a Floating Action Button\n * on mobile.\n *\n * @example // basic usage\n * import { CreateButton } from 'react-admin';\n *\n * const CommentCreateButton = () => (\n *     <CreateButton label=\"Create comment\" />\n * );\n */\nconst CreateButton = (props: CreateButtonProps) => {\n    const {\n        className,\n        icon = defaultIcon,\n        label = 'ra.action.create',\n        resource: resourceProp,\n        scrollToTop = true,\n        variant,\n        to: locationDescriptor,\n        state: initialState = {},\n        ...rest\n    } = props;\n\n    const resource = useResourceContext(props);\n\n    if (!resource) {\n        throw new Error(\n            '<CreateButton> components should be used inside a <Resource> component or provided the resource prop.'\n        );\n    }\n\n    const { canAccess, isPending } = useCanAccess({\n        action: 'create',\n        resource,\n    });\n    const createPath = useCreatePath();\n    const translate = useTranslate();\n    const isSmall = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('md')\n    );\n    const state = merge(\n        {},\n        scrollStates.get(String(scrollToTop)),\n        initialState\n    );\n    // Duplicated behavior of Button component (legacy use) which will be removed in v5.\n    const linkParams = getLinkParams(locationDescriptor);\n\n    if (!canAccess || isPending) {\n        return null;\n    }\n    return isSmall ? (\n        <StyledFab\n            component={Link}\n            to={createPath({ resource, type: 'create' })}\n            state={state}\n            // @ts-ignore FabProps ships its own runtime palette `FabPropsColorOverrides` provoking an overlap error with `ButtonProps`\n            color=\"primary\"\n            className={clsx(CreateButtonClasses.floating, className)}\n            aria-label={label && translate(label)}\n            {...rest}\n            {...linkParams}\n        >\n            {icon}\n        </StyledFab>\n    ) : (\n        <StyledButton\n            component={Link}\n            to={createPath({ resource, type: 'create' })}\n            state={state}\n            className={clsx(CreateButtonClasses.root, className)}\n            label={label}\n            variant={variant}\n            {...(rest as any)}\n            {...linkParams}\n        >\n            {icon}\n        </StyledButton>\n    );\n};\n\n// avoids using useMemo to get a constant value for the link state\nconst scrollStates = new Map([\n    ['true', { _scrollToTop: true }],\n    ['false', {}],\n]);\n\nconst defaultIcon = <ContentAdd />;\n\ninterface Props {\n    resource?: string;\n    icon?: React.ReactElement;\n    scrollToTop?: boolean;\n    to?: LocationDescriptor | To;\n}\n\nexport type CreateButtonProps = Props & Omit<ButtonProps<typeof Link>, 'to'>;\n\nconst PREFIX = 'RaCreateButton';\n\nexport const CreateButtonClasses = {\n    root: `${PREFIX}-root`,\n    floating: `${PREFIX}-floating`,\n};\n\nconst StyledFab = styled(Fab, {\n    name: PREFIX,\n    overridesResolver: (_props, styles) => styles.root,\n})(({ theme }) => ({\n    [`&.${CreateButtonClasses.floating}`]: {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n        margin: 0,\n        top: 'auto',\n        right: 20,\n        bottom: 60,\n        left: 'auto',\n        position: 'fixed',\n        zIndex: 1000,\n    },\n})) as unknown as typeof Fab;\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (_props, styles) => styles.root,\n})({});\n\nexport default React.memo(CreateButton, (prevProps, nextProps) => {\n    return (\n        prevProps.resource === nextProps.resource &&\n        prevProps.label === nextProps.label &&\n        prevProps.translate === nextProps.translate &&\n        prevProps.disabled === nextProps.disabled &&\n        isEqual(prevProps.to, nextProps.to) &&\n        isEqual(prevProps.state, nextProps.state)\n    );\n});\n\nconst getLinkParams = (locationDescriptor?: LocationDescriptor | string) => {\n    // eslint-disable-next-line\n    if (locationDescriptor == undefined) {\n        return undefined;\n    }\n\n    if (typeof locationDescriptor === 'string') {\n        return { to: locationDescriptor };\n    }\n\n    const { redirect, replace, state, ...to } = locationDescriptor;\n    return {\n        to,\n        redirect,\n        replace,\n        state,\n    };\n};\n", "import * as React from 'react';\nimport { memo, ReactElement } from 'react';\nimport ImageEye from '@mui/icons-material/RemoveRedEye';\nimport { Link } from 'react-router-dom';\nimport {\n    RaRecord,\n    useResourceContext,\n    useRecordContext,\n    useCreatePath,\n    useCanAccess,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\n/**\n * Opens the Show view of a given record\n *\n * @example // basic usage\n * import { ShowButton, useRecordContext } from 'react-admin';\n *\n * const CommentShowButton = () => {\n *     const record = useRecordContext();\n *     return (\n *         <ShowButton label=\"Show comment\" record={record} />\n *     );\n * };\n */\nconst ShowButton = <RecordType extends RaRecord = any>(\n    props: ShowButtonProps<RecordType>\n) => {\n    const {\n        icon = defaultIcon,\n        label = 'ra.action.show',\n        record: recordProp,\n        resource: resourceProp,\n        scrollToTop = true,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    if (!resource) {\n        throw new Error(\n            '<ShowButton> components should be used inside a <Resource> component or provided the resource prop.'\n        );\n    }\n    const record = useRecordContext(props);\n    const createPath = useCreatePath();\n    const { canAccess, isPending } = useCanAccess({\n        action: 'show',\n        resource,\n        record,\n    });\n    if (!record || !canAccess || isPending) return null;\n    return (\n        <Button\n            component={Link}\n            to={createPath({ type: 'show', resource, id: record.id })}\n            state={scrollStates[String(scrollToTop)]}\n            label={label}\n            onClick={stopPropagation}\n            {...(rest as any)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\n// avoids using useMemo to get a constant value for the link state\nconst scrollStates = {\n    true: { _scrollToTop: true },\n    false: {},\n};\n\nconst defaultIcon = <ImageEye />;\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\ninterface Props<RecordType extends RaRecord = any> {\n    icon?: ReactElement;\n    label?: string;\n    record?: RecordType;\n    resource?: string;\n    scrollToTop?: boolean;\n}\n\nexport type ShowButtonProps<RecordType extends RaRecord = any> =\n    Props<RecordType> & Omit<ButtonProps<typeof Link>, 'to'>;\n\nconst PureShowButton = memo(\n    ShowButton,\n    (prevProps, nextProps) =>\n        prevProps.resource === nextProps.resource &&\n        (prevProps.record && nextProps.record\n            ? prevProps.record.id === nextProps.record.id\n            : prevProps.record == nextProps.record) && // eslint-disable-line eqeqeq\n        prevProps.label === nextProps.label &&\n        prevProps.disabled === nextProps.disabled\n);\n\nexport default PureShowButton;\n", "import * as React from 'react';\nimport { ReactElement, memo } from 'react';\nimport clsx from 'clsx';\nimport {\n    Button,\n    Menu,\n    MenuItem,\n    Tooltip,\n    IconButton,\n    useMediaQuery,\n    Theme,\n    SxProps,\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport SortIcon from '@mui/icons-material/Sort';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport {\n    useListSortContext,\n    useTranslate,\n    useTranslateLabel,\n    shallowEqual,\n} from 'ra-core';\n\n/**\n * A button allowing to change the sort field and order.\n *\n * To be used inside a ListContext (e.g. inside a <List> or <ReferenceManyField>)\n *\n * Expects one 'fields' prop, containing an array of field strings that shall\n * be used and displayed for sorting.\n *\n * When users clicks on the <SortButton>, they see a dropdown list with the\n * proposed sorting fields. Once they click on one of these fields, the related\n * list refreshes, re-sorted.\n *\n * @example\n *\n * import * as React from 'react';\n * import { TopToolbar, SortButton, CreateButton, ExportButton } from 'react-admin';\n *\n * const ListActions = () => (\n *     <TopToolbar>\n *         <SortButton fields={['reference', 'sales', 'stock']} />\n *         <CreateButton />\n *         <ExportButton />\n *     </TopToolbar>\n * );\n */\nconst SortButton = (props: SortButtonProps) => {\n    const {\n        fields,\n        label = 'ra.sort.sort_by',\n        icon = defaultIcon,\n        sx,\n        className,\n        resource: resourceProp,\n    } = props;\n    const {\n        resource: resourceFromContext,\n        sort,\n        setSort,\n    } = useListSortContext();\n    const resource = resourceProp || resourceFromContext;\n    const translate = useTranslate();\n    const translateLabel = useTranslateLabel();\n    const isXSmall = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('sm')\n    );\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleChangeSort = (\n        event: React.MouseEvent<HTMLLIElement, MouseEvent>\n    ) => {\n        const field = event.currentTarget.dataset.sort;\n        if (!field) {\n            throw new Error(\n                '<SortButton> MenuItems should have a data-sort attribute'\n            );\n        }\n        setSort({\n            field,\n            order: field === sort.field ? inverseOrder(sort.order) : 'ASC',\n        });\n        setAnchorEl(null);\n    };\n\n    const buttonLabel = translate(label, {\n        field: translateLabel({\n            resource,\n            source: sort.field,\n        }),\n        order: translate(`ra.sort.${sort.order}`),\n        _: label,\n    });\n\n    return (\n        <Root sx={sx} className={clsx(className, classNames.root)}>\n            {isXSmall ? (\n                <Tooltip title={buttonLabel}>\n                    <IconButton\n                        aria-label={buttonLabel}\n                        color=\"primary\"\n                        onClick={handleClick}\n                        size=\"large\"\n                    >\n                        {icon}\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <Button\n                    aria-controls=\"simple-menu\"\n                    aria-haspopup=\"true\"\n                    color=\"primary\"\n                    onClick={handleClick}\n                    startIcon={icon}\n                    endIcon={<ArrowDropDownIcon />}\n                    size=\"small\"\n                >\n                    {buttonLabel}\n                </Button>\n            )}\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {fields.map(field => (\n                    <MenuItem\n                        onClick={handleChangeSort}\n                        data-sort={field}\n                        key={field}\n                    >\n                        {translateLabel({\n                            resource,\n                            source: field,\n                        })}{' '}\n                        {translate(\n                            `ra.sort.${\n                                sort.field === field\n                                    ? inverseOrder(sort.order)\n                                    : 'ASC'\n                            }`\n                        )}\n                    </MenuItem>\n                ))}\n            </Menu>\n        </Root>\n    );\n};\n\nconst defaultIcon = <SortIcon />;\n\nconst inverseOrder = (sort: string) => (sort === 'ASC' ? 'DESC' : 'ASC');\n\nconst arePropsEqual = (prevProps, nextProps) =>\n    shallowEqual(prevProps.fields, nextProps.fields);\n\nexport interface SortButtonProps {\n    className?: string;\n    fields: string[];\n    icon?: ReactElement;\n    label?: string;\n    resource?: string;\n    sx?: SxProps;\n}\n\nconst PREFIX = 'RaSortButton';\n\nconst classNames = {\n    root: `${PREFIX}-root`,\n};\n\nconst Root = styled('span', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`.${classNames.root}`]: {},\n    '& .MuiButton-sizeSmall': {\n        // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n        lineHeight: 1.5,\n    },\n    '& .MuiButton-endIcon': { ml: 0 },\n});\n\nexport default memo(SortButton, arePropsEqual);\n", "import * as React from 'react';\nimport { Fragment, ReactElement } from 'react';\nimport ActionDelete from '@mui/icons-material/Delete';\n\nimport { alpha, styled } from '@mui/material/styles';\nimport {\n    MutationMode,\n    useDeleteMany,\n    useListContext,\n    useNotify,\n    useRefresh,\n    useResourceContext,\n    useTranslate,\n    useSafeSetState,\n    RaRecord,\n    DeleteManyParams,\n} from 'ra-core';\n\nimport { Confirm } from '../layout';\nimport { Button, ButtonProps } from './Button';\nimport { UseMutationOptions } from '@tanstack/react-query';\nimport { humanize, inflect } from 'inflection';\n\nexport const BulkDeleteWithConfirmButton = (\n    props: BulkDeleteWithConfirmButtonProps\n) => {\n    const {\n        confirmTitle = 'ra.message.bulk_delete_title',\n        confirmContent = 'ra.message.bulk_delete_content',\n        confirmColor = 'primary',\n        icon = defaultIcon,\n        label = 'ra.action.delete',\n        mutationMode = 'pessimistic',\n        mutationOptions = {},\n        successMessage,\n        onClick,\n        ...rest\n    } = props;\n    const { meta: mutationMeta, ...otherMutationOptions } = mutationOptions;\n    const { selectedIds, onUnselectItems } = useListContext();\n    const [isOpen, setOpen] = useSafeSetState(false);\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const refresh = useRefresh();\n    const translate = useTranslate();\n    const [deleteMany, { isPending }] = useDeleteMany(\n        resource,\n        { ids: selectedIds, meta: mutationMeta },\n        {\n            onSuccess: () => {\n                refresh();\n                notify(\n                    successMessage ??\n                        `resources.${resource}.notifications.deleted`,\n                    {\n                        type: 'info',\n                        messageArgs: {\n                            smart_count: selectedIds.length,\n                            _: translate('ra.notification.deleted', {\n                                smart_count: selectedIds.length,\n                            }),\n                        },\n                        undoable: mutationMode === 'undoable',\n                    }\n                );\n                onUnselectItems();\n                setOpen(false);\n            },\n            onError: (error: Error) => {\n                notify(\n                    typeof error === 'string'\n                        ? error\n                        : error.message || 'ra.notification.http_error',\n                    {\n                        type: 'error',\n                        messageArgs: {\n                            _:\n                                typeof error === 'string'\n                                    ? error\n                                    : error && error.message\n                                      ? error.message\n                                      : undefined,\n                        },\n                    }\n                );\n                setOpen(false);\n            },\n            mutationMode,\n            ...otherMutationOptions,\n        }\n    );\n\n    const handleClick = e => {\n        setOpen(true);\n        e.stopPropagation();\n    };\n\n    const handleDialogClose = () => {\n        setOpen(false);\n    };\n\n    const handleDelete = e => {\n        deleteMany();\n\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <Fragment>\n            <StyledButton\n                onClick={handleClick}\n                label={label}\n                {...sanitizeRestProps(rest)}\n            >\n                {icon}\n            </StyledButton>\n            <Confirm\n                isOpen={isOpen}\n                loading={isPending}\n                title={confirmTitle}\n                content={confirmContent}\n                confirmColor={confirmColor}\n                translateOptions={{\n                    smart_count: selectedIds.length,\n                    name: translate(`resources.${resource}.forcedCaseName`, {\n                        smart_count: selectedIds.length,\n                        _: humanize(\n                            translate(`resources.${resource}.name`, {\n                                smart_count: selectedIds.length,\n                                _: resource\n                                    ? inflect(resource, selectedIds.length)\n                                    : undefined,\n                            }),\n                            true\n                        ),\n                    }),\n                }}\n                onConfirm={handleDelete}\n                onClose={handleDialogClose}\n            />\n        </Fragment>\n    );\n};\n\nconst sanitizeRestProps = ({\n    classes,\n    label,\n    ...rest\n}: Omit<\n    BulkDeleteWithConfirmButtonProps,\n    'resource' | 'icon' | 'mutationMode'\n>) => rest;\n\nexport interface BulkDeleteWithConfirmButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown,\n> extends ButtonProps {\n    confirmContent?: React.ReactNode;\n    confirmTitle?: React.ReactNode;\n    confirmColor?: 'primary' | 'warning';\n    icon?: ReactElement;\n    mutationMode: MutationMode;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        DeleteManyParams<RecordType>\n    > & { meta?: any };\n    successMessage?: string;\n}\n\nconst PREFIX = 'RaBulkDeleteWithConfirmButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.error.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n\nconst defaultIcon = <ActionDelete />;\n", "import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport LockIcon from '@mui/icons-material/Lock';\nimport { Typography, SxProps } from '@mui/material';\nimport clsx from 'clsx';\nimport { useTranslate } from 'ra-core';\n\nexport const AccessDenied = (props: AccessDeniedProps) => {\n    const {\n        className,\n        icon = DEFAULT_ICON,\n        textPrimary = 'ra.page.access_denied',\n        textSecondary = 'ra.message.access_denied',\n        ...rest\n    } = props;\n    const translate = useTranslate();\n    return (\n        <Root className={clsx(AccessDeniedClasses.root, className)} {...rest}>\n            <div className={AccessDeniedClasses.message}>\n                {icon}\n                <Typography variant=\"h5\" mt={3} color=\"text.secondary\">\n                    {translate(textPrimary, { _: textPrimary })}\n                </Typography>\n                <Typography variant=\"body2\">\n                    {translate(textSecondary, {\n                        _: textSecondary,\n                    })}\n                </Typography>\n            </div>\n        </Root>\n    );\n};\n\nexport interface AccessDeniedProps {\n    className?: string;\n    textPrimary?: string;\n    textSecondary?: string;\n    icon?: React.ReactNode;\n    sx?: SxProps;\n}\n\nconst PREFIX = 'RaAccessDenied';\n\nexport const AccessDeniedClasses = {\n    root: `${PREFIX}-root`,\n    icon: `${PREFIX}-icon`,\n    message: `${PREFIX}-message`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100%',\n    [`& .${AccessDeniedClasses.message}`]: {\n        textAlign: 'center',\n        paddingTop: '1em',\n        paddingBottom: '1em',\n        opacity: 0.5,\n    },\n    [`& .${AccessDeniedClasses.icon}`]: {\n        width: '9em',\n        height: '9em',\n    },\n});\n\nconst DEFAULT_ICON = <LockIcon className={AccessDeniedClasses.icon} />;\n", "import * as React from 'react';\nimport { FC } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Children, memo } from 'react';\nimport {\n    AppBar as MuiAppBar,\n    AppBarProps as MuiAppBarProps,\n    Toolbar,\n    useMediaQuery,\n    Theme,\n} from '@mui/material';\nimport { useLocales } from 'ra-core';\n\nimport { SidebarToggleButton } from './SidebarToggleButton';\nimport { LoadingIndicator } from './LoadingIndicator';\nimport { UserMenu } from './UserMenu';\nimport { HideOnScroll } from './HideOnScroll';\nimport { TitlePortal } from './TitlePortal';\nimport { LocalesMenuButton } from '../button';\nimport { useThemesContext } from '../theme/useThemesContext';\nimport { ToggleThemeButton } from '../button/ToggleThemeButton';\n\n/**\n * The AppBar component renders a custom MuiAppBar.\n *\n * @param {Object} props\n * @param {ReactNode} props.children React node/s to be rendered as children of the AppBar\n * @param {string} props.className CSS class applied to the MuiAppBar component\n * @param {string} props.color The color of the AppBar\n * @param {Element | boolean} props.userMenu A custom user menu component for the AppBar. <UserMenu/> component by default. Pass false to disable.\n *\n * @example // add a custom button to the AppBar\n *\n * const MyAppBar = () => (\n *   <AppBar>\n *     <TitlePortal />\n *     <MyCustomButton />\n *   </AppBar>\n * );\n *\n * @example // without a user menu\n *\n * const MyAppBar = () => <AppBar userMenu={false} />;\n */\nexport const AppBar: FC<AppBarProps> = memo(props => {\n    const {\n        alwaysOn,\n        children,\n        className,\n        color = 'secondary',\n        toolbar = defaultToolbarElement,\n        userMenu = DefaultUserMenu,\n        container: Container = alwaysOn ? 'div' : HideOnScroll,\n        ...rest\n    } = props;\n\n    const isXSmall = useMediaQuery<Theme>(theme =>\n        theme.breakpoints.down('sm')\n    );\n\n    return (\n        <Container className={className}>\n            <StyledAppBar\n                className={AppBarClasses.appBar}\n                color={color}\n                {...rest}\n            >\n                <Toolbar\n                    disableGutters\n                    variant={isXSmall ? 'regular' : 'dense'}\n                    className={AppBarClasses.toolbar}\n                >\n                    <SidebarToggleButton className={AppBarClasses.menuButton} />\n                    {Children.count(children) === 0 ? (\n                        <TitlePortal className={AppBarClasses.title} />\n                    ) : (\n                        children\n                    )}\n                    {toolbar}\n                    {typeof userMenu === 'boolean' ? (\n                        userMenu === true ? (\n                            <UserMenu />\n                        ) : null\n                    ) : (\n                        userMenu\n                    )}\n                </Toolbar>\n            </StyledAppBar>\n        </Container>\n    );\n});\n\nconst DefaultToolbar = () => {\n    const locales = useLocales();\n    const { darkTheme } = useThemesContext();\n    return (\n        <>\n            {locales && locales.length > 1 ? <LocalesMenuButton /> : null}\n            {darkTheme && <ToggleThemeButton />}\n            <LoadingIndicator />\n        </>\n    );\n};\n\nconst defaultToolbarElement = <DefaultToolbar />;\n\nconst DefaultUserMenu = <UserMenu />;\n\nexport interface AppBarProps extends MuiAppBarProps {\n    /**\n     * This prop is injected by Layout. You should not use it directly unless\n     * you are using a custom layout.\n     * If you are using the default layout, use `<Layout appBarAlwaysOn>` instead.\n     */\n    alwaysOn?: boolean;\n    container?: React.ElementType<any>;\n    toolbar?: JSX.Element;\n    userMenu?: JSX.Element | boolean;\n}\n\nconst PREFIX = 'RaAppBar';\n\nexport const AppBarClasses = {\n    appBar: `${PREFIX}-appBar`,\n    toolbar: `${PREFIX}-toolbar`,\n    menuButton: `${PREFIX}-menuButton`,\n    menuButtonIconClosed: `${PREFIX}-menuButtonIconClosed`,\n    menuButtonIconOpen: `${PREFIX}-menuButtonIconOpen`,\n    title: `${PREFIX}-title`,\n};\n\nconst StyledAppBar = styled(MuiAppBar, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${AppBarClasses.toolbar}`]: {\n        padding: `0 ${theme.spacing(1)}`,\n        [theme.breakpoints.down('md')]: {\n            minHeight: theme.spacing(6),\n        },\n    },\n    [`& .${AppBarClasses.menuButton}`]: {\n        marginRight: '0.2em',\n    },\n    [`& .${AppBarClasses.title}`]: {},\n}));\n", "import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { IconButton, Tooltip } from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport { useTranslate } from 'ra-core';\n\nimport { useSidebarState } from './useSidebarState';\n\n/**\n * A button that toggles the sidebar. Used by default in the <AppBar>.\n * @param props The component props\n * @param {String} props.className An optional class name to apply to the button\n */\nexport const SidebarToggleButton = (props: SidebarToggleButtonProps) => {\n    const translate = useTranslate();\n\n    const { className } = props;\n    const [open, setOpen] = useSidebarState();\n\n    return (\n        <Tooltip\n            className={className}\n            title={translate(\n                open ? 'ra.action.close_menu' : 'ra.action.open_menu',\n                { _: 'Open/Close menu' }\n            )}\n            enterDelay={500}\n        >\n            <StyledIconButton color=\"inherit\" onClick={() => setOpen(!open)}>\n                <MenuIcon\n                    classes={{\n                        root: open\n                            ? SidebarToggleButtonClasses.menuButtonIconOpen\n                            : SidebarToggleButtonClasses.menuButtonIconClosed,\n                    }}\n                />\n            </StyledIconButton>\n        </Tooltip>\n    );\n};\n\nexport type SidebarToggleButtonProps = {\n    className?: string;\n};\n\nconst PREFIX = 'RaSidebarToggleButton';\n\nexport const SidebarToggleButtonClasses = {\n    menuButtonIconClosed: `${PREFIX}-menuButtonIconClosed`,\n    menuButtonIconOpen: `${PREFIX}-menuButtonIconOpen`,\n};\n\nconst StyledIconButton = styled(IconButton, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${SidebarToggleButtonClasses.menuButtonIconClosed}`]: {\n        transition: theme.transitions.create(['transform'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        transform: 'rotate(0deg)',\n    },\n\n    [`& .${SidebarToggleButtonClasses.menuButtonIconOpen}`]: {\n        transition: theme.transitions.create(['transform'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        transform: 'rotate(180deg)',\n    },\n}));\n", "import { useStore } from 'ra-core';\nimport { useMediaQuery, Theme } from '@mui/material';\n\n/**\n * A hook that returns the sidebar open state and a function to toggle it.\n *\n * The sidebar is open by default on desktop, and closed by default on mobile.\n *\n * @example\n * const ToggleSidebar = () => {\n *     const [open, setOpen] = useSidebarState();\n *     return (\n *         <Button onClick={() => setOpen(!open)}>\n *             {open ? 'Open' : 'Close'}\n *         </Button>\n *     );\n * };\n */\nexport const useSidebarState = (): useSidebarStateResult => {\n    const isXSmall = useMediaQuery<Theme>(\n        theme => theme?.breakpoints.down('sm'),\n        { noSsr: true }\n    );\n    return useStore<boolean>('sidebar.open', isXSmall ? false : true);\n};\n\nexport type useSidebarStateResult = [boolean, (open: boolean) => void];\n", "import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport clsx from 'clsx';\nimport { useTheme } from '@mui/material/styles';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { useLoading } from 'ra-core';\n\nimport { RefreshIconButton, RefreshIconButtonProps } from '../button';\nimport { SxProps } from '@mui/system';\n\nexport const LoadingIndicator = (props: LoadingIndicatorProps) => {\n    const { className, onClick, sx, ...rest } = props;\n    const loading = useLoading();\n\n    const theme = useTheme();\n    return (\n        <Root className={className} sx={sx}>\n            <RefreshIconButton\n                className={`${LoadingIndicatorClasses.loadedIcon} ${\n                    loading && LoadingIndicatorClasses.loadedLoading\n                }`}\n                onClick={onClick}\n            />\n            {loading && (\n                <CircularProgress\n                    className={clsx(\n                        'app-loader',\n                        LoadingIndicatorClasses.loader\n                    )}\n                    color=\"inherit\"\n                    size={theme.spacing(2)}\n                    thickness={6}\n                    {...rest}\n                />\n            )}\n        </Root>\n    );\n};\n\ninterface Props {\n    className?: string;\n    sx?: SxProps;\n}\n\ntype LoadingIndicatorProps = Props & Pick<RefreshIconButtonProps, 'onClick'>;\n\nconst PREFIX = 'RaLoadingIndicator';\n\nexport const LoadingIndicatorClasses = {\n    loader: `${PREFIX}-loader`,\n    loadedLoading: `${PREFIX}-loadedLoading`,\n    loadedIcon: `${PREFIX}-loadedIcon`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (_, styles) => styles.root,\n})({\n    position: 'relative',\n    [`& .${LoadingIndicatorClasses.loadedIcon}`]: {\n        [`&.${LoadingIndicatorClasses.loadedLoading}`]: {\n            opacity: 0,\n        },\n    },\n    [`& .${LoadingIndicatorClasses.loader}`]: {\n        position: 'absolute',\n        top: '30%',\n        left: '30%',\n    },\n});\n", "import AccountCircle from '@mui/icons-material/AccountCircle';\nimport {\n    Avatar,\n    Button,\n    IconButton,\n    Menu,\n    PopoverOrigin,\n    Theme,\n    Tooltip,\n    useMediaQuery,\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useAuthProvider, useGetIdentity, useTranslate } from 'ra-core';\nimport * as React from 'react';\nimport { ReactNode, useCallback, useMemo, useState } from 'react';\nimport { Logout } from '../auth/Logout';\nimport { UserMenuContextProvider } from './UserMenuContextProvider';\n\n/**\n * The UserMenu component renders a Mui Button that shows a Menu.\n * It accepts children that must be Mui MenuItem components.\n *\n * @example\n * import { Logout, UserMenu, useUserMenu } from 'react-admin';\n * import MenuItem from '@mui/material/MenuItem';\n * import ListItemIcon from '@mui/material/ListItemIcon';\n * import ListItemText from '@mui/material/ListItemText';\n * import SettingsIcon from '@mui/icons-material/Settings';\n\n * const ConfigurationMenu = React.forwardRef((props, ref) => {\n *     const { onClose } = useUserMenu();\n *     return (\n *         <MenuItem\n *             ref={ref}\n *             {...props}\n *             to=\"/configuration\"\n *             onClick={onClose}\n *         >\n *             <ListItemIcon>\n *                 <SettingsIcon />\n *             </ListItemIcon>\n *             <ListItemText>Configuration</ListItemText>\n *         </MenuItem>\n *     );\n * });\n *\n * export const MyUserMenu = () => (\n *     <UserMenu>\n *         <ConfigurationMenu />\n *         <Logout />\n *     </UserMenu>\n * );\n * @param props\n * @param {ReactNode} props.children React node/s to be rendered as children of the UserMenu. Must be Mui MenuItem components\n * @param {string} props.className CSS class applied to the MuiAppBar component\n * @param {string} props.label The label of the UserMenu button. Accepts translation keys\n * @param {Element} props.icon The icon of the UserMenu button.\n *\n */\nexport const UserMenu = (props: UserMenuProps) => {\n    const [anchorEl, setAnchorEl] = useState(null);\n    const translate = useTranslate();\n    const { isPending, identity } = useGetIdentity();\n    const authProvider = useAuthProvider();\n    const isLargeEnough = useMediaQuery<Theme>(theme =>\n        theme.breakpoints.up('sm')\n    );\n\n    const {\n        children = !!authProvider ? <Logout /> : null,\n        className,\n        label = 'ra.auth.user_menu',\n        icon = defaultIcon,\n    } = props;\n\n    const handleMenu = event => setAnchorEl(event.currentTarget);\n    const handleClose = useCallback(() => setAnchorEl(null), []);\n    const context = useMemo(() => ({ onClose: handleClose }), [handleClose]);\n    if (!children) return null;\n    const open = Boolean(anchorEl);\n\n    return (\n        <Root className={className}>\n            {isLargeEnough && !isPending && identity?.fullName ? (\n                <Button\n                    aria-label={label && translate(label, { _: label })}\n                    className={UserMenuClasses.userButton}\n                    color=\"inherit\"\n                    startIcon={\n                        identity.avatar ? (\n                            <Avatar\n                                className={UserMenuClasses.avatar}\n                                src={identity.avatar}\n                                alt={identity.fullName}\n                            />\n                        ) : (\n                            icon\n                        )\n                    }\n                    onClick={handleMenu}\n                    variant=\"text\"\n                >\n                    {identity.fullName}\n                </Button>\n            ) : (\n                <Tooltip title={label && translate(label, { _: 'Profile' })}>\n                    <IconButton\n                        aria-label={label && translate(label, { _: 'Profile' })}\n                        aria-owns={open ? 'menu-appbar' : undefined}\n                        aria-haspopup={true}\n                        color=\"inherit\"\n                        onClick={handleMenu}\n                    >\n                        {!isPending && identity?.avatar ? (\n                            <Avatar\n                                className={UserMenuClasses.avatar}\n                                src={identity.avatar}\n                                alt={identity.fullName}\n                            />\n                        ) : (\n                            icon\n                        )}\n                    </IconButton>\n                </Tooltip>\n            )}\n            <UserMenuContextProvider value={context}>\n                <Menu\n                    id=\"menu-appbar\"\n                    disableScrollLock\n                    anchorEl={anchorEl}\n                    anchorOrigin={AnchorOrigin}\n                    transformOrigin={TransformOrigin}\n                    open={open}\n                    onClose={handleClose}\n                >\n                    {children}\n                </Menu>\n            </UserMenuContextProvider>\n        </Root>\n    );\n};\n\nexport interface UserMenuProps {\n    children?: ReactNode;\n    className?: string;\n    label?: string;\n    icon?: ReactNode;\n}\n\nconst PREFIX = 'RaUserMenu';\n\nexport const UserMenuClasses = {\n    userButton: `${PREFIX}-userButton`,\n    avatar: `${PREFIX}-avatar`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${UserMenuClasses.userButton}`]: {\n        textTransform: 'none',\n        marginInlineStart: theme.spacing(0.5),\n    },\n\n    [`& .${UserMenuClasses.avatar}`]: {\n        width: theme.spacing(3),\n        height: theme.spacing(3),\n    },\n}));\n\nconst defaultIcon = <AccountCircle />;\n\nconst AnchorOrigin: PopoverOrigin = {\n    vertical: 'bottom',\n    horizontal: 'right',\n};\n\nconst TransformOrigin: PopoverOrigin = {\n    vertical: 'top',\n    horizontal: 'right',\n};\n", "import * as React from 'react';\nimport { styled, Theme } from '@mui/material/styles';\nimport { useCallback, ReactNode } from 'react';\nimport {\n    ListItemIcon,\n    ListItemText,\n    MenuItem,\n    useMediaQuery,\n} from '@mui/material';\nimport { MenuItemProps } from '@mui/material/MenuItem';\n\nimport ExitIcon from '@mui/icons-material/PowerSettingsNew';\nimport clsx from 'clsx';\nimport { useTranslate, useLogout, useAuthState } from 'ra-core';\n\n/**\n * Logout button component, to be passed to the Admin component\n *\n * Used for the Logout Menu item in the sidebar\n */\nexport const Logout: React.ForwardRefExoticComponent<\n    Omit<MenuItemProps<'li'>, 'ref'> &\n        React.RefAttributes<HTMLLIElement> &\n        LogoutProps\n> = React.forwardRef<HTMLLIElement, LogoutProps & MenuItemProps<'li'>>(\n    function Logout(props, ref) {\n        const { className, redirectTo, icon, ...rest } = props;\n\n        const { authenticated } = useAuthState();\n        const isXSmall = useMediaQuery((theme: Theme) =>\n            theme.breakpoints.down('sm')\n        );\n        const translate = useTranslate();\n        const logout = useLogout();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        const handleClick = useCallback(\n            () => logout(null, redirectTo, false),\n            [redirectTo, logout]\n        );\n\n        if (!authenticated) return null;\n\n        return (\n            <StyledMenuItem\n                className={clsx('logout', className)}\n                onClick={handleClick}\n                ref={ref}\n                component={isXSmall ? 'span' : 'li'}\n                {...rest}\n            >\n                <ListItemIcon className={LogoutClasses.icon}>\n                    {icon ? icon : <ExitIcon fontSize=\"small\" />}\n                </ListItemIcon>\n                <ListItemText>\n                    {translate('ra.auth.logout', { _: 'Logout' })}\n                </ListItemText>\n            </StyledMenuItem>\n        );\n    }\n);\n\nconst PREFIX = 'RaLogout';\n\nexport const LogoutClasses = {\n    icon: `${PREFIX}-icon`,\n};\n\nconst StyledMenuItem = styled(MenuItem, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`& .${LogoutClasses.icon}`]: {},\n});\n\nexport interface LogoutProps {\n    className?: string;\n    redirectTo?: string;\n    icon?: ReactNode;\n}\n", "import { createContext } from 'react';\n\n/**\n * This context provides access to a function for closing the user menu.\n *\n * @example\n * import { Logout, MenuItemLink, UserMenu, useUserMenu } from 'react-admin';\n *\n * const ConfigurationMenu = () => {\n *     const { onClose } = useUserMenu();\n *     return (\n *         <MenuItemLink\n *             to=\"/configuration\"\n *             primaryText=\"pos.configuration\"\n *             leftIcon={<SettingsIcon />}\n *             sidebarIsOpen\n *             onClick={onClose}\n *         />\n *     );\n * };\n *\n * export const MyUserMenu = () => (\n *     <UserMenu>\n *         <ConfigurationMenu />\n *         <Logout />\n *     </UserMenu>\n * );\n */\nexport const UserMenuContext = createContext<UserMenuContextValue | undefined>(\n    undefined\n);\n\nexport type UserMenuContextValue = {\n    /**\n     * Closes the user menu\n     * @see UserMenu\n     */\n    onClose: () => void;\n};\n", "import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { UserMenuContext, UserMenuContextValue } from './UserMenuContext';\n\n/**\n * A React context provider that provides access to the user menu context.\n * @param props\n * @param {ReactNode} props.children\n * @param {UserMenuContextValue} props.value The user menu context\n */\nexport const UserMenuContextProvider = ({ children, value }) => (\n    <UserMenuContext.Provider value={value}>\n        {children}\n    </UserMenuContext.Provider>\n);\n\nexport type UserMenuContextProviderProps = {\n    children: ReactNode;\n    value: UserMenuContextValue;\n};\n", "import * as React from 'react';\nimport useScrollTrigger from '@mui/material/useScrollTrigger';\nimport Slide from '@mui/material/Slide';\n\nexport const HideOnScroll = (props: HideOnScrollProps) => {\n    const { children, className } = props;\n    const trigger = useScrollTrigger();\n    return (\n        <Slide\n            appear={false}\n            direction=\"down\"\n            in={!trigger}\n            className={className}\n        >\n            {children}\n        </Slide>\n    );\n};\n\nexport interface HideOnScrollProps {\n    children: React.ReactElement;\n    className?: string;\n}\n", "import * as React from 'react';\nimport { Typography, TypographyProps } from '@mui/material';\n\nexport const TitlePortal = (props: TypographyProps) => (\n    <Typography\n        flex=\"1\"\n        textOverflow=\"ellipsis\"\n        whiteSpace=\"nowrap\"\n        overflow=\"hidden\"\n        variant=\"h6\"\n        color=\"inherit\"\n        id=\"react-admin-title\"\n        {...props}\n    />\n);\n", "import { useContext } from 'react';\n\nimport { ThemesContext } from './ThemesContext';\nimport { RaThemeOptions } from './types';\n\nexport const useThemesContext = (params?: UseThemesContextParams) => {\n    const { lightTheme, darkTheme, defaultTheme } = params || {};\n    const context = useContext(ThemesContext);\n    return {\n        lightTheme: lightTheme || context.lightTheme,\n        darkTheme: darkTheme || context.darkTheme,\n        defaultTheme: defaultTheme ?? context.defaultTheme,\n    };\n};\n\nexport interface UseThemesContextParams {\n    lightTheme?: RaThemeOptions;\n    darkTheme?: RaThemeOptions;\n    defaultTheme?: 'dark' | 'light';\n    [key: string]: any;\n}\n", "import { createContext } from 'react';\nimport { RaThemeOptions } from './types';\n\nexport const ThemesContext = createContext<ThemesContextValue>({});\n\nexport interface ThemesContextValue {\n    darkTheme?: RaThemeOptions;\n    lightTheme?: RaThemeOptions;\n    defaultTheme?: 'dark' | 'light';\n}\n", "import React from 'react';\nimport { Tooltip, IconButton, useMediaQuery } from '@mui/material';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\nimport { useTranslate } from 'ra-core';\n\nimport { useThemesContext, useTheme } from '../theme';\n\n/**\n * Button toggling the theme (light or dark).\n *\n * Enabled by default in the <AppBar> when the <Admin> component has a darkMode.\n *\n * @example\n * import { AppBar, ToggleThemeButton } from 'react-admin';\n *\n * const MyAppBar = () => (\n *     <AppBar toolbar={<ToggleThemeButton />} />\n * );\n *\n * const MyLayout = ({ children }) => (\n *     <Layout appBar={MyAppBar}>\n *         {children}\n *     </Layout>\n * );\n */\nexport const ToggleThemeButton = () => {\n    const translate = useTranslate();\n    const { darkTheme, defaultTheme } = useThemesContext();\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', {\n        noSsr: true,\n    });\n    const [theme, setTheme] = useTheme(\n        defaultTheme || (prefersDarkMode && darkTheme ? 'dark' : 'light')\n    );\n\n    const handleTogglePaletteType = (): void => {\n        setTheme(theme === 'dark' ? 'light' : 'dark');\n    };\n    const toggleThemeTitle = translate('ra.action.toggle_theme', {\n        _: 'Toggle Theme',\n    });\n\n    return (\n        <Tooltip title={toggleThemeTitle} enterDelay={300}>\n            <IconButton\n                color=\"inherit\"\n                onClick={handleTogglePaletteType}\n                aria-label={toggleThemeTitle}\n            >\n                {theme === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\n            </IconButton>\n        </Tooltip>\n    );\n};\n", "import { useStore } from 'ra-core';\nimport { ThemeType } from './types';\nimport { useMediaQuery } from '@mui/material';\nimport { useThemesContext } from './useThemesContext';\n\nexport type ThemeSetter = (theme: ThemeType) => void;\n\n/**\n * Read and update the theme mode (light or dark)\n *\n * @example\n * const [theme, setTheme] = useTheme('light');\n * const toggleTheme = () => {\n *    setTheme(theme === 'light' ? 'dark' : 'light');\n * };\n *\n */\nexport const useTheme = (type?: ThemeType): [ThemeType, ThemeSetter] => {\n    const { darkTheme } = useThemesContext();\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', {\n        noSsr: true,\n    });\n    const [theme, setter] = useStore<ThemeType>(\n        'theme',\n        type ?? (prefersDarkMode && darkTheme ? 'dark' : 'light')\n    );\n\n    // Ensure that even though the store has its value set to 'dark', we still use the light theme when no dark theme is available\n    return [darkTheme != null ? theme : 'light', setter];\n};\n", "import * as React from 'react';\nimport { ReactNode, useMemo } from 'react';\nimport {\n    ThemeProvider as MuiThemeProvider,\n    createTheme,\n} from '@mui/material/styles';\nimport { useMediaQuery } from '@mui/material';\n\nimport { useTheme } from './useTheme';\nimport { useThemesContext } from './useThemesContext';\nimport { AdminChildren } from 'ra-core';\n\n/**\n * This sets the Material UI theme based on the preferred theme type.\n *\n * @param props\n * @param props.children The children of the component.\n * @param {ThemeOptions} props.theme The initial theme. Optional, use the one from the context if not provided.\n *\n * @example\n *\n * import { ThemesContext, ThemeProvider } from 'react-admin';\n *\n * const App = () => (\n *    <ThemesContext.Provider value={{ lightTheme, darkTheme }}>\n *      <ThemeProvider>\n *        <Button>Test</Button>\n *      </ThemeProvider>\n *   </ThemesContext.Provider>\n * );\n */\nexport const ThemeProvider = ({ children }: ThemeProviderProps) => {\n    const { lightTheme, darkTheme, defaultTheme } = useThemesContext();\n\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', {\n        noSsr: true,\n    });\n    const [mode] = useTheme(\n        defaultTheme || (prefersDarkMode && darkTheme ? 'dark' : 'light')\n    );\n\n    const themeValue = useMemo(() => {\n        try {\n            return createTheme(mode === 'dark' ? darkTheme : lightTheme);\n        } catch (e) {\n            console.warn('Failed to reuse custom theme from store', e);\n            return createTheme();\n        }\n    }, [mode, lightTheme, darkTheme]);\n\n    return (\n        <MuiThemeProvider theme={themeValue}>\n            {/* Had to cast here because Provider only accepts ReactNode but we might have a render function */}\n            {children as ReactNode}\n        </MuiThemeProvider>\n    );\n};\n\nexport interface ThemeProviderProps {\n    children: AdminChildren;\n}\n", "import { RaThemeOptions } from './types';\nimport { deepmerge } from '@mui/utils';\n\nconst defaultThemeInvariants = {\n    typography: {\n        h6: {\n            fontWeight: 400,\n        },\n    },\n    sidebar: {\n        width: 240,\n        closedWidth: 50,\n    },\n    components: {\n        MuiAutocomplete: {\n            defaultProps: {\n                fullWidth: true,\n            },\n            variants: [\n                {\n                    props: {},\n                    style: ({ theme }) => ({\n                        [theme.breakpoints.down('sm')]: { width: '100%' },\n                    }),\n                },\n            ],\n        },\n        MuiTextField: {\n            defaultProps: {\n                variant: 'filled' as const,\n                margin: 'dense' as const,\n                size: 'small' as const,\n                fullWidth: true,\n            },\n            variants: [\n                {\n                    props: {},\n                    style: ({ theme }) => ({\n                        [theme.breakpoints.down('sm')]: { width: '100%' },\n                    }),\n                },\n            ],\n        },\n        MuiFormControl: {\n            defaultProps: {\n                variant: 'filled' as const,\n                margin: 'dense' as const,\n                size: 'small' as const,\n                fullWidth: true,\n            },\n        },\n        RaSimpleFormIterator: {\n            defaultProps: {\n                fullWidth: true,\n            },\n        },\n        RaTranslatableInputs: {\n            defaultProps: {\n                fullWidth: true,\n            },\n        },\n    },\n};\n\nexport const defaultLightTheme: RaThemeOptions = deepmerge(\n    defaultThemeInvariants,\n    {\n        palette: {\n            background: {\n                default: '#fafafb',\n            },\n            secondary: {\n                light: '#6ec6ff',\n                main: '#2196f3',\n                dark: '#0069c0',\n                contrastText: '#fff',\n            },\n        },\n        components: {\n            MuiFilledInput: {\n                styleOverrides: {\n                    root: {\n                        backgroundColor: 'rgba(0, 0, 0, 0.04)',\n                        '&$disabled': {\n                            backgroundColor: 'rgba(0, 0, 0, 0.04)',\n                        },\n                    },\n                },\n            },\n        },\n    }\n);\n\nexport const defaultDarkTheme: RaThemeOptions = deepmerge(\n    defaultThemeInvariants,\n    {\n        palette: {\n            mode: 'dark',\n            primary: {\n                main: '#90caf9',\n            },\n            background: {\n                default: '#313131',\n            },\n        },\n    }\n);\n\nexport const defaultTheme = defaultLightTheme;\n", "import { createTheme, PaletteOptions, Theme } from '@mui/material';\nimport { RaThemeOptions } from './types';\n\n/**\n * Nano: A dense theme with minimal chrome, ideal for complex apps.\n *\n * Uses a small font size, reduced spacing, text buttons, standard variant inputs, pale colors.\n */\n\nconst componentsOverrides = (theme: Theme) => ({\n    MuiAlert: {\n        defaultProps: {\n            variant: 'outlined' as const,\n        },\n    },\n    MuiAppBar: {\n        defaultProps: {\n            elevation: 1,\n        },\n    },\n    MuiAutocomplete: {\n        defaultProps: {\n            fullWidth: true,\n        },\n        variants: [\n            {\n                props: {},\n                style: ({ theme }: { theme: Theme }) => ({\n                    [theme.breakpoints.down('sm')]: { width: '100%' },\n                }),\n            },\n        ],\n        styleOverrides: {\n            root: {\n                '& label+.MuiInput-root.MuiInputBase-root': {\n                    marginTop: theme.spacing(1.5),\n                },\n                '& label[data-shrink=false]+.MuiInput-root.MuiInputBase-root': {\n                    marginTop: 0,\n                    paddingBottom: theme.spacing(2),\n                },\n            },\n            input: {\n                padding: theme.spacing(0.5),\n            },\n        },\n    },\n    MuiButton: {\n        defaultProps: {\n            variant: 'text' as const,\n            size: 'small' as const,\n        },\n        styleOverrides: {\n            root: {\n                paddingTop: theme.spacing(0.2),\n                paddingBottom: theme.spacing(0.2),\n            },\n        },\n    },\n    MuiCard: {\n        defaultProps: {\n            square: true,\n        },\n    },\n    MuiChip: {\n        defaultProps: {\n            variant: 'outlined' as const,\n        },\n    },\n    MuiFormControl: {\n        defaultProps: {\n            variant: 'standard' as const,\n            margin: 'dense' as const,\n            size: 'small' as const,\n            fullWidth: true,\n        },\n    },\n    MuiFormHelperText: {\n        defaultProps: {\n            margin: 'dense' as const,\n        },\n    },\n    MuiIconButton: {\n        defaultProps: {\n            size: 'small' as const,\n        },\n    },\n    MuiInputBase: {\n        styleOverrides: {\n            root: {\n                'label+&.MuiInputBase-root': {\n                    marginTop: theme.spacing(1.5),\n                },\n                'label[data-shrink=false]+&.MuiInputBase-root': {\n                    marginTop: 0,\n                    paddingBottom: theme.spacing(1.5),\n                },\n            },\n            input: {\n                padding: theme.spacing(0.5),\n            },\n        },\n    },\n    MuiInputLabel: {\n        styleOverrides: {\n            root: {\n                paddingLeft: theme.spacing(0.5),\n            },\n        },\n        defaultProps: {\n            margin: 'dense' as const,\n        },\n    },\n    MuiListItem: {\n        defaultProps: {\n            dense: true,\n        },\n    },\n    MuiListItemIcon: {\n        styleOverrides: {\n            root: {\n                '&.MuiListItemIcon-root': {\n                    minWidth: theme.spacing(3.5),\n                },\n            },\n        },\n    },\n    MuiMenuItem: {\n        styleOverrides: {\n            root: {\n                paddingTop: theme.spacing(0.5),\n                paddingBottom: theme.spacing(0.5),\n                paddingLeft: theme.spacing(1),\n                paddingRight: theme.spacing(1),\n            },\n        },\n    },\n    MuiOutlinedInput: {\n        defaultProps: {\n            margin: 'dense' as const,\n        },\n        styleOverrides: {\n            input: {\n                padding: 16,\n            },\n        },\n    },\n    MuiPaper: {\n        styleOverrides: {\n            elevation1: {\n                boxShadow: theme.shadows[1],\n            },\n            root: {\n                backgroundColor: theme.palette.background.default,\n            },\n        },\n    },\n    MuiSnackbar: {\n        styleOverrides: {\n            root: {\n                '& .RaNotification-error': {\n                    border: `1px solid ${theme.palette.error.main}`,\n                    backgroundColor: `${theme.palette.common.white} !important`,\n                    color: `${theme.palette.error.main} !important`,\n                },\n                '& .RaNotification-warning': {\n                    border: `1px solid ${theme.palette.warning.main}`,\n                    backgroundColor: `${theme.palette.common.white} !important`,\n                    color: `${theme.palette.warning.main} !important`,\n                },\n                '& .RaNotification-info': {\n                    border: `1px solid ${theme.palette.info.main}`,\n                    backgroundColor: `${theme.palette.common.white} !important`,\n                    color: `${theme.palette.info.main} !important`,\n                },\n                '& .RaNotification-success': {\n                    border: `1px solid ${theme.palette.success.main}`,\n                    backgroundColor: `${theme.palette.common.white} !important`,\n                    color: `${theme.palette.success.main} !important`,\n                },\n            },\n        },\n    },\n    MuiTabs: {\n        styleOverrides: {\n            root: {\n                '&.MuiTabs-root': {\n                    minHeight: theme.spacing(3.5),\n                },\n            },\n        },\n    },\n    MuiTab: {\n        styleOverrides: {\n            root: {\n                '&.MuiTab-root': {\n                    padding: `${theme.spacing(0.5)} ${theme.spacing(1)}`,\n                    minHeight: theme.spacing(3.5),\n                    minWidth: theme.spacing(10),\n                },\n            },\n        },\n    },\n    MuiTable: {\n        defaultProps: {\n            size: 'small' as const,\n        },\n    },\n    MuiTableCell: {\n        styleOverrides: {\n            root: {\n                padding: theme.spacing(1),\n                '&.MuiTableCell-sizeSmall': {\n                    padding: theme.spacing(0.5),\n                },\n                '&.MuiTableCell-paddingNone': {\n                    padding: 0,\n                },\n            },\n        },\n    },\n    MuiTextField: {\n        defaultProps: {\n            variant: 'standard' as const,\n            margin: 'dense' as const,\n            size: 'small' as const,\n            fullWidth: true,\n        },\n        variants: [\n            {\n                props: {},\n                style: ({ theme }: { theme: Theme }) => ({\n                    [theme.breakpoints.down('sm')]: { width: '100%' },\n                }),\n            },\n        ],\n    },\n    MuiToolbar: {\n        defaultProps: {\n            variant: 'dense' as const,\n        },\n        styleOverrides: {\n            root: {\n                minHeight: theme.spacing(4.5),\n            },\n            regular: {\n                backgroundColor: theme.palette.background.paper,\n            },\n        },\n    },\n    RaDatagrid: {\n        styleOverrides: {\n            root: {\n                '& .RaDatagrid-headerCell': {\n                    color: theme.palette.primary.main,\n                },\n            },\n        },\n    },\n    RaFilterForm: {\n        styleOverrides: {\n            root: {\n                [theme.breakpoints.up('sm')]: {\n                    minHeight: theme.spacing(7.1),\n                },\n            },\n        },\n    },\n    RaFilterFormInput: {\n        styleOverrides: {\n            root: {\n                '& .RaFilterFormInput-hideButton': {\n                    marginBottom: theme.spacing(0.5),\n                },\n            },\n        },\n    },\n    RaLayout: {\n        styleOverrides: {\n            root: {\n                '& .RaLayout-appFrame': {\n                    marginTop: theme.spacing(5),\n                },\n            },\n        },\n    },\n    RaLoadingIndicator: {\n        styleOverrides: {\n            root: {\n                '& .RaLoadingIndicator-loader': {\n                    top: '20%',\n                    left: '20%',\n                },\n            },\n        },\n    },\n    RaMenuItemLink: {\n        styleOverrides: {\n            root: {\n                paddingLeft: theme.spacing(1),\n                paddingRight: theme.spacing(1),\n                '&.RaMenuItemLink-active': {\n                    color: theme.palette.primary.dark,\n                    fontWeight: 700,\n                    '& .MuiSvgIcon-root': {\n                        fill: theme.palette.primary.dark,\n                    },\n                },\n            },\n        },\n    },\n    RaSimpleFormIterator: {\n        defaultProps: {\n            fullWidth: true,\n        },\n    },\n    RaTranslatableInputs: {\n        defaultProps: {\n            fullWidth: true,\n        },\n    },\n});\n\nconst alert = {\n    error: { main: '#B57185' },\n    warning: { main: '#F2CB05' },\n    info: { main: '#39AEA9' },\n    success: { main: '#00745F' },\n};\n\nconst darkPalette: PaletteOptions = {\n    mode: 'dark' as 'dark',\n    primary: { main: '#f9fafb' },\n    secondary: { main: '#a0a0a0' },\n    background: { default: '#363D40' },\n    ...alert,\n};\n\nconst lightPalette: PaletteOptions = {\n    mode: 'light' as 'light',\n    primary: { main: '#00585C' },\n    secondary: { main: '#64B4B8' },\n    background: { default: '#f9fafb' },\n    text: { primary: '#212b36' },\n    ...alert,\n};\n\nconst createNanoTheme = (palette: RaThemeOptions['palette']) => {\n    const themeOptions = {\n        palette,\n        shape: { borderRadius: 0 },\n        sidebar: {\n            width: 200,\n            closedWidth: 36,\n        },\n        spacing: 8,\n        typography: {\n            fontFamily: 'Onest, sans-serif',\n            fontSize: 12,\n            h1: { fontSize: '7rem' },\n            h2: { fontWeight: 400 },\n            h3: { fontWeight: 500 },\n            h4: { fontWeight: 700 },\n            h5: { fontWeight: 700 },\n        },\n    };\n    const theme = createTheme(themeOptions);\n    theme.components = componentsOverrides(theme);\n    return theme;\n};\n\nexport const nanoLightTheme = createNanoTheme(lightPalette);\nexport const nanoDarkTheme = createNanoTheme(darkPalette);\n", "import { alpha, createTheme, PaletteOptions, Theme } from '@mui/material';\nimport { RaThemeOptions } from './types';\n\n/**\n * Radiant: A theme emphasizing clarity and ease of use.\n *\n * Uses generous margins, outlined inputs and buttons, no uppercase, and an acid color palette.\n */\n\nconst componentsOverrides = (theme: Theme) => {\n    const shadows = [\n        alpha(theme.palette.primary.main, 0.2),\n        alpha(theme.palette.primary.main, 0.1),\n        alpha(theme.palette.primary.main, 0.05),\n    ];\n    return {\n        MuiAppBar: {\n            styleOverrides: {\n                colorSecondary: {\n                    backgroundColor: theme.palette.background.default,\n                    color: theme.palette.text.primary,\n                },\n            },\n        },\n        MuiAutocomplete: {\n            defaultProps: {\n                fullWidth: true,\n            },\n        },\n        MuiButton: {\n            defaultProps: {\n                variant: 'outlined' as const,\n            },\n            styleOverrides: {\n                sizeSmall: {\n                    padding: `${theme.spacing(0.5)} ${theme.spacing(1.5)}`,\n                },\n            },\n        },\n        MuiFormControl: {\n            defaultProps: {\n                variant: 'outlined' as const,\n                margin: 'dense' as const,\n                size: 'small' as const,\n                fullWidth: true,\n            },\n        },\n        MuiPaper: {\n            styleOverrides: {\n                elevation1: {\n                    boxShadow: `${shadows[0]} -2px 2px, ${shadows[1]} -4px 4px,${shadows[2]} -6px 6px`,\n                },\n                root: {\n                    backgroundClip: 'padding-box',\n                },\n            },\n        },\n        MuiTableCell: {\n            styleOverrides: {\n                root: {\n                    padding: theme.spacing(1.5),\n                    '&.MuiTableCell-sizeSmall': {\n                        padding: theme.spacing(1),\n                    },\n                    '&.MuiTableCell-paddingNone': {\n                        padding: 0,\n                    },\n                },\n            },\n        },\n        MuiTableRow: {\n            styleOverrides: {\n                root: {\n                    '&:last-child td': { border: 0 },\n                },\n            },\n        },\n        MuiTextField: {\n            defaultProps: {\n                variant: 'outlined' as const,\n                margin: 'dense' as const,\n                size: 'small' as const,\n                fullWidth: true,\n            },\n        },\n        RaDatagrid: {\n            styleOverrides: {\n                root: {\n                    '& .RaDatagrid-headerCell': {\n                        color: theme.palette.primary.main,\n                    },\n                },\n            },\n        },\n        RaFilterForm: {\n            styleOverrides: {\n                root: {\n                    [theme.breakpoints.up('sm')]: {\n                        minHeight: theme.spacing(6),\n                    },\n                },\n            },\n        },\n        RaLayout: {\n            styleOverrides: {\n                root: {\n                    '& .RaLayout-appFrame': { marginTop: theme.spacing(5) },\n                },\n            },\n        },\n        RaMenuItemLink: {\n            styleOverrides: {\n                root: {\n                    borderLeft: `3px solid ${theme.palette.primary.contrastText}`,\n                    '&:hover': {\n                        borderRadius: '0px 100px 100px 0px',\n                    },\n                    '&.RaMenuItemLink-active': {\n                        borderLeft: `3px solid ${theme.palette.primary.main}`,\n                        borderRadius: '0px 100px 100px 0px',\n                        backgroundImage: `linear-gradient(98deg, ${theme.palette.primary.light}, ${theme.palette.primary.dark} 94%)`,\n                        boxShadow: theme.shadows[1],\n                        color: theme.palette.primary.contrastText,\n\n                        '& .MuiSvgIcon-root': {\n                            fill: theme.palette.primary.contrastText,\n                        },\n                    },\n                },\n            },\n        },\n        RaSimpleFormIterator: {\n            defaultProps: {\n                fullWidth: true,\n            },\n        },\n        RaTranslatableInputs: {\n            defaultProps: {\n                fullWidth: true,\n            },\n        },\n    };\n};\n\nconst alert = {\n    error: { main: '#DB488B' },\n    warning: { main: '#F2E963' },\n    info: { main: '#3ED0EB' },\n    success: { main: '#0FBF9F' },\n};\n\nconst darkPalette: PaletteOptions = {\n    primary: { main: '#9055fd' },\n    secondary: { main: '#FF83F6' },\n    background: { default: '#110e1c', paper: '#151221' },\n    ...alert,\n    mode: 'dark' as 'dark',\n};\n\nconst lightPalette: PaletteOptions = {\n    primary: { main: '#9055fd' },\n    secondary: { main: '#A270FF' },\n    background: { default: '#f0f1f6' },\n    text: {\n        primary: '#544f5a',\n        secondary: '#89868D',\n    },\n    ...alert,\n    mode: 'light' as 'light',\n};\n\nconst createRadiantTheme = (palette: RaThemeOptions['palette']) => {\n    const themeOptions = {\n        palette,\n        shape: { borderRadius: 6 },\n        sidebar: { width: 250 },\n        spacing: 10,\n        typography: {\n            fontFamily: 'Gabarito, tahoma, sans-serif',\n            h1: {\n                fontWeight: 500,\n                fontSize: '6rem',\n            },\n            h2: { fontWeight: 600 },\n            h3: { fontWeight: 700 },\n            h4: { fontWeight: 800 },\n            h5: { fontWeight: 900 },\n            button: { textTransform: undefined, fontWeight: 700 },\n        },\n    };\n    const theme = createTheme(themeOptions);\n    theme.components = componentsOverrides(theme);\n    return theme;\n};\n\nexport const radiantLightTheme = createRadiantTheme(lightPalette);\nexport const radiantDarkTheme = createRadiantTheme(darkPalette);\n", "import {\n    alpha,\n    createTheme,\n    darken,\n    Theme,\n    PaletteOptions,\n} from '@mui/material';\nimport { RaThemeOptions } from './types';\n\n/**\n * House: A young and joyful theme.\n *\n * Uses rounded corners, blurry backdrop, large padding, and a bright color palette.\n */\n\nconst componentsOverrides = (theme: Theme) => ({\n    MuiBackdrop: {\n        styleOverrides: {\n            root: {\n                backgroundColor: alpha(darken('#000C57', 0.4), 0.2),\n                backdropFilter: 'blur(2px)',\n                '&.MuiBackdrop-invisible': {\n                    backgroundColor: 'transparent',\n                    backdropFilter: 'blur(2px)',\n                },\n            },\n        },\n    },\n    MuiAutocomplete: {\n        defaultProps: {\n            fullWidth: true,\n        },\n    },\n    MuiFormControl: {\n        defaultProps: {\n            margin: 'dense' as const,\n            fullWidth: true,\n        },\n    },\n    MuiOutlinedInput: {\n        styleOverrides: {\n            input: {\n                padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n            },\n        },\n    },\n    MuiTab: {\n        styleOverrides: {\n            root: {\n                padding: 0,\n                height: 38,\n                minHeight: 38,\n                borderRadius: 6,\n                transition: 'color .2s',\n\n                '&.MuiButtonBase-root': {\n                    minWidth: 'auto',\n                    paddingLeft: 20,\n                    paddingRight: 20,\n                    marginRight: 4,\n                },\n                '&.Mui-selected, &.Mui-selected:hover': {\n                    color: theme.palette.primary.contrastText,\n                    zIndex: 5,\n                },\n                '&:hover': {\n                    color: theme.palette.primary.main,\n                },\n            },\n        },\n    },\n    MuiTableRow: {\n        styleOverrides: {\n            root: {\n                '&:last-child td': { border: 0 },\n            },\n        },\n    },\n    MuiTableCell: {\n        styleOverrides: {\n            root: {\n                padding: theme.spacing(2),\n                '&.MuiTableCell-sizeSmall': {\n                    padding: theme.spacing(1.5),\n                },\n                '&.MuiTableCell-paddingNone': {\n                    padding: theme.spacing(0.5),\n                },\n            },\n        },\n    },\n    MuiTabs: {\n        styleOverrides: {\n            root: {\n                height: 38,\n                minHeight: 38,\n                overflow: 'visible',\n            },\n            indicator: {\n                height: 38,\n                minHeight: 38,\n                borderRadius: 6,\n                border: `1px solid ${theme.palette.primary.light}`,\n                boxShadow: theme.shadows[1],\n            },\n            scrollableX: {\n                overflow: 'visible !important',\n            },\n        },\n    },\n    MuiTextField: {\n        defaultProps: {\n            variant: 'outlined' as const,\n            fullWidth: true,\n        },\n    },\n    RaAppBar: {\n        styleOverrides: {\n            root: {\n                color: theme.palette.text.primary,\n                '& .RaAppBar-toolbar': {\n                    backgroundColor: theme.palette.primary.main,\n                    color: theme.palette.background.default,\n                    backgroundImage: `linear-gradient(310deg, ${theme.palette.primary.light}, ${theme.palette.secondary.main})`,\n                },\n            },\n        },\n    },\n    RaMenuItemLink: {\n        styleOverrides: {\n            root: {\n                padding: 10,\n                marginRight: 10,\n                marginLeft: 10,\n                '&:hover': {\n                    borderRadius: 5,\n                },\n                '&.RaMenuItemLink-active': {\n                    borderRadius: 10,\n                    backgroundColor: theme.palette.common.white,\n                    color: theme.palette.primary.main,\n                    '&:before': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: '0; right: 0; bottom: 0; left: 0',\n                        zIndex: '-1',\n                        margin: '-2px',\n                        borderRadius: '12px',\n                        background: `linear-gradient(310deg, ${theme.palette.primary.light}, ${theme.palette.secondary.main})`,\n                    },\n                    '& .MuiSvgIcon-root': {\n                        fill: theme.palette.primary.main,\n                    },\n                },\n            },\n        },\n    },\n    RaSimpleFormIterator: {\n        defaultProps: {\n            fullWidth: true,\n        },\n    },\n    RaTranslatableInputs: {\n        defaultProps: {\n            fullWidth: true,\n        },\n    },\n});\n\nconst alert = {\n    error: { main: '#DB488B' },\n    warning: { main: '#8C701B' },\n    info: { main: '#3ED0EB' },\n    success: { main: '#0FBF9F' },\n};\n\nconst darkPalette: PaletteOptions = {\n    primary: { main: '#ec7a77', light: '#fbcf33' },\n    background: { default: '#363D40', paper: '#2B3033' },\n    ...alert,\n    mode: 'dark' as 'dark',\n};\n\nconst lightPalette: PaletteOptions = {\n    primary: { main: '#344767', light: '#7928ca' },\n    secondary: { main: '#f90283' },\n    background: { default: '#f7f8f9', paper: '#ffffff' },\n    ...alert,\n    mode: 'light' as 'light',\n};\n\nconst createHouseTheme = (palette: RaThemeOptions['palette']) => {\n    const themeOptions = {\n        palette,\n        shape: { borderRadius: 20 },\n        sidebar: { width: 250 },\n        spacing: 9,\n        typography: { fontFamily: `'Open Sans', sans-serif` },\n    };\n    const theme = createTheme(themeOptions);\n    theme.components = componentsOverrides(theme);\n    return theme;\n};\n\nexport const houseLightTheme = createHouseTheme(lightPalette);\nexport const houseDarkTheme = createHouseTheme(darkPalette);\n", "import * as React from 'react';\nimport { Alert, AlertProps, Button, ButtonProps } from '@mui/material';\nimport { useTranslate } from 'ra-core';\n\nexport const ApplicationUpdatedNotification = React.forwardRef<\n    HTMLDivElement,\n    ApplicationUpdatedNotificationProps\n>((props, ref) => {\n    const {\n        ButtonProps,\n        updateText = 'ra.action.update_application',\n        notificationText = 'ra.notification.application_update_available',\n        ...alertProps\n    } = props;\n    const translate = useTranslate();\n\n    const handleButtonClick = () => {\n        window.location.reload();\n    };\n    return (\n        <Alert\n            ref={ref}\n            severity=\"info\"\n            action={\n                <Button\n                    color=\"inherit\"\n                    size=\"small\"\n                    onClick={handleButtonClick}\n                    {...ButtonProps}\n                >\n                    {translate(updateText, { _: updateText })}\n                </Button>\n            }\n            {...alertProps}\n        >\n            {translate(notificationText, { _: notificationText })}\n        </Alert>\n    );\n});\n\nexport interface ApplicationUpdatedNotificationProps extends AlertProps {\n    ButtonProps?: ButtonProps;\n    notificationText?: string;\n    updateText?: string;\n}\n", "import * as React from 'react';\nimport { styled, SxProps } from '@mui/material/styles';\nimport { Typography } from '@mui/material';\nimport WarningAmber from '@mui/icons-material/WarningAmber';\nimport clsx from 'clsx';\nimport { useDefaultTitle, useTranslate } from 'ra-core';\nimport { Title } from './Title';\n\nexport const AuthenticationError = (props: AuthenticationErrorProps) => {\n    const {\n        className,\n        icon = DEFAULT_ICON,\n        textPrimary = 'ra.page.authentication_error',\n        textSecondary = 'ra.message.authentication_error',\n        ...rest\n    } = props;\n\n    const translate = useTranslate();\n    const title = useDefaultTitle();\n    return (\n        <Root\n            className={clsx(AuthenticationErrorClasses.root, className)}\n            {...rest}\n        >\n            <Title defaultTitle={title} />\n            <div className={AuthenticationErrorClasses.message}>\n                {icon}\n                <Typography variant=\"h5\" mt={3} color=\"text.secondary\">\n                    {translate(textPrimary, { _: textPrimary })}\n                </Typography>\n                <Typography variant=\"body2\">\n                    {translate(textSecondary, { _: textSecondary })}\n                </Typography>\n            </div>\n        </Root>\n    );\n};\n\nexport interface AuthenticationErrorProps {\n    className?: string;\n    textPrimary?: string;\n    textSecondary?: string;\n    icon?: React.ReactNode;\n    sx?: SxProps;\n}\n\nconst PREFIX = 'RaAuthenticationError';\n\nexport const AuthenticationErrorClasses = {\n    root: `${PREFIX}-root`,\n    icon: `${PREFIX}-icon`,\n    message: `${PREFIX}-message`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100%',\n\n    [`& .${AuthenticationErrorClasses.message}`]: {\n        textAlign: 'center',\n        paddingTop: '1em',\n        paddingBottom: '1em',\n        opacity: 0.5,\n    },\n\n    [`& .${AuthenticationErrorClasses.icon}`]: {\n        width: '9em',\n        height: '9em',\n    },\n});\n\nconst DEFAULT_ICON = (\n    <WarningAmber className={AuthenticationErrorClasses.icon} />\n);\n", "import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { ReactElement } from 'react';\nimport { createPortal } from 'react-dom';\nimport { RaRecord, TitleComponent, warning } from 'ra-core';\n\nimport { PageTitle } from './PageTitle';\nimport { PageTitleConfigurable } from './PageTitleConfigurable';\n\nexport const Title = (props: TitleProps) => {\n    const { defaultTitle, title, preferenceKey, ...rest } = props;\n    const [container, setContainer] = useState<HTMLElement | null>(() =>\n        typeof document !== 'undefined'\n            ? document.getElementById('react-admin-title')\n            : null\n    );\n\n    // on first mount, we don't have the container yet, so we wait for it\n    useEffect(() => {\n        setContainer(container => {\n            const isInTheDom =\n                typeof document !== 'undefined' &&\n                document.body.contains(container);\n            if (container && isInTheDom) return container;\n            return typeof document !== 'undefined'\n                ? document.getElementById('react-admin-title')\n                : null;\n        });\n    }, []);\n\n    if (!container) return null;\n\n    warning(!defaultTitle && !title, 'Missing title prop in <Title> element');\n\n    const pageTitle =\n        preferenceKey === false ? (\n            <PageTitle title={title} defaultTitle={defaultTitle} {...rest} />\n        ) : (\n            <PageTitleConfigurable\n                title={title}\n                defaultTitle={defaultTitle}\n                preferenceKey={preferenceKey}\n                {...rest}\n            />\n        );\n\n    return <>{createPortal(pageTitle, container)}</>;\n};\n\nexport interface TitleProps {\n    className?: string;\n    defaultTitle?: TitleComponent;\n    record?: Partial<RaRecord>;\n    title?: string | ReactElement;\n    preferenceKey?: string | false;\n}\n", "import * as React from 'react';\nimport { useTranslate } from 'ra-core';\n\nexport const PageTitle = ({ title, defaultTitle, className, ...rest }: any) => {\n    const translate = useTranslate();\n\n    return (\n        <span className={className}>\n            {!title ? (\n                <span {...rest}>{defaultTitle}</span>\n            ) : typeof title === 'string' ? (\n                <span {...rest}>{translate(title, { _: title })}</span>\n            ) : (\n                title\n            )}\n        </span>\n    );\n};\n", "import * as React from 'react';\nimport { useRef, useEffect, useState, cloneElement, ReactElement } from 'react';\nimport {\n    usePreferencesEditor,\n    PreferenceKeyContextProvider,\n    useTranslate,\n} from 'ra-core';\nimport { alpha, Popover } from '@mui/material';\nimport { styled, SxProps } from '@mui/material/styles';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport clsx from 'clsx';\n\n/**\n * Wrap any component with this component to make it configurable\n *\n * When the edit mode is enabled, users will see a button to edit the component;\n * when clicked, the inspector will show the editor element.\n *\n * Creates a context for the preference key, so that both the child component\n * and the editor can access it using usePreferenceKey();\n *\n * @example\n * const ConfigurableTextBlock = ({ preferenceKey = \"TextBlock\", ...props }) => (\n *     <Configurable editor={<TextBlockInspector />} preferenceKey={preferenceKey}>\n *         <TextBlock {...props} />\n *     </Configurable>\n * );\n */\nexport const Configurable = (props: ConfigurableProps) => {\n    const {\n        children,\n        editor,\n        preferenceKey,\n        openButtonLabel = 'ra.configurable.customize',\n        sx,\n    } = props;\n\n    const prefixedPreferenceKey = `preferences.${preferenceKey}`;\n    const preferencesEditorContext = usePreferencesEditor();\n    const hasPreferencesEditorContext = !!preferencesEditorContext;\n\n    const translate = useTranslate();\n\n    const {\n        isEnabled,\n        setEditor,\n        preferenceKey: currentPreferenceKey,\n        setPreferenceKey,\n    } = preferencesEditorContext || {};\n\n    const isEditorOpen = prefixedPreferenceKey === currentPreferenceKey;\n    const editorOpenRef = useRef(isEditorOpen);\n    const wrapperRef = useRef(null);\n    const [isCustomizeButtonVisible, setIsCustomizeButtonVisible] =\n        useState(false);\n\n    useEffect(() => {\n        editorOpenRef.current = isEditorOpen;\n    }, [isEditorOpen]);\n\n    // on unmount, if selected, remove the editor\n    useEffect(() => {\n        return () => {\n            if (!editorOpenRef.current) return;\n            setPreferenceKey && setPreferenceKey(null);\n            setEditor && setEditor(null);\n        };\n    }, [setEditor, setPreferenceKey]);\n\n    if (!hasPreferencesEditorContext) {\n        return children;\n    }\n\n    const handleOpenEditor = () => {\n        if (!setEditor) {\n            throw new Error(\n                'Configurable must be used inside a PreferencesEditorContextProvider'\n            );\n        }\n\n        // include the editorKey as key to force destroy and mount\n        // when switching between two identical editors with different editor keys\n        // otherwise the editor will see an update and its useStore will return one tick later\n        // which would forbid the usage of uncontrolled inputs in the editor\n        setEditor(\n            cloneElement(editor, {\n                preferenceKey: prefixedPreferenceKey,\n                key: prefixedPreferenceKey,\n            })\n        );\n        if (!setPreferenceKey) {\n            throw new Error(\n                'Configurable must be used inside a PreferencesEditorContextProvider'\n            );\n        }\n        // as we modify the editor, isEditorOpen cannot compare the editor element\n        // we'll compare the editor key instead\n        setPreferenceKey(prefixedPreferenceKey);\n    };\n\n    const handleShowButton = () => {\n        setIsCustomizeButtonVisible(true);\n    };\n\n    const handleHideButton = () => {\n        setIsCustomizeButtonVisible(false);\n    };\n\n    return (\n        <PreferenceKeyContextProvider value={prefixedPreferenceKey}>\n            <Root\n                className={clsx(\n                    ConfigurableClasses.root,\n                    isEnabled && ConfigurableClasses.editMode,\n                    isEditorOpen && ConfigurableClasses.editorActive\n                )}\n                sx={sx}\n                ref={wrapperRef}\n                onMouseEnter={isEnabled ? handleShowButton : undefined}\n                onMouseLeave={isEnabled ? handleHideButton : undefined}\n            >\n                {children}\n            </Root>\n            <Popover\n                open={!!isEnabled && (isCustomizeButtonVisible || isEditorOpen)}\n                sx={{\n                    pointerEvents: 'none',\n                    '& .MuiPaper-root': {\n                        pointerEvents: 'auto',\n                        borderRadius: 10,\n                        padding: '2px',\n                        lineHeight: 0,\n                        backgroundColor: 'warning.light',\n                        color: 'warning.contrastText',\n                        '&:hover': {\n                            cursor: 'pointer',\n                        },\n                    },\n                }}\n                anchorEl={wrapperRef.current}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right',\n                }}\n                transformOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                onClose={handleHideButton}\n                PaperProps={{\n                    elevation: 1,\n                    onMouseEnter: handleShowButton,\n                    onMouseLeave: handleHideButton,\n                    title: translate(openButtonLabel),\n                    onClick: handleOpenEditor,\n                }}\n                disableAutoFocus\n                disableRestoreFocus\n                disableEnforceFocus\n                disableScrollLock\n                marginThreshold={8}\n            >\n                <SettingsIcon\n                    // @ts-ignore\n                    fontSize=\"12px\"\n                />\n            </Popover>\n        </PreferenceKeyContextProvider>\n    );\n};\n\nexport interface ConfigurableProps {\n    children: ReactElement;\n    editor: ReactElement;\n    preferenceKey: string;\n    openButtonLabel?: string;\n    sx?: SxProps;\n}\n\nconst PREFIX = 'RaConfigurable';\n\nexport const ConfigurableClasses = {\n    root: `${PREFIX}-root`,\n    editMode: `${PREFIX}-editMode`,\n    editorActive: `${PREFIX}-editorActive`,\n};\n\nconst Root = styled('span', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    position: 'relative',\n    display: 'inline-block',\n    [`&.${ConfigurableClasses.editMode}`]: {\n        transition: theme.transitions.create('outline'),\n        outline: `${alpha(theme.palette.warning.main, 0.3)} solid 2px`,\n    },\n    [`&.${ConfigurableClasses.editMode}:hover `]: {\n        outline: `${alpha(theme.palette.warning.main, 0.5)} solid 2px`,\n    },\n    [`&.${ConfigurableClasses.editMode}.${ConfigurableClasses.editorActive} , &.${ConfigurableClasses.editMode}.${ConfigurableClasses.editorActive}:hover `]:\n        {\n            outline: `${theme.palette.warning.main} solid 2px`,\n        },\n}));\n", "import * as React from 'react';\nimport { FieldTitle, useResourceContext } from 'ra-core';\nimport { Switch, Typography } from '@mui/material';\nimport DragIcon from '@mui/icons-material/DragIndicator';\nimport { styled } from '@mui/material/styles';\n\n/**\n * UI to enable/disable a field\n */\nexport const FieldToggle = props => {\n    const { selected, label, onToggle, onMove, source, index } = props;\n    const resource = useResourceContext();\n    const dropIndex = React.useRef<number | null>(null);\n    const x = React.useRef<number | null>(null);\n    const y = React.useRef<number | null>(null);\n\n    const handleDocumentDragOver = React.useCallback(event => {\n        x.current = event.clientX;\n        y.current = event.clientY;\n    }, []);\n\n    const handleDragStart = () => {\n        document.addEventListener('dragover', handleDocumentDragOver);\n    };\n\n    const handleDrag = event => {\n        // imperative DOM manipulations using the native Drag API\n        const selectedItem = event.target;\n        selectedItem.classList.add('drag-active');\n        const list = selectedItem.closest('ul');\n        if (x.current == null || y.current == null) {\n            return;\n        }\n        const elementAtDragCoordinates = document.elementFromPoint(\n            x.current,\n            y.current\n        );\n        let dropItem =\n            elementAtDragCoordinates === null\n                ? selectedItem\n                : elementAtDragCoordinates.closest('li');\n\n        if (!dropItem) {\n            return;\n        }\n        if (dropItem.classList.contains('dragIcon')) {\n            dropItem = dropItem.parentNode;\n        }\n        if (dropItem === selectedItem) {\n            return;\n        }\n        if (list === dropItem.parentNode.closest('ul')) {\n            dropIndex.current = dropItem.dataset.index;\n            if (dropItem === selectedItem.nextSibling) {\n                dropItem = dropItem.nextSibling;\n            }\n            list.insertBefore(selectedItem, dropItem);\n        }\n    };\n\n    const handleDragEnd = event => {\n        const selectedItem = event.target as HTMLElement;\n        const list = selectedItem.closest('ul');\n\n        const elementFromPoint =\n            x.current != null && y.current != null\n                ? document.elementFromPoint(x.current, y.current)\n                : null;\n\n        let dropItem =\n            x.current == null || y.current == null || elementFromPoint === null\n                ? selectedItem\n                : elementFromPoint.closest('li');\n\n        if (y.current !== null && list && !dropItem) {\n            const closestUL = selectedItem.closest('ul');\n            if (\n                closestUL &&\n                y.current > closestUL.getBoundingClientRect().bottom\n            ) {\n                dropItem = list.lastChild as HTMLElement;\n            } else {\n                dropItem = list.firstChild as HTMLElement;\n            }\n        }\n\n        if (dropItem && list === dropItem.closest('ul')) {\n            onMove(selectedItem.dataset.index, dropIndex.current);\n        } else {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        selectedItem.classList.remove('drag-active');\n        document.removeEventListener('dragover', handleDocumentDragOver);\n    };\n\n    const handleDragOver = event => {\n        event.preventDefault();\n        event.dataTransfer.dropEffect = 'move';\n    };\n\n    return (\n        <Root\n            key={source}\n            draggable={onMove ? 'true' : undefined}\n            onDrag={onMove ? handleDrag : undefined}\n            onDragStart={onMove ? handleDragStart : undefined}\n            onDragEnd={onMove ? handleDragEnd : undefined}\n            onDragOver={onMove ? handleDragOver : undefined}\n            data-index={index}\n        >\n            <label htmlFor={`switch_${index}`}>\n                <Switch\n                    checked={selected}\n                    onChange={onToggle}\n                    name={index}\n                    id={`switch_${index}`}\n                    size=\"small\"\n                    sx={{ mr: 0.5, ml: -0.5 }}\n                />\n                <Typography variant=\"body2\" component=\"span\">\n                    <FieldTitle\n                        label={label}\n                        source={source}\n                        resource={resource}\n                    />\n                </Typography>\n            </label>\n            {onMove && (\n                <DragIcon\n                    className=\"dragIcon\"\n                    color=\"disabled\"\n                    fontSize=\"small\"\n                />\n            )}\n        </Root>\n    );\n};\n\nconst Root = styled('li', {\n    name: 'RaFieldToggle',\n    overridesResolver: (_props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    justifyContent: 'space-between',\n    paddingLeft: 0,\n    '& svg': {\n        cursor: 'move',\n    },\n    '&.drag-active': {\n        background: 'transparent',\n        color: 'transparent',\n        outline: `1px solid ${theme.palette.action.selected}`,\n        '& .MuiSwitch-root, & svg': {\n            visibility: 'hidden',\n        },\n    },\n}));\n", "import * as React from 'react';\nimport { usePreference, useTranslate } from 'ra-core';\nimport { Box, Button } from '@mui/material';\n\nimport { FieldToggle } from './FieldToggle';\n\n/**\n * UI to select / deselect fields, and store the selection in preferences\n */\nexport const FieldsSelector = ({\n    name = 'columns',\n    availableName = 'availableColumns',\n}) => {\n    const translate = useTranslate();\n\n    const [availableFields, setAvailableFields] = usePreference<\n        SelectableField[]\n    >(availableName, []);\n    const [omit] = usePreference<string[]>('omit', []);\n\n    const [fields, setFields] = usePreference(\n        name,\n        availableFields\n            .filter(field => !omit?.includes(field.source))\n            .map(field => field.index)\n    );\n\n    const handleToggle = event => {\n        if (event.target.checked) {\n            // add the column at the right position\n            setFields(\n                availableFields\n                    .filter(\n                        field =>\n                            field.index === event.target.name ||\n                            fields.includes(field.index)\n                    )\n                    .map(field => field.index)\n            );\n        } else {\n            setFields(fields.filter(index => index !== event.target.name));\n        }\n    };\n\n    const handleMove = (index1, index2) => {\n        const index1Pos = availableFields.findIndex(\n            // eslint-disable-next-line eqeqeq\n            field => field.index == index1\n        );\n        const index2Pos = availableFields.findIndex(\n            // eslint-disable-next-line eqeqeq\n            field => field.index == index2\n        );\n        if (index1Pos === -1 || index2Pos === -1) {\n            return;\n        }\n        let newAvailableFields;\n        if (index1Pos > index2Pos) {\n            newAvailableFields = [\n                ...availableFields.slice(0, index2Pos),\n                availableFields[index1Pos],\n                ...availableFields.slice(index2Pos, index1Pos),\n                ...availableFields.slice(index1Pos + 1),\n            ];\n        } else {\n            newAvailableFields = [\n                ...availableFields.slice(0, index1Pos),\n                ...availableFields.slice(index1Pos + 1, index2Pos + 1),\n                availableFields[index1Pos],\n                ...availableFields.slice(index2Pos + 1),\n            ];\n        }\n        setAvailableFields(newAvailableFields);\n        setFields(fields =>\n            newAvailableFields\n                .filter(field => fields.includes(field.index))\n                .map(field => field.index)\n        );\n    };\n\n    const handleHideAll = () => {\n        setFields([]);\n    };\n    const handleShowAll = () => {\n        setFields(availableFields.map(field => field.index));\n    };\n\n    return (\n        <Box pt={0.5}>\n            <Box component=\"ul\" sx={{ paddingInlineStart: 0, m: 0 }}>\n                {availableFields.map(field => (\n                    <FieldToggle\n                        key={field.index}\n                        source={field.source}\n                        label={field.label}\n                        index={field.index}\n                        selected={fields.includes(field.index)}\n                        onToggle={handleToggle}\n                        onMove={handleMove}\n                    />\n                ))}\n            </Box>\n            <Box\n                onDrop={e => e.preventDefault()}\n                display=\"flex\"\n                justifyContent=\"space-between\"\n                mx={-0.5}\n                mt={1}\n            >\n                <Button size=\"small\" onClick={handleHideAll}>\n                    {translate('ra.inspector.hideAll', {\n                        _: 'Hide All',\n                    })}\n                </Button>\n                <Button size=\"small\" onClick={handleShowAll}>\n                    {translate('ra.inspector.showAll', {\n                        _: 'Show All',\n                    })}\n                </Button>\n            </Box>\n        </Box>\n    );\n};\n\nexport interface SelectableField {\n    index: string;\n    source: string;\n    label?: string;\n}\n", "import * as React from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport {\n    useStore,\n    usePreferencesEditor,\n    useTranslate,\n    useRemoveItemsFromStore,\n    PreferenceKeyContextProvider,\n} from 'ra-core';\nimport { Paper, Typography, IconButton } from '@mui/material';\nimport CloseIcon from '@mui/icons-material/CancelOutlined';\nimport DeleteIcon from '@mui/icons-material/DeleteOutline';\nimport { useTheme, styled } from '@mui/material/styles';\n\nimport { InspectorRoot } from './InspectorRoot';\n\nexport const Inspector = () => {\n    const { isEnabled, disable, title, titleOptions, editor, preferenceKey } =\n        usePreferencesEditor();\n\n    const isDragging = useRef(false);\n    const removeItems = useRemoveItemsFromStore(preferenceKey);\n    const theme = useTheme();\n    const translate = useTranslate();\n    const [version, setVersion] = useState(0);\n\n    const [dialogPosition, setDialogPosition] = useStore(\n        'ra.inspector.position',\n        {\n            x:\n                // We want it positioned to the far right of the screen\n                document?.body.clientWidth -\n                // So we remove its size (see the root css class)\n                theme.breakpoints.values.sm / 2 -\n                // And add a margin\n                8,\n            y: 8,\n        }\n    );\n\n    // poor man's drag and drop\n    // store click position relative to the dialog position\n    const [clickPosition, setClickPosition] = useState<\n        { x: number; y: number } | undefined\n    >();\n    const handleDragStart = e => {\n        // exit if the user drags on anything but the title\n        const draggedElement = document?.elementFromPoint(e.clientX, e.clientY);\n        if (draggedElement?.id !== 'inspector-dialog-title') {\n            return;\n        }\n        isDragging.current = true;\n        e.dataTransfer.effectAllowed = 'move';\n        e.dataTransfer.setData('inspector', '');\n        setTimeout(() => {\n            e.target.classList.add('hide');\n        }, 0);\n        setClickPosition({\n            x: e.clientX - dialogPosition.x,\n            y: e.clientY - dialogPosition.y,\n        });\n    };\n    const handleDragEnd = e => {\n        if (isDragging.current && clickPosition) {\n            setDialogPosition({\n                x: e.clientX - clickPosition.x,\n                y: e.clientY - clickPosition.y,\n            });\n            e.target.classList.remove('hide');\n            isDragging.current = false;\n        }\n    };\n\n    // prevent \"back to base\" animation when the inspector is dropped\n    useEffect(() => {\n        if (!isEnabled) return;\n        const handleDragover = e => {\n            if (e.dataTransfer.types.includes('inspector')) {\n                e.preventDefault();\n            }\n        };\n        document?.addEventListener('dragover', handleDragover);\n        return () => {\n            document?.removeEventListener('dragover', handleDragover);\n        };\n    }, [isEnabled]);\n\n    // make sure that the dialog is always visible, as the stored position may be outside the screen\n    useEffect(() => {\n        if (!isEnabled) return;\n        const moveInspectorIfOutsideScreen = () => {\n            window?.requestAnimationFrame(() => {\n                setDialogPosition(position => ({\n                    x: Math.min(\n                        position.x,\n                        document?.body.clientWidth -\n                            theme.breakpoints.values.sm / 2 -\n                            8\n                    ),\n                    y: Math.min(position.y, window?.innerHeight - 50),\n                }));\n            });\n        };\n        moveInspectorIfOutsideScreen();\n        window?.addEventListener('resize', moveInspectorIfOutsideScreen);\n        return () => {\n            window?.removeEventListener('resize', moveInspectorIfOutsideScreen);\n        };\n    }, [isEnabled, setDialogPosition, theme.breakpoints.values.sm]);\n\n    const handleReset = () => {\n        removeItems();\n        // force redraw of the form to use the default values\n        setVersion(version => version + 1);\n    };\n\n    if (!isEnabled) return null;\n    return (\n        <StyledPaper\n            className={InspectorClasses.modal}\n            elevation={3}\n            draggable\n            onDragStart={handleDragStart}\n            onDragEnd={handleDragEnd}\n            sx={{ left: dialogPosition.x, top: dialogPosition.y }}\n        >\n            <div className={InspectorClasses.title}>\n                <Typography\n                    id=\"inspector-dialog-title\"\n                    variant=\"overline\"\n                    component=\"div\"\n                    py={1}\n                    px={2}\n                    flex=\"1\"\n                >\n                    {title && translate(title, titleOptions)}\n                </Typography>\n                <span id=\"inspector-toolbar\" />\n                {preferenceKey && (\n                    <IconButton\n                        aria-label={translate('ra.action.remove')}\n                        onClick={handleReset}\n                        size=\"small\"\n                    >\n                        <DeleteIcon fontSize=\"inherit\" />\n                    </IconButton>\n                )}\n                <IconButton\n                    aria-label={translate('ra.action.close')}\n                    onClick={disable}\n                    size=\"small\"\n                    sx={{ mr: 1 }}\n                >\n                    <CloseIcon fontSize=\"inherit\" />\n                </IconButton>\n            </div>\n            <div className={InspectorClasses.content} key={version}>\n                <PreferenceKeyContextProvider value={preferenceKey}>\n                    {editor || <InspectorRoot />}\n                </PreferenceKeyContextProvider>\n            </div>\n        </StyledPaper>\n    );\n};\n\nconst PREFIX = 'RaInspector';\n\nexport const InspectorClasses = {\n    modal: `${PREFIX}-modal`,\n    title: `${PREFIX}-title`,\n    content: `${PREFIX}-content`,\n};\n\nconst StyledPaper = styled(Paper, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    position: 'fixed',\n    zIndex: theme.zIndex.modal + 1,\n    width: theme.breakpoints.values.sm / 2,\n    transition: theme.transitions.create(['height', 'width']),\n    '&.hide': {\n        display: 'none',\n    },\n    [`& .${InspectorClasses.title}`]: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        cursor: 'move',\n    },\n    [`& .${InspectorClasses.content}`]: {\n        overflowY: 'auto',\n        maxHeight: '75vh',\n        padding: theme.spacing(2),\n        paddingTop: 0,\n    },\n}));\n\nInspector.displayName = 'Inspector';\n", "import * as React from 'react';\nimport { Typography } from '@mui/material';\nimport { useTranslate, useSetInspectorTitle } from 'ra-core';\n\nexport const InspectorRoot = () => {\n    const translate = useTranslate();\n    useSetInspectorTitle('ra.configurable.inspector.title', {\n        _: 'Inspector',\n    });\n\n    return (\n        <Typography>\n            {translate('ra.configurable.inspector.content', {\n                _: 'Hover the application UI elements to configure them',\n            })}\n        </Typography>\n    );\n};\n", "import * as React from 'react';\nimport { MouseEventHandler } from 'react';\nimport { IconButton, IconButtonProps, Tooltip } from '@mui/material';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport { useTranslate, usePreferencesEditor } from 'ra-core';\n\nexport const InspectorButton = React.forwardRef<\n    HTMLButtonElement,\n    Omit<\n        IconButtonProps,\n        'placeholder' | 'onPointerEnterCapture' | 'onPointerLeaveCapture'\n    > & { label?: string; SvgIconProps?: any }\n>(\n    (\n        {\n            label = 'ra.configurable.configureMode',\n            SvgIconProps = {},\n            ...props\n        },\n        ref\n    ) => {\n        const { enable, disable, setPreferenceKey, isEnabled } =\n            usePreferencesEditor();\n        const translate = useTranslate();\n\n        const handleClick: MouseEventHandler<HTMLButtonElement> = () => {\n            if (isEnabled) {\n                disable();\n                setPreferenceKey(null);\n            } else {\n                enable();\n            }\n        };\n\n        const translatedLabel = translate(label, { _: 'Configure mode' });\n\n        return (\n            <Tooltip title={translatedLabel}>\n                <IconButton\n                    aria-label={translatedLabel}\n                    onClick={handleClick}\n                    color=\"inherit\"\n                    ref={ref}\n                    {...props}\n                >\n                    <SettingsIcon fontSize=\"inherit\" {...SvgIconProps} />\n                </IconButton>\n            </Tooltip>\n        );\n    }\n);\n", "import * as React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport {\n    usePreferenceInput,\n    usePreference,\n    useRecordContext,\n    useTranslate,\n} from 'ra-core';\nimport { TextField } from '@mui/material';\n\nimport { Configurable } from '../preferences';\nimport { PageTitle } from './PageTitle';\n\nexport const PageTitleEditor = () => {\n    const field = usePreferenceInput('', '');\n    return (\n        <form>\n            <TextField\n                label=\"title\"\n                variant=\"filled\"\n                size=\"small\"\n                fullWidth\n                sx={{ mb: 1 }}\n                {...field}\n            />\n        </form>\n    );\n};\n\nexport const PageTitleConfigurable = ({\n    preferenceKey,\n    title,\n    defaultTitle,\n    ...props\n}) => {\n    const { pathname } = useLocation();\n    return (\n        <Configurable\n            editor={<PageTitleEditor />}\n            preferenceKey={preferenceKey || `${pathname}.title`}\n            sx={{\n                '&.RaConfigurable-editMode': {\n                    margin: '2px',\n                },\n            }}\n        >\n            <PageTitleConfigurableInner\n                title={title}\n                defaultTitle={defaultTitle}\n                {...props}\n            />\n        </Configurable>\n    );\n};\n\nconst PageTitleConfigurableInner = ({ title, defaultTitle, ...props }) => {\n    const [titleFromPreferences] = usePreference();\n    const translate = useTranslate();\n    const record = useRecordContext();\n\n    return titleFromPreferences ? (\n        <span className={props.className} {...props}>\n            {translate(titleFromPreferences, {\n                ...record,\n                _: titleFromPreferences,\n            })}\n        </span>\n    ) : (\n        <>\n            <PageTitle title={title} defaultTitle={defaultTitle} {...props} />\n        </>\n    );\n};\n", "import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactNode } from 'react';\nimport CardContent from '@mui/material/CardContent';\n\n/**\n * Overrides Material UI CardContent to allow inner content\n *\n * When using several CardContent inside the same Card, the top and bottom\n * padding double the spacing between each CardContent, leading to too much\n * wasted space. Use this component as a CardContent alternative.\n */\nexport const CardContentInner = (props: CardContentInnerProps): JSX.Element => {\n    const { className, children } = props;\n\n    return <Root className={className}>{children}</Root>;\n};\n\nexport interface CardContentInnerProps {\n    className?: string;\n    children: ReactNode;\n}\n\nconst PREFIX = 'RaCardContentInner';\n\nexport const CardContentInnerClasses = {\n    root: `${PREFIX}-root`,\n};\n\nconst Root = styled(CardContent, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    paddingTop: 0,\n    paddingBottom: 0,\n    '&:first-of-type': {\n        paddingTop: 16,\n    },\n    '&:last-child': {\n        paddingBottom: 16,\n        [theme.breakpoints.only('xs')]: {\n            paddingBottom: 70,\n        },\n    },\n}));\n", "import * as React from 'react';\nimport { ReactElement } from 'react';\nimport {\n    useNotify,\n    UseCheckForApplicationUpdateOptions,\n    useCheckForApplicationUpdate,\n} from 'ra-core';\nimport { ApplicationUpdatedNotification } from './ApplicationUpdatedNotification';\n\n/**\n * Display a notification asking users to reload the page when the application code has changed.\n *\n * @param {CheckForApplicationUpdateProps} props\n * @param {boolean} options.disabled Optional. Whether the check should be disabled. Defaults to false.\n * @param {string|ReactElement} props.notification The notification to display to the user. Displayed only if `updateMode` is manual. Defaults to `<ApplicationUpdatedNotification />`.\n * @param {string} options.url Optional. The URL to download to check for code update. Defaults to the current URL.\n * @param {RequestInit} options.fetchOptions Optional. The options passed to fetch function when checking for update.\n * @param {number} options.interval Optional. The interval in milliseconds between two checks. Defaults to 3600000 (1 hour).\n *\n * @example <caption>Basic usage</caption>\n * import { Admin, Resource, Layout, CheckForApplicationUpdate, ListGuesser } from 'react-admin';\n *\n * const MyLayout = ({ children }) => (\n *   <Layout>\n *     {children}\n *     <CheckForApplicationUpdate />\n *   </Layout>\n * );\n *\n * const App = () => (\n *   <Admin layout={MyLayout}>\n *      <Resource name=\"posts\" list={ListGuesser} />\n *   </Admin>\n * );\n *\n * @example <caption>Custom notification</caption>\n * import { forwardRef } from 'react';\n * import { Admin, Resource, Layout, CheckForApplicationUpdate, ListGuesser } from 'react-admin';\n *\n * const CustomAppUpdatedNotification = forwardRef((props, ref) => (\n *   <Alert\n *     ref={ref}\n *     severity=\"info\"\n *     action={\n *       <Button\n *         color=\"inherit\"\n *         size=\"small\"\n *         onClick={() => window.location.reload()}\n *       >\n *         Update\n *       </Button>\n *     }\n *   >\n *     A new version of the application is available. Please update.\n *   </Alert>\n * ));\n *\n * const MyLayout = ({ children }) => (\n *   <Layout>\n *     {children}\n *     <CheckForApplicationUpdate notification={<CustomAppUpdatedNotification />} />\n *   </Layout>\n * );\n *\n * const App = () => (\n *   <Admin layout={MyLayout}>\n *      <Resource name=\"posts\" list={ListGuesser} />\n *   </Admin>\n * );\n */\nexport const CheckForApplicationUpdate = (\n    props: CheckForApplicationUpdateProps\n) => {\n    const { notification = DEFAULT_NOTIFICATION, ...rest } = props;\n    const notify = useNotify();\n\n    const onNewVersionAvailable = () => {\n        notify(notification, {\n            type: 'info',\n            autoHideDuration: null,\n        });\n    };\n\n    useCheckForApplicationUpdate({ onNewVersionAvailable, ...rest });\n    return null;\n};\n\nexport interface CheckForApplicationUpdateProps\n    extends Omit<UseCheckForApplicationUpdateOptions, 'onNewVersionAvailable'> {\n    onNewVersionAvailable?: UseCheckForApplicationUpdateOptions['onNewVersionAvailable'];\n    notification?: ReactElement;\n}\n\nconst DEFAULT_NOTIFICATION = <ApplicationUpdatedNotification />;\n", "import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useCallback, MouseEventHandler, ComponentType } from 'react';\nimport Dialog, { DialogProps } from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Button from '@mui/material/Button';\nimport { alpha } from '@mui/material/styles';\nimport ActionCheck from '@mui/icons-material/CheckCircle';\nimport AlertError from '@mui/icons-material/ErrorOutline';\nimport clsx from 'clsx';\nimport { useTranslate } from 'ra-core';\n\n/**\n * Confirmation dialog\n *\n * @example\n * <Confirm\n *     isOpen={true}\n *     title=\"Delete Item\"\n *     content=\"Are you sure you want to delete this item?\"\n *     confirm=\"Yes\"\n *     confirmColor=\"primary\"\n *     ConfirmIcon=ActionCheck\n *     CancelIcon=AlertError\n *     cancel=\"Cancel\"\n *     onConfirm={() => { // do something }}\n *     onClose={() => { // do something }}\n * />\n */\nexport const Confirm = (props: ConfirmProps) => {\n    const {\n        className,\n        isOpen = false,\n        loading,\n        title,\n        content,\n        cancel = 'ra.action.cancel',\n        confirm = 'ra.action.confirm',\n        confirmColor = 'primary',\n        ConfirmIcon = ActionCheck,\n        CancelIcon = AlertError,\n        onClose,\n        onConfirm,\n        translateOptions = {},\n        ...rest\n    } = props;\n\n    const translate = useTranslate();\n\n    const handleConfirm = useCallback(\n        e => {\n            e.stopPropagation();\n            onConfirm(e);\n        },\n        [onConfirm]\n    );\n\n    const handleClick = useCallback(e => {\n        e.stopPropagation();\n    }, []);\n\n    return (\n        <StyledDialog\n            className={className}\n            open={isOpen}\n            onClose={onClose}\n            onClick={handleClick}\n            aria-labelledby=\"alert-dialog-title\"\n            {...rest}\n        >\n            <DialogTitle id=\"alert-dialog-title\">\n                {typeof title === 'string'\n                    ? translate(title, { _: title, ...translateOptions })\n                    : title}\n            </DialogTitle>\n            <DialogContent>\n                {typeof content === 'string' ? (\n                    <DialogContentText>\n                        {translate(content, {\n                            _: content,\n                            ...translateOptions,\n                        })}\n                    </DialogContentText>\n                ) : (\n                    content\n                )}\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    disabled={loading}\n                    onClick={onClose}\n                    startIcon={<CancelIcon />}\n                >\n                    {translate(cancel, { _: cancel })}\n                </Button>\n                <Button\n                    disabled={loading}\n                    onClick={handleConfirm}\n                    className={clsx('ra-confirm', {\n                        [ConfirmClasses.confirmWarning]:\n                            confirmColor === 'warning',\n                        [ConfirmClasses.confirmPrimary]:\n                            confirmColor === 'primary',\n                    })}\n                    autoFocus\n                    startIcon={<ConfirmIcon />}\n                >\n                    {translate(confirm, { _: confirm })}\n                </Button>\n            </DialogActions>\n        </StyledDialog>\n    );\n};\n\nexport interface ConfirmProps\n    extends Omit<DialogProps, 'open' | 'onClose' | 'title' | 'content'> {\n    cancel?: string;\n    className?: string;\n    confirm?: string;\n    confirmColor?: 'primary' | 'warning';\n    ConfirmIcon?: ComponentType;\n    CancelIcon?: ComponentType;\n    content: React.ReactNode;\n    isOpen?: boolean;\n    loading?: boolean;\n    onClose: MouseEventHandler;\n    onConfirm: MouseEventHandler;\n    title: React.ReactNode;\n    translateOptions?: object;\n}\n\nconst PREFIX = 'RaConfirm';\n\nexport const ConfirmClasses = {\n    confirmPrimary: `${PREFIX}-confirmPrimary`,\n    confirmWarning: `${PREFIX}-confirmWarning`,\n};\n\nconst StyledDialog = styled(Dialog, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${ConfirmClasses.confirmPrimary}`]: {\n        color: theme.palette.primary.main,\n    },\n\n    [`& .${ConfirmClasses.confirmWarning}`]: {\n        color: theme.palette.error.main,\n        '&:hover': {\n            backgroundColor: alpha(theme.palette.error.main, 0.12),\n            // Reset on mouse devices\n            '@media (hover: none)': {\n                backgroundColor: 'transparent',\n            },\n        },\n    },\n}));\n", "import React from 'react';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport { To } from 'react-router';\nimport { useBasename } from 'ra-core';\n\nimport { MenuItemLink, MenuItemLinkProps } from './MenuItemLink';\n\nexport const DashboardMenuItem = (props: DashboardMenuItemProps) => {\n    const basename = useBasename();\n    const {\n        leftIcon = <DashboardIcon />,\n        to = `${basename}/`,\n        primaryText = 'ra.page.dashboard',\n        ...rest\n    } = props;\n\n    return (\n        <MenuItemLink\n            leftIcon={leftIcon}\n            to={to}\n            primaryText={primaryText}\n            {...rest}\n        />\n    );\n};\n\nexport interface DashboardMenuItemProps extends Omit<MenuItemLinkProps, 'to'> {\n    to?: To;\n    /**\n     * @deprecated\n     */\n    sidebarIsOpen?: boolean;\n}\n", "import React, { forwardRef, useCallback, ReactElement, ReactNode } from 'react';\nimport { styled } from '@mui/material/styles';\nimport clsx from 'clsx';\nimport { Link, LinkProps, useMatch } from 'react-router-dom';\nimport {\n    MenuItem,\n    MenuItemProps,\n    ListItemIcon,\n    Tooltip,\n    TooltipProps,\n    useMediaQuery,\n    Theme,\n} from '@mui/material';\n\nimport { useSidebarState } from './useSidebarState';\nimport { useTranslate, useBasename } from 'ra-core';\n\n/**\n * Displays a menu item with a label and an icon - or only the icon with a tooltip when the sidebar is minimized.\n * It also handles the automatic closing of the menu on tap on mobile.\n *\n * @typedef {Object} Props the props you can use\n * @prop {string|Location} to The menu item's target. It is passed to a React Router NavLink component.\n * @prop {string|ReactNode} primaryText The menu content, displayed when the menu isn't minimized. |\n * @prop {ReactNode} leftIcon The menu icon\n *\n * Additional props are passed down to the underling Material UI <MenuItem> component\n * @see https://material-ui.com/api/menu-item/#menuitem-api\n *\n * @example // You can create a custom menu component using the <DashboardMenuItem> and <MenuItemLink> components:\n *\n * // in src/Menu.js\n * import * as React from 'react';\n * import { DashboardMenuItem, MenuItemLink } from 'react-admin';\n * import BookIcon from '@mui/icons-material/Book';\n * import ChatBubbleIcon from '@mui/icons-material/ChatBubble';\n * import PeopleIcon from '@mui/icons-material/People';\n * import LabelIcon from '@mui/icons-material/Label';\n *\n * export const Menu = () => (\n *     <div>\n *         <DashboardMenuItem />\n *         <MenuItemLink to=\"/posts\" primaryText=\"Posts\" leftIcon={<BookIcon />}/>\n *         <MenuItemLink to=\"/comments\" primaryText=\"Comments\" leftIcon={<ChatBubbleIcon />}/>\n *         <MenuItemLink to=\"/users\" primaryText=\"Users\" leftIcon={<PeopleIcon />}/>\n *         <MenuItemLink to=\"/custom-route\" primaryText=\"Miscellaneous\" leftIcon={<LabelIcon />}/>\n *     </div>\n * );\n *\n * // to use this custom menu component, pass it to a custom Layout:\n * // in src/Layout.js\n * import { Layout } from 'react-admin';\n * import { Menu } from './Menu';\n *\n * export const Layout = ({ children }) => (\n *     <Layout menu={Menu}>\n *         {children}\n *     </Layout>\n * );\n *\n * // then, use this layout in the <Admin layout> prop:\n * // in src/App.js\n * import { Layout }  from './Layout';\n *\n * const App = () => (\n *     <Admin layout={Layout} dataProvider={simpleRestProvider('http://path.to.my.api')}>\n *         // ...\n *     </Admin>\n * );\n */\nexport const MenuItemLink = forwardRef<any, MenuItemLinkProps>((props, ref) => {\n    const {\n        className,\n        primaryText,\n        leftIcon,\n        onClick,\n        sidebarIsOpen,\n        tooltipProps,\n        children,\n        ...rest\n    } = props;\n\n    const isSmall = useMediaQuery<Theme>(theme => theme.breakpoints.down('md'));\n    const translate = useTranslate();\n    const basename = useBasename();\n\n    const [open, setOpen] = useSidebarState();\n    const handleMenuTap = useCallback(\n        e => {\n            if (isSmall) {\n                setOpen(false);\n            }\n            onClick && onClick(e);\n        },\n        [setOpen, isSmall, onClick]\n    );\n\n    const to =\n        (typeof props.to === 'string' ? props.to : props.to.pathname) || '';\n    const match = useMatch({ path: to, end: to === `${basename}/` });\n\n    const renderMenuItem = () => {\n        return (\n            <StyledMenuItem\n                className={clsx(className, {\n                    [MenuItemLinkClasses.active]: !!match,\n                })}\n                // @ts-ignore\n                component={LinkRef}\n                ref={ref}\n                tabIndex={0}\n                {...rest}\n                onClick={handleMenuTap}\n            >\n                {leftIcon && (\n                    <ListItemIcon className={MenuItemLinkClasses.icon}>\n                        {leftIcon}\n                    </ListItemIcon>\n                )}\n                {children\n                    ? children\n                    : typeof primaryText === 'string'\n                      ? translate(primaryText, { _: primaryText })\n                      : primaryText}\n            </StyledMenuItem>\n        );\n    };\n\n    return open ? (\n        renderMenuItem()\n    ) : (\n        <Tooltip\n            title={\n                typeof primaryText === 'string'\n                    ? translate(primaryText, { _: primaryText })\n                    : primaryText\n            }\n            placement=\"right\"\n            {...tooltipProps}\n        >\n            {renderMenuItem()}\n        </Tooltip>\n    );\n});\n\nexport type MenuItemLinkProps = Omit<\n    LinkProps & MenuItemProps<'li'>,\n    'placeholder' | 'onPointerEnterCapture' | 'onPointerLeaveCapture'\n> & {\n    leftIcon?: ReactElement;\n    primaryText?: ReactNode;\n    /**\n     * @deprecated\n     */\n    sidebarIsOpen?: boolean;\n    tooltipProps?: TooltipProps;\n};\n\nconst PREFIX = 'RaMenuItemLink';\n\nexport const MenuItemLinkClasses = {\n    active: `${PREFIX}-active`,\n    icon: `${PREFIX}-icon`,\n};\n\nconst StyledMenuItem = styled(MenuItem, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.text.secondary,\n\n    [`&.${MenuItemLinkClasses.active}`]: {\n        color: theme.palette.text.primary,\n    },\n\n    [`& .${MenuItemLinkClasses.icon}`]: { minWidth: theme.spacing(5) },\n}));\n\nconst LinkRef = forwardRef<HTMLAnchorElement, LinkProps>((props, ref) => (\n    <Link ref={ref} {...props} />\n));\n", "import * as React from 'react';\nimport mediaQuery from 'css-mediaquery';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nfunction createMatchMedia(width) {\n    return query => ({\n        matches: mediaQuery.match(query, {\n            width,\n        }),\n        addListener: () => {},\n        removeListener: () => {},\n    });\n}\n\n/**\n * Test utility to simulate a device form factor for server-side mediaQueries\n *\n * Do not use inside a browser.\n *\n * @example\n *\n * <DeviceTestWrapper width=\"sm\">\n *     <MyResponsiveComponent />\n * <DeviceTestWrapper>\n */\nexport const DeviceTestWrapper = ({\n    width = 'md',\n    children,\n}: DeviceTestWrapperProps): JSX.Element => {\n    const theme = createTheme();\n    // Use https://github.com/ericf/css-mediaquery as polyfill.\n    const ssrMatchMedia = createMatchMedia(theme.breakpoints.values[width]);\n\n    return (\n        <ThemeProvider\n            theme={{\n                ...theme,\n                components: {\n                    MuiUseMediaQuery: {\n                        defaultProps: {\n                            ssrMatchMedia,\n                            matchMedia: ssrMatchMedia,\n                        },\n                    },\n                },\n            }}\n        >\n            {children}\n        </ThemeProvider>\n    );\n};\n\nexport interface DeviceTestWrapperProps {\n    width: 'md' | 'xs' | 'sm' | 'lg' | 'xl';\n    children: JSX.Element;\n}\n", "import * as React from 'react';\nimport { ComponentType, ErrorInfo, Fragment, HtmlHTMLAttributes } from 'react';\nimport { FallbackProps } from 'react-error-boundary';\nimport { styled } from '@mui/material/styles';\nimport {\n    Button,\n    Accordion,\n    AccordionDetails,\n    AccordionSummary,\n    Typography,\n} from '@mui/material';\nimport ErrorIcon from '@mui/icons-material/Report';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport History from '@mui/icons-material/History';\nimport {\n    useTranslate,\n    useDefaultTitle,\n    useResetErrorBoundaryOnLocationChange,\n} from 'ra-core';\nimport type { TitleComponent } from 'ra-core';\n\nimport { Title } from './Title';\n\nexport const Error = (\n    props: InternalErrorProps & {\n        errorComponent?: ComponentType<ErrorProps>;\n    }\n) => {\n    const {\n        error,\n        errorComponent: ErrorComponent,\n        errorInfo,\n        resetErrorBoundary,\n        className,\n        ...rest\n    } = props;\n\n    const translate = useTranslate();\n    const title = useDefaultTitle();\n    useResetErrorBoundaryOnLocationChange(resetErrorBoundary);\n\n    if (ErrorComponent) {\n        return (\n            <ErrorComponent error={error} errorInfo={errorInfo} title={title} />\n        );\n    }\n\n    return (\n        <Fragment>\n            {title && <Title title={title} />}\n            <Root className={className} {...rest}>\n                <h1 className={ErrorClasses.title} role=\"alert\">\n                    <ErrorIcon className={ErrorClasses.icon} />\n                    {translate('ra.page.error')}\n                </h1>\n                <div>{translate('ra.message.error')}</div>\n                {process.env.NODE_ENV !== 'production' && (\n                    <>\n                        <Accordion className={ErrorClasses.panel}>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                className={ErrorClasses.panelSumary}\n                            >\n                                {translate(error.message, {\n                                    _: error.message,\n                                })}\n                            </AccordionSummary>\n                            <AccordionDetails\n                                className={ErrorClasses.panelDetails}\n                            >\n                                {/*\n                                    error message is repeated here to allow users to copy it. AccordionSummary doesn't support text selection.\n                                */}\n                                <p>\n                                    {translate(error.message, {\n                                        _: error.message,\n                                    })}\n                                </p>\n                                <p>{errorInfo?.componentStack}</p>\n                            </AccordionDetails>\n                        </Accordion>\n\n                        <div className={ErrorClasses.advice}>\n                            <Typography align=\"center\">\n                                Need help with this error? Try the following:\n                            </Typography>\n                            <Typography component=\"div\">\n                                <ul>\n                                    <li>\n                                        Check the{' '}\n                                        <a href=\"https://marmelab.com/react-admin/documentation.html\">\n                                            react-admin documentation\n                                        </a>\n                                    </li>\n                                    <li>\n                                        Search on{' '}\n                                        <a href=\"https://stackoverflow.com/questions/tagged/react-admin\">\n                                            StackOverflow\n                                        </a>{' '}\n                                        for community answers\n                                    </li>\n                                    <li>\n                                        Get help from the core team via{' '}\n                                        <a href=\"https://react-admin-ee.marmelab.com/#fromsww\">\n                                            react-admin Enterprise Edition\n                                        </a>\n                                    </li>\n                                </ul>\n                            </Typography>\n                        </div>\n                    </>\n                )}\n                <div className={ErrorClasses.toolbar}>\n                    <Button\n                        variant=\"contained\"\n                        startIcon={<History />}\n                        onClick={goBack}\n                    >\n                        {translate('ra.action.back')}\n                    </Button>\n                </div>\n            </Root>\n        </Fragment>\n    );\n};\n\ninterface InternalErrorProps\n    extends Omit<HtmlHTMLAttributes<HTMLDivElement>, 'title'>,\n        FallbackProps {\n    className?: string;\n    errorInfo?: ErrorInfo;\n}\n\nexport interface ErrorProps extends Pick<FallbackProps, 'error'> {\n    errorInfo?: ErrorInfo;\n    title?: TitleComponent;\n}\n\nconst PREFIX = 'RaError';\n\nexport const ErrorClasses = {\n    container: `${PREFIX}-container`,\n    title: `${PREFIX}-title`,\n    icon: `${PREFIX}-icon`,\n    panel: `${PREFIX}-panel`,\n    panelSumary: `${PREFIX}-panelSumary`,\n    panelDetails: `${PREFIX}-panelDetails`,\n    toolbar: `${PREFIX}-toolbar`,\n    advice: `${PREFIX}-advice`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    [theme.breakpoints.down('md')]: {\n        padding: '1em',\n    },\n    fontFamily: 'Roboto, sans-serif',\n    opacity: 0.5,\n\n    [`& .${ErrorClasses.title}`]: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n\n    [`& .${ErrorClasses.icon}`]: {\n        width: '2em',\n        height: '2em',\n        marginRight: '0.5em',\n    },\n\n    [`& .${ErrorClasses.panel}`]: {\n        marginTop: '1em',\n        maxWidth: '60em',\n    },\n\n    [`& .${ErrorClasses.panelSumary}`]: {\n        userSelect: 'all',\n    },\n\n    [`& .${ErrorClasses.panelDetails}`]: {\n        whiteSpace: 'pre-wrap',\n    },\n\n    [`& .${ErrorClasses.toolbar}`]: {\n        marginTop: '2em',\n    },\n\n    [`& .${ErrorClasses.advice}`]: {\n        marginTop: '2em',\n    },\n}));\n\nfunction goBack() {\n    window.history.go(-1);\n}\n", "import React, { ComponentType, ErrorInfo, Suspense, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport clsx from 'clsx';\nimport { styled, SxProps } from '@mui/material/styles';\n\nimport { AppBar as DefaultAppBar, AppBarProps } from './AppBar';\nimport { Sidebar as DefaultSidebar, SidebarProps } from './Sidebar';\nimport { Menu as DefaultMenu, MenuProps } from './Menu';\nimport { Error, ErrorProps } from './Error';\nimport { SkipNavigationButton } from '../button';\nimport { Inspector } from '../preferences';\nimport { Loading } from './Loading';\n\nexport const Layout = (props: LayoutProps) => {\n    const {\n        appBar: AppBar = DefaultAppBar,\n        appBarAlwaysOn,\n        children,\n        className,\n        error: errorComponent,\n        menu: Menu = DefaultMenu,\n        sidebar: Sidebar = DefaultSidebar,\n        ...rest\n    } = props;\n\n    const [errorInfo, setErrorInfo] = useState<ErrorInfo | undefined>(\n        undefined\n    );\n\n    const handleError = (error: Error, info: ErrorInfo) => {\n        setErrorInfo(info);\n    };\n\n    return (\n        <Core className={clsx('layout', className)} {...rest}>\n            <SkipNavigationButton />\n            <div className={LayoutClasses.appFrame}>\n                <AppBar alwaysOn={appBarAlwaysOn} />\n                <main className={LayoutClasses.contentWithSidebar}>\n                    <Sidebar appBarAlwaysOn={appBarAlwaysOn}>\n                        <Menu />\n                    </Sidebar>\n                    <div id=\"main-content\" className={LayoutClasses.content}>\n                        <ErrorBoundary\n                            onError={handleError}\n                            fallbackRender={({ error, resetErrorBoundary }) => (\n                                <Error\n                                    error={error}\n                                    errorComponent={errorComponent}\n                                    errorInfo={errorInfo}\n                                    resetErrorBoundary={resetErrorBoundary}\n                                />\n                            )}\n                        >\n                            <Suspense fallback={<Loading />}>\n                                {children}\n                            </Suspense>\n                        </ErrorBoundary>\n                    </div>\n                </main>\n                <Inspector />\n            </div>\n        </Core>\n    );\n};\n\nexport interface LayoutProps {\n    appBar?: ComponentType<AppBarProps>;\n    appBarAlwaysOn?: boolean;\n    className?: string;\n    children: React.ReactNode;\n    error?: ComponentType<ErrorProps>;\n    menu?: ComponentType<MenuProps>;\n    sidebar?: ComponentType<SidebarProps>;\n    sx?: SxProps;\n}\n\nexport interface LayoutState {\n    hasError: boolean;\n    error?: Error;\n    errorInfo?: ErrorInfo;\n}\n\nconst PREFIX = 'RaLayout';\nexport const LayoutClasses = {\n    appFrame: `${PREFIX}-appFrame`,\n    contentWithSidebar: `${PREFIX}-contentWithSidebar`,\n    content: `${PREFIX}-content`,\n};\n\nconst Core = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    flexDirection: 'column',\n    zIndex: 1,\n    minHeight: '100vh',\n    backgroundColor: theme.palette.background.default,\n    position: 'relative',\n    minWidth: 'fit-content',\n    width: '100%',\n    color: theme.palette.getContrastText(theme.palette.background.default),\n\n    [`& .${LayoutClasses.appFrame}`]: {\n        display: 'flex',\n        flexDirection: 'column',\n        flexGrow: 1,\n        marginTop: theme.spacing(6),\n        [theme.breakpoints.down('sm')]: {\n            marginTop: theme.spacing(7),\n        },\n    },\n    [`& .${LayoutClasses.contentWithSidebar}`]: {\n        display: 'flex',\n        flexGrow: 1,\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    [`& .${LayoutClasses.content}`]: {\n        backgroundColor: theme.palette.background.default,\n        zIndex: 2,\n        display: 'flex',\n        flexDirection: 'column',\n        flexGrow: 1,\n        flexBasis: 0,\n        padding: 0,\n        [theme.breakpoints.up('xs')]: {\n            paddingRight: theme.spacing(1),\n            paddingLeft: theme.spacing(1),\n        },\n    },\n}));\n", "import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement } from 'react';\nimport {\n    Drawer,\n    DrawerProps,\n    useMediaQuery,\n    Theme,\n    useScrollTrigger,\n} from '@mui/material';\nimport lodashGet from 'lodash/get';\nimport { useLocale } from 'ra-core';\n\nimport { useSidebarState } from './useSidebarState';\n\nexport const Sidebar = (props: SidebarProps) => {\n    const { appBarAlwaysOn, children, closedSize, size, ...rest } = props;\n    const isXSmall = useMediaQuery<Theme>(theme =>\n        theme.breakpoints.down('sm')\n    );\n    const [open, setOpen] = useSidebarState();\n    useLocale(); // force redraw on locale change\n    const trigger = useScrollTrigger();\n\n    const toggleSidebar = () => setOpen(!open);\n\n    return isXSmall ? (\n        <StyledDrawer\n            variant=\"temporary\"\n            open={open}\n            onClose={toggleSidebar}\n            classes={SidebarClasses}\n            {...rest}\n        >\n            {children}\n        </StyledDrawer>\n    ) : (\n        <StyledDrawer\n            variant=\"permanent\"\n            open={open}\n            onClose={toggleSidebar}\n            classes={SidebarClasses}\n            className={\n                trigger && !appBarAlwaysOn ? SidebarClasses.appBarCollapsed : ''\n            }\n            {...rest}\n        >\n            <div className={SidebarClasses.fixed}>{children}</div>\n        </StyledDrawer>\n    );\n};\n\nexport interface SidebarProps extends DrawerProps {\n    appBarAlwaysOn?: boolean;\n    children: ReactElement;\n    closedSize?: number;\n    size?: number;\n}\n\nconst PREFIX = 'RaSidebar';\n\nexport const SidebarClasses = {\n    docked: `${PREFIX}-docked`,\n    paper: `${PREFIX}-paper`,\n    paperAnchorLeft: `${PREFIX}-paperAnchorLeft`,\n    paperAnchorRight: `${PREFIX}-paperAnchorRight`,\n    paperAnchorTop: `${PREFIX}-paperAnchorTop`,\n    paperAnchorBottom: `${PREFIX}-paperAnchorBottom`,\n    paperAnchorDockedLeft: `${PREFIX}-paperAnchorDockedLeft`,\n    paperAnchorDockedTop: `${PREFIX}-paperAnchorDockedTop`,\n    paperAnchorDockedRight: `${PREFIX}-paperAnchorDockedRight`,\n    paperAnchorDockedBottom: `${PREFIX}-paperAnchorDockedBottom`,\n    modal: `${PREFIX}-modal`,\n    fixed: `${PREFIX}-fixed`,\n    appBarCollapsed: `${PREFIX}-appBarCollapsed`,\n};\n\nconst StyledDrawer = styled(Drawer, {\n    name: PREFIX,\n    slot: 'Root',\n    overridesResolver: (props, styles) => styles.root,\n    shouldForwardProp: () => true,\n})(({ open, theme }) => ({\n    height: 'calc(100vh - 3em)',\n    marginTop: 0,\n    transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n    }),\n    [`&.${SidebarClasses.appBarCollapsed}`]: {\n        // compensate the margin of the Layout appFrame instead of removing it in the Layout\n        // because otherwise, the appFrame content without margin may revert the scrollTrigger,\n        // leading to a visual jiggle\n        marginTop: theme.spacing(-6),\n        [theme.breakpoints.down('sm')]: {\n            marginTop: theme.spacing(-7),\n        },\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    [`& .${SidebarClasses.docked}`]: {},\n    [`& .${SidebarClasses.paper}`]: {},\n    [`& .${SidebarClasses.paperAnchorLeft}`]: {},\n    [`& .${SidebarClasses.paperAnchorRight}`]: {},\n    [`& .${SidebarClasses.paperAnchorTop}`]: {},\n    [`& .${SidebarClasses.paperAnchorBottom}`]: {},\n    [`& .${SidebarClasses.paperAnchorDockedLeft}`]: {},\n    [`& .${SidebarClasses.paperAnchorDockedTop}`]: {},\n    [`& .${SidebarClasses.paperAnchorDockedRight}`]: {},\n    [`& .${SidebarClasses.paperAnchorDockedBottom}`]: {},\n    [`& .${SidebarClasses.modal}`]: {},\n\n    [`& .${SidebarClasses.fixed}`]: {\n        position: 'fixed',\n        height: 'calc(100vh - 3em)',\n        overflowX: 'hidden',\n        // hide scrollbar\n        scrollbarWidth: 'none',\n        msOverflowStyle: 'none',\n        '&::-webkit-scrollbar': {\n            display: 'none',\n        },\n    },\n\n    [`& .MuiPaper-root`]: {\n        position: 'relative',\n        width: open\n            ? lodashGet(theme, 'sidebar.width', DRAWER_WIDTH)\n            : lodashGet(theme, 'sidebar.closedWidth', CLOSED_DRAWER_WIDTH),\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        backgroundColor: 'transparent',\n        borderRight: 'none',\n        [theme.breakpoints.only('xs')]: {\n            marginTop: 0,\n            height: '100vh',\n            position: 'inherit',\n            backgroundColor: theme.palette.background.default,\n        },\n        [theme.breakpoints.up('md')]: {\n            border: 'none',\n        },\n        zIndex: 'inherit',\n    },\n}));\n\nexport const DRAWER_WIDTH = 240;\nexport const CLOSED_DRAWER_WIDTH = 55;\n", "import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { MenuList } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport lodashGet from 'lodash/get';\nimport clsx from 'clsx';\n\nimport { DRAWER_WIDTH, CLOSED_DRAWER_WIDTH } from './Sidebar';\nimport { useSidebarState } from './useSidebarState';\nimport { DashboardMenuItem } from './DashboardMenuItem';\nimport { MenuItemLink } from './MenuItemLink';\nimport { ResourceMenuItem } from './ResourceMenuItem';\nimport { ResourceMenuItems } from './ResourceMenuItems';\nimport { useHasDashboard } from 'ra-core';\n\n/**\n * Renders a menu with one menu item per resource by default. You can also set menu items by hand.\n *\n * @example\n * import * as React from 'react';\n * import { Menu } from 'react-admin';\n *\n * import BookIcon from '@mui/icons-material/Book';\n * import ChatBubbleIcon from '@mui/icons-material/ChatBubble';\n * import PeopleIcon from '@mui/icons-material/People';\n * import LabelIcon from '@mui/icons-material/Label';\n *\n * export const MyMenu = () => (\n *     <Menu>\n *         <Menu.DashboardItem />\n *         <Menu.Item to=\"/posts\" primaryText=\"Posts\" leftIcon={<BookIcon />}/>\n *         <Menu.Item to=\"/comments\" primaryText=\"Comments\" leftIcon={<ChatBubbleIcon />}/>\n *         <Menu.Item to=\"/users\" primaryText=\"Users\" leftIcon={<PeopleIcon />}/>\n *         <Menu.Item to=\"/custom-route\" primaryText=\"Miscellaneous\" leftIcon={<LabelIcon />}/>\n *     </Menu>\n * );\n */\nexport const Menu = (props: MenuProps) => {\n    const { children, className, ...rest } = props;\n    const hasDashboard = useHasDashboard();\n    const [open] = useSidebarState();\n\n    return (\n        <Root\n            className={clsx(\n                {\n                    [MenuClasses.open]: open,\n                    [MenuClasses.closed]: !open,\n                },\n                className\n            )}\n            {...rest}\n        >\n            {hasDashboard && !children && <DashboardMenuItem />}\n            {children ?? <ResourceMenuItems />}\n        </Root>\n    );\n};\n\n// NOTE: We don't extends MenuListProps here to avoid breaking changes\nexport interface MenuProps {\n    children?: ReactNode;\n    className?: string;\n    dense?: boolean;\n    [key: string]: any;\n}\n\n// re-export MenuItem components for convenience\nMenu.Item = MenuItemLink;\nMenu.DashboardItem = DashboardMenuItem;\nMenu.ResourceItem = ResourceMenuItem;\nMenu.ResourceItems = ResourceMenuItems;\n\nconst PREFIX = 'RaMenu';\n\nexport const MenuClasses = {\n    open: `${PREFIX}-open`,\n    closed: `${PREFIX}-closed`,\n};\n\nconst Root = styled(MenuList, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    [theme.breakpoints.only('xs')]: {\n        marginTop: 0,\n    },\n    transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n    }),\n\n    [`&.${MenuClasses.open}`]: {\n        width: lodashGet(theme, 'sidebar.width', DRAWER_WIDTH),\n    },\n\n    [`&.${MenuClasses.closed}`]: {\n        width: lodashGet(theme, 'sidebar.closedWidth', CLOSED_DRAWER_WIDTH),\n    },\n}));\n", "import * as React from 'react';\nimport { createElement } from 'react';\nimport DefaultIcon from '@mui/icons-material/ViewList';\n\nimport {\n    useResourceDefinitions,\n    useGetResourceLabel,\n    useCreatePath,\n    useCanAccess,\n} from 'ra-core';\n\nimport { MenuItemLink } from './MenuItemLink';\n\nexport const ResourceMenuItem = ({ name }: { name: string }) => {\n    const resources = useResourceDefinitions();\n    const { canAccess, isPending } = useCanAccess({\n        action: 'list',\n        resource: name,\n    });\n    const getResourceLabel = useGetResourceLabel();\n    const createPath = useCreatePath();\n    if (!resources || !resources[name] || isPending || canAccess === false)\n        return null;\n    return (\n        <MenuItemLink\n            to={createPath({\n                resource: name,\n                type: 'list',\n            })}\n            state={{ _scrollToTop: true }}\n            primaryText={<>{getResourceLabel(name, 2)}</>}\n            leftIcon={\n                resources[name].icon ? (\n                    createElement(resources[name].icon)\n                ) : (\n                    <DefaultIcon />\n                )\n            }\n        />\n    );\n};\n", "import { useResourceDefinitions } from 'ra-core';\n\nimport { ResourceMenuItem } from './ResourceMenuItem';\n\nexport const ResourceMenuItems = () => {\n    const resources = useResourceDefinitions();\n    return (\n        <>\n            {Object.keys(resources)\n                .filter(name => resources[name].hasList)\n                .map(name => (\n                    <ResourceMenuItem key={name} name={name} />\n                ))}\n        </>\n    );\n};\n", "import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Typography, SxProps } from '@mui/material';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { useTimeout, useTranslate } from 'ra-core';\n\nexport const Loading = (props: LoadingProps) => {\n    const {\n        className,\n        loadingPrimary = 'ra.page.loading',\n        loadingSecondary = 'ra.message.loading',\n        ...rest\n    } = props;\n    const oneSecondHasPassed = useTimeout(1000);\n    const translate = useTranslate();\n    return oneSecondHasPassed ? (\n        <Root className={className} {...rest}>\n            <div className={LoadingClasses.message}>\n                <CircularProgress className={LoadingClasses.icon} />\n                <Typography variant=\"h5\" mt={3} color=\"text.secondary\">\n                    {translate(loadingPrimary, { _: loadingPrimary })}\n                </Typography>\n                <Typography variant=\"body2\">\n                    {translate(loadingSecondary, { _: loadingSecondary })}\n                </Typography>\n            </div>\n        </Root>\n    ) : null;\n};\n\nexport interface LoadingProps {\n    className?: string;\n    loadingPrimary?: string;\n    loadingSecondary?: string;\n    sx?: SxProps;\n}\n\nconst PREFIX = 'RaLoading';\n\nexport const LoadingClasses = {\n    root: `${PREFIX}-root`,\n    icon: `${PREFIX}-icon`,\n    message: `${PREFIX}-message`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100%',\n    [`& .${LoadingClasses.message}`]: {\n        textAlign: 'center',\n        fontFamily: 'Roboto, sans-serif',\n        color: theme.palette.text.disabled,\n        paddingTop: '1em',\n        paddingBottom: '1em',\n    },\n    [`& .${LoadingClasses.icon}`]: {\n        width: '9em',\n        height: '9em',\n    },\n}));\n", "import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport {\n    Box,\n    LinearProgress as MuiLinearProgress,\n    LinearProgressProps as ProgressProps,\n} from '@mui/material';\nimport { useTimeout } from 'ra-core';\n\n/**\n * Progress bar formatted to replace an input or a field in a form layout\n *\n * Avoids visual jumps when replaced by value or form input\n *\n * @see ReferenceField\n * @see ReferenceInput\n *\n * @typedef {Object} Props the props you can use\n * @prop {Object} classes CSS class names\n * @prop {string} className CSS class applied to the LinearProgress component\n * @prop {integer} timeout Milliseconds to wait before showing the progress bar. One second by default\n *\n * @param {Props} props\n */\nexport const LinearProgress = ({\n    timeout = 1000,\n    ...props\n}: LinearProgressProps) => {\n    const { className, ...rest } = props;\n\n    const oneSecondHasPassed = useTimeout(timeout);\n\n    return oneSecondHasPassed ? (\n        <StyledProgress className={className} {...rest} />\n    ) : (\n        <Box my={1} height={4} component=\"span\" display=\"block\" />\n    );\n};\n\n// What? TypeScript loses the displayName if we don't set it explicitly\nLinearProgress.displayName = 'LinearProgress';\n\nexport interface LinearProgressProps extends ProgressProps {\n    timeout?: number;\n}\n\nconst PREFIX = 'RaLinearProgress';\n\nconst StyledProgress = styled(MuiLinearProgress, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    margin: `${theme.spacing(1)} 0`,\n    width: theme.spacing(20),\n}));\n", "import * as React from 'react';\n\nimport { Loading } from './Loading';\n\nexport const LoadingPage = ({\n    loadingPrimary = 'ra.page.loading',\n    loadingSecondary = 'ra.message.loading',\n    ...props\n}) => (\n    <Loading\n        loadingPrimary={loadingPrimary}\n        loadingSecondary={loadingSecondary}\n        {...props}\n    />\n);\n", "import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Button from '@mui/material/Button';\nimport HotTub from '@mui/icons-material/HotTub';\nimport History from '@mui/icons-material/History';\nimport { useAuthenticated, useDefaultTitle, useTranslate } from 'ra-core';\n\nimport { Title } from './Title';\nimport { Loading } from './Loading';\n\nexport const NotFound = props => {\n    const { className, ...rest } = props;\n\n    const translate = useTranslate();\n    const { isPending } = useAuthenticated();\n    const title = useDefaultTitle();\n\n    if (isPending) return <Loading />;\n    return (\n        <Root className={className} {...sanitizeRestProps(rest)}>\n            <Title defaultTitle={title} />\n            <div className={NotFoundClasses.message}>\n                <HotTub className={NotFoundClasses.icon} />\n                <h1>{translate('ra.page.not_found')}</h1>\n                <div>{translate('ra.message.not_found')}.</div>\n            </div>\n            <div className={NotFoundClasses.toolbar}>\n                <Button\n                    variant=\"contained\"\n                    startIcon={<History />}\n                    onClick={goBack}\n                >\n                    {translate('ra.action.back')}\n                </Button>\n            </div>\n        </Root>\n    );\n};\n\nconst sanitizeRestProps = ({\n    staticContext,\n    history,\n    location,\n    match,\n    ...rest\n}) => rest;\n\nconst PREFIX = 'RaNotFound';\n\nexport const NotFoundClasses = {\n    icon: `${PREFIX}-icon`,\n    message: `${PREFIX}-message`,\n    toolbar: `${PREFIX}-toolbar`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    [theme.breakpoints.up('md')]: {\n        height: '100%',\n    },\n    [theme.breakpoints.down('md')]: {\n        height: '100vh',\n        marginTop: '-3em',\n    },\n\n    [`& .${NotFoundClasses.icon}`]: {\n        width: '9em',\n        height: '9em',\n    },\n\n    [`& .${NotFoundClasses.message}`]: {\n        textAlign: 'center',\n        fontFamily: 'Roboto, sans-serif',\n        opacity: 0.5,\n        margin: '0 1em',\n    },\n\n    [`& .${NotFoundClasses.toolbar}`]: {\n        textAlign: 'center',\n        marginTop: '2em',\n    },\n}));\n\nfunction goBack() {\n    window.history.go(-1);\n}\n", "import * as React from 'react';\nimport { styled, Theme } from '@mui/material/styles';\nimport { useState, useEffect, useCallback } from 'react';\nimport { Button, Snackbar, SnackbarProps, SnackbarOrigin } from '@mui/material';\nimport clsx from 'clsx';\n\nimport {\n    useNotificationContext,\n    undoableEventEmitter,\n    useTranslate,\n    NotificationPayload,\n    useTakeUndoableMutation,\n} from 'ra-core';\n\nconst defaultAnchorOrigin: SnackbarOrigin = {\n    vertical: 'bottom',\n    horizontal: 'center',\n};\n\n/**\n * Provides a way to show a notification.\n * @see useNotify\n *\n * @example <caption>Basic usage</caption>\n * <Notification />\n *\n * @param props The component props\n * @param {string} props.type The notification type. Defaults to 'info'.\n * @param {number} props.autoHideDuration Duration in milliseconds to wait until hiding a given notification. Defaults to 4000.\n * @param {boolean} props.multiLine Set it to `true` if the notification message should be shown in more than one line.\n */\nexport const Notification = (props: NotificationProps) => {\n    const {\n        className,\n        type = 'info',\n        autoHideDuration = 4000,\n        multiLine = false,\n        anchorOrigin = defaultAnchorOrigin,\n        ...rest\n    } = props;\n    const { notifications, takeNotification } = useNotificationContext();\n    const takeMutation = useTakeUndoableMutation();\n    const [open, setOpen] = useState(false);\n    const [currentNotification, setCurrentNotification] = React.useState<\n        NotificationPayload | undefined\n    >(undefined);\n    const translate = useTranslate();\n\n    useEffect(() => {\n        if (notifications.length && !currentNotification) {\n            // Set a new snack when we don't have an active one\n            const notification = takeNotification();\n            if (notification) {\n                setCurrentNotification(notification);\n                setOpen(true);\n            }\n        } else if (notifications.length && currentNotification && open) {\n            // Close an active snack when a new one is added\n            setOpen(false);\n        }\n\n        const beforeunload = (e: BeforeUnloadEvent) => {\n            e.preventDefault();\n            const confirmationMessage = '';\n            e.returnValue = confirmationMessage;\n            return confirmationMessage;\n        };\n\n        if (currentNotification?.notificationOptions?.undoable) {\n            window.addEventListener('beforeunload', beforeunload);\n            return () => {\n                window.removeEventListener('beforeunload', beforeunload);\n            };\n        }\n    }, [notifications, currentNotification, open, takeNotification]);\n\n    const handleRequestClose = useCallback(() => {\n        setOpen(false);\n    }, [setOpen]);\n\n    const handleExited = useCallback(() => {\n        if (\n            currentNotification &&\n            currentNotification.notificationOptions?.undoable\n        ) {\n            const mutation = takeMutation();\n            if (mutation) {\n                mutation({ isUndo: false });\n            } else {\n                // FIXME kept for BC: remove in v6\n                undoableEventEmitter.emit('end', { isUndo: false });\n            }\n        }\n        setCurrentNotification(undefined);\n    }, [currentNotification, takeMutation]);\n\n    const handleUndo = useCallback(() => {\n        const mutation = takeMutation();\n        if (mutation) {\n            mutation({ isUndo: true });\n        } else {\n            // FIXME kept for BC: remove in v6\n            undoableEventEmitter.emit('end', { isUndo: true });\n        }\n        setOpen(false);\n    }, [takeMutation]);\n\n    if (!currentNotification) return null;\n    const {\n        message,\n        type: typeFromMessage,\n        notificationOptions,\n    } = currentNotification;\n    const {\n        autoHideDuration: autoHideDurationFromMessage,\n        messageArgs,\n        multiLine: multilineFromMessage,\n        undoable,\n        ...options\n    } = notificationOptions || {};\n\n    return (\n        <StyledSnackbar\n            className={className}\n            open={open}\n            message={\n                message &&\n                typeof message === 'string' &&\n                translate(message, messageArgs)\n            }\n            autoHideDuration={\n                // Only apply the default autoHideDuration when autoHideDurationFromMessage is undefined\n                // as 0 and null are valid values\n                autoHideDurationFromMessage === undefined\n                    ? autoHideDuration\n                    : autoHideDurationFromMessage ?? undefined\n            }\n            disableWindowBlurListener={undoable}\n            TransitionProps={{ onExited: handleExited }}\n            onClose={handleRequestClose}\n            ContentProps={{\n                className: clsx(NotificationClasses[typeFromMessage || type], {\n                    [NotificationClasses.multiLine]:\n                        multilineFromMessage || multiLine,\n                }),\n            }}\n            action={\n                undoable ? (\n                    <Button\n                        color=\"primary\"\n                        className={NotificationClasses.undo}\n                        size=\"small\"\n                        onClick={handleUndo}\n                    >\n                        <>{translate('ra.action.undo')}</>\n                    </Button>\n                ) : null\n            }\n            anchorOrigin={anchorOrigin}\n            {...rest}\n            {...options}\n        >\n            {message &&\n            typeof message !== 'string' &&\n            React.isValidElement(message)\n                ? message\n                : undefined}\n        </StyledSnackbar>\n    );\n};\n\nconst PREFIX = 'RaNotification';\n\nexport const NotificationClasses = {\n    success: `${PREFIX}-success`,\n    error: `${PREFIX}-error`,\n    warning: `${PREFIX}-warning`,\n    undo: `${PREFIX}-undo`,\n    multiLine: `${PREFIX}-multiLine`,\n};\n\nconst StyledSnackbar = styled(Snackbar, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme, type }: NotificationProps & { theme?: Theme }) => ({\n    [`& .${NotificationClasses.success}`]: {\n        backgroundColor: theme?.palette.success.main,\n        color: theme?.palette.success.contrastText,\n    },\n\n    [`& .${NotificationClasses.error}`]: {\n        backgroundColor: theme?.palette.error.main,\n        color: theme?.palette.error.contrastText,\n    },\n\n    [`& .${NotificationClasses.warning}`]: {\n        backgroundColor: theme?.palette.warning.main,\n        color: theme?.palette.warning.contrastText,\n    },\n\n    [`& .${NotificationClasses.undo}`]: {\n        color:\n            type === 'success'\n                ? theme?.palette.success.contrastText\n                : theme?.palette.primary.light,\n    },\n    [`& .${NotificationClasses.multiLine}`]: {\n        whiteSpace: 'pre-wrap',\n    },\n}));\n\nexport interface NotificationProps extends Omit<SnackbarProps, 'open'> {\n    type?: string;\n    autoHideDuration?: number;\n    multiLine?: boolean;\n}\n", "import * as React from 'react';\nimport { useMediaQuery, Theme } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport Toolbar, { ToolbarProps } from '@mui/material/Toolbar';\n\nexport const TopToolbar = (props: ToolbarProps) => {\n    const isXSmall = useMediaQuery<Theme>(theme =>\n        theme.breakpoints.down('sm')\n    );\n    return (\n        <StyledToolbar\n            disableGutters\n            variant={isXSmall ? 'regular' : 'dense'}\n            {...sanitizeToolbarRestProps(props)}\n        />\n    );\n};\n\nexport default TopToolbar;\nconst PREFIX = 'RaTopToolbar';\n\nconst StyledToolbar = styled(Toolbar, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    justifyContent: 'flex-end',\n    alignItems: 'flex-end',\n    gap: theme.spacing(1),\n    whiteSpace: 'nowrap',\n    flex: '0 1 auto',\n    padding: theme.spacing(0.5),\n    paddingBottom: theme.spacing(1),\n    [theme.breakpoints.down('md')]: {\n        flex: '0 1 100%',\n    },\n    [theme.breakpoints.down('sm')]: {\n        backgroundColor: theme.palette.background.paper,\n        padding: 0,\n        paddingBottom: 0,\n    },\n}));\n\nconst sanitizeToolbarRestProps = ({ hasCreate, ...props }: any) => props;\n", "import { useContext } from 'react';\nimport { UserMenuContext } from './UserMenuContext';\n\n/**\n * A hook to retrieve the user menu context, which provides access to a function for closing the user menu.\n * @returns {UserMenuContextValue}\n *\n * @example\n * import { Logout, MenuItemLink, UserMenu, useUserMenu } from 'react-admin';\n *\n * const ConfigurationMenu = () => {\n *     const { onClose } = useUserMenu();\n *     return (\n *         <MenuItemLink\n *             to=\"/configuration\"\n *             primaryText=\"pos.configuration\"\n *             leftIcon={<SettingsIcon />}\n *             sidebarIsOpen\n *             onClick={onClose}\n *         />\n *     );\n * };\n *\n * export const MyUserMenu = () => (\n *     <UserMenu>\n *         <ConfigurationMenu />\n *         <Logout />\n *     </UserMenu>\n * );\n */\nexport const useUserMenu = () => useContext(UserMenuContext);\n", "import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement } from 'react';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport { alpha } from '@mui/material/styles';\nimport {\n    useDeleteMany,\n    useRefresh,\n    useNotify,\n    useResourceContext,\n    useListContext,\n    RaRecord,\n    DeleteManyParams,\n    useTranslate,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\nimport { UseMutationOptions } from '@tanstack/react-query';\n\nexport const BulkDeleteWithUndoButton = (\n    props: BulkDeleteWithUndoButtonProps\n) => {\n    const {\n        label = 'ra.action.delete',\n        icon = defaultIcon,\n        onClick,\n        mutationOptions = {},\n        successMessage,\n        ...rest\n    } = props;\n    const { meta: mutationMeta, ...otherMutationOptions } = mutationOptions;\n    const { selectedIds, onUnselectItems } = useListContext();\n\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const refresh = useRefresh();\n    const translate = useTranslate();\n    const [deleteMany, { isPending }] = useDeleteMany();\n\n    const handleClick = e => {\n        deleteMany(\n            resource,\n            { ids: selectedIds, meta: mutationMeta },\n            {\n                onSuccess: () => {\n                    notify(\n                        successMessage ??\n                            `resources.${resource}.notifications.deleted`,\n                        {\n                            type: 'info',\n                            messageArgs: {\n                                smart_count: selectedIds.length,\n                                _: translate('ra.notification.deleted', {\n                                    smart_count: selectedIds.length,\n                                }),\n                            },\n                            undoable: true,\n                        }\n                    );\n                    onUnselectItems();\n                },\n                onError: (error: Error) => {\n                    notify(\n                        typeof error === 'string'\n                            ? error\n                            : error.message || 'ra.notification.http_error',\n                        {\n                            type: 'error',\n                            messageArgs: {\n                                _:\n                                    typeof error === 'string'\n                                        ? error\n                                        : error && error.message\n                                          ? error.message\n                                          : undefined,\n                            },\n                        }\n                    );\n                    refresh();\n                },\n                mutationMode: 'undoable',\n                ...otherMutationOptions,\n            }\n        );\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <StyledButton\n            onClick={handleClick}\n            label={label}\n            disabled={isPending}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </StyledButton>\n    );\n};\n\nconst defaultIcon = <ActionDelete />;\n\nconst sanitizeRestProps = ({\n    classes,\n    label,\n    ...rest\n}: Omit<BulkDeleteWithUndoButtonProps, 'resource' | 'icon'>) => rest;\n\nexport interface BulkDeleteWithUndoButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown,\n> extends ButtonProps {\n    icon?: ReactElement;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        DeleteManyParams<RecordType>\n    > & { meta?: any };\n    successMessage?: string;\n}\n\nconst PREFIX = 'RaBulkDeleteWithUndoButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.error.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n", "import * as React from 'react';\nimport {\n    BulkDeleteWithConfirmButton,\n    BulkDeleteWithConfirmButtonProps,\n} from './BulkDeleteWithConfirmButton';\nimport {\n    BulkDeleteWithUndoButton,\n    BulkDeleteWithUndoButtonProps,\n} from './BulkDeleteWithUndoButton';\nimport { MutationMode, useCanAccess, useResourceContext } from 'ra-core';\n\n/**\n * Deletes the selected rows.\n *\n * To be used inside the <Datagrid bulkActionButtons> prop (where it's enabled by default).\n *\n * @example // basic usage\n * import { BulkDeleteButton, BulkExportButton, List, Datagrid } from 'react-admin';\n *\n * const PostBulkActionButtons = () => (\n *     <>\n *         <BulkExportButton />\n *         <BulkDeleteButton />\n *     </>\n * );\n *\n * export const PostList = () => (\n *     <List>\n *        <Datagrid bulkActionButtons={<PostBulkActionButtons />}>\n *             ...\n *       </Datagrid>\n *     </List>\n * );\n */\nexport const BulkDeleteButton = ({\n    mutationMode = 'undoable',\n    ...props\n}: BulkDeleteButtonProps) => {\n    const resource = useResourceContext(props);\n    if (!resource) {\n        throw new Error(\n            '<BulkDeleteButton> components should be used inside a <Resource> component or provided with a resource prop.'\n        );\n    }\n    const { canAccess, isPending } = useCanAccess({\n        action: 'delete',\n        resource,\n    });\n    if (!canAccess || isPending) {\n        return null;\n    }\n    return mutationMode === 'undoable' ? (\n        <BulkDeleteWithUndoButton {...props} />\n    ) : (\n        <BulkDeleteWithConfirmButton mutationMode={mutationMode} {...props} />\n    );\n};\n\ninterface Props {\n    mutationMode?: MutationMode;\n}\n\nexport type BulkDeleteButtonProps = Props &\n    (BulkDeleteWithUndoButtonProps | BulkDeleteWithConfirmButtonProps);\n", "import * as React from 'react';\nimport { useCallback } from 'react';\nimport DownloadIcon from '@mui/icons-material/GetApp';\nimport {\n    fetchRelatedRecords,\n    useDataProvider,\n    useNotify,\n    Exporter,\n    useListContext,\n    useResourceContext,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\n/**\n * Export the selected rows\n *\n * To be used inside the <Datagrid bulkActionButtons> prop.\n *\n * @example // basic usage\n * import { BulkDeleteButton, BulkExportButton, List, Datagrid } from 'react-admin';\n *\n * const PostBulkActionButtons = () => (\n *     <>\n *         <BulkExportButton />\n *         <BulkDeleteButton />\n *     </>\n * );\n *\n * export const PostList = () => (\n *     <List>\n *        <Datagrid bulkActionButtons={<PostBulkActionButtons />}>\n *          ...\n *       </Datagrid>\n *     </List>\n * );\n */\nexport const BulkExportButton = (props: BulkExportButtonProps) => {\n    const {\n        onClick,\n        label = 'ra.action.export',\n        icon = defaultIcon,\n        exporter: customExporter,\n        meta,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    const { exporter: exporterFromContext, selectedIds } = useListContext();\n    const exporter = customExporter || exporterFromContext;\n    const dataProvider = useDataProvider();\n    const notify = useNotify();\n    const handleClick = useCallback(\n        event => {\n            if (exporter && resource) {\n                dataProvider\n                    .getMany(resource, { ids: selectedIds, meta })\n                    .then(({ data }) =>\n                        exporter(\n                            data,\n                            fetchRelatedRecords(dataProvider),\n                            dataProvider,\n                            resource\n                        )\n                    )\n                    .catch(error => {\n                        console.error(error);\n                        notify('ra.notification.http_error', {\n                            type: 'error',\n                        });\n                    });\n            }\n            if (typeof onClick === 'function') {\n                onClick(event);\n            }\n        },\n        [dataProvider, exporter, notify, onClick, resource, selectedIds, meta]\n    );\n\n    return (\n        <Button\n            onClick={handleClick}\n            label={label}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\nconst defaultIcon = <DownloadIcon />;\n\nconst sanitizeRestProps = ({\n    resource,\n    ...rest\n}: Omit<BulkExportButtonProps, 'exporter' | 'label' | 'meta'>) => rest;\n\ninterface Props {\n    exporter?: Exporter;\n    icon?: JSX.Element;\n    label?: string;\n    onClick?: (e: Event) => void;\n    resource?: string;\n    meta?: any;\n}\n\nexport type BulkExportButtonProps = Props & ButtonProps;\n", "import * as React from 'react';\nimport { Fragment, useState, ReactElement } from 'react';\nimport ActionUpdate from '@mui/icons-material/Update';\n\nimport { alpha, styled } from '@mui/material/styles';\nimport {\n    useListContext,\n    useTranslate,\n    useUpdateMany,\n    useNotify,\n    useUnselectAll,\n    useResourceContext,\n    MutationMode,\n    RaRecord,\n    UpdateManyParams,\n} from 'ra-core';\n\nimport { Confirm } from '../layout';\nimport { Button, ButtonProps } from './Button';\nimport { UseMutationOptions } from '@tanstack/react-query';\nimport { humanize, inflect } from 'inflection';\n\nexport const BulkUpdateWithConfirmButton = (\n    props: BulkUpdateWithConfirmButtonProps\n) => {\n    const notify = useNotify();\n    const translate = useTranslate();\n    const resource = useResourceContext(props);\n    const unselectAll = useUnselectAll(resource);\n    const [isOpen, setOpen] = useState(false);\n    const { selectedIds } = useListContext();\n\n    const {\n        confirmTitle = 'ra.message.bulk_update_title',\n        confirmContent = 'ra.message.bulk_update_content',\n        data,\n        icon = defaultIcon,\n        label = 'ra.action.update',\n        mutationMode = 'pessimistic',\n        onClick,\n        onSuccess = () => {\n            notify(`resources.${resource}.notifications.updated`, {\n                type: 'info',\n                messageArgs: {\n                    smart_count: selectedIds.length,\n                    _: translate('ra.notification.updated', {\n                        smart_count: selectedIds.length,\n                    }),\n                },\n                undoable: mutationMode === 'undoable',\n            });\n            unselectAll();\n            setOpen(false);\n        },\n        onError = (error: Error | string) => {\n            notify(\n                typeof error === 'string'\n                    ? error\n                    : error.message || 'ra.notification.http_error',\n                {\n                    type: 'error',\n                    messageArgs: {\n                        _:\n                            typeof error === 'string'\n                                ? error\n                                : error && error.message\n                                  ? error.message\n                                  : undefined,\n                    },\n                }\n            );\n            setOpen(false);\n        },\n        mutationOptions = {},\n        ...rest\n    } = props;\n    const { meta: mutationMeta, ...otherMutationOptions } = mutationOptions;\n\n    const [updateMany, { isPending }] = useUpdateMany(\n        resource,\n        { ids: selectedIds, data, meta: mutationMeta },\n        {\n            onSuccess,\n            onError,\n            mutationMode,\n            ...otherMutationOptions,\n        }\n    );\n\n    const handleClick = e => {\n        setOpen(true);\n        e.stopPropagation();\n    };\n\n    const handleDialogClose = () => {\n        setOpen(false);\n    };\n\n    const handleUpdate = e => {\n        updateMany();\n\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <Fragment>\n            <StyledButton\n                onClick={handleClick}\n                label={label}\n                {...sanitizeRestProps(rest)}\n            >\n                {icon}\n            </StyledButton>\n            <Confirm\n                isOpen={isOpen}\n                loading={isPending}\n                title={confirmTitle}\n                content={confirmContent}\n                translateOptions={{\n                    smart_count: selectedIds.length,\n                    name: translate(`resources.${resource}.forcedCaseName`, {\n                        smart_count: selectedIds.length,\n                        _: humanize(\n                            translate(`resources.${resource}.name`, {\n                                smart_count: selectedIds.length,\n                                _: resource\n                                    ? inflect(resource, selectedIds.length)\n                                    : undefined,\n                            }),\n                            true\n                        ),\n                    }),\n                }}\n                onConfirm={handleUpdate}\n                onClose={handleDialogClose}\n            />\n        </Fragment>\n    );\n};\n\nconst sanitizeRestProps = ({\n    label,\n    onSuccess,\n    onError,\n    ...rest\n}: Omit<\n    BulkUpdateWithConfirmButtonProps,\n    'resource' | 'selectedIds' | 'icon' | 'data'\n>) => rest;\n\nexport interface BulkUpdateWithConfirmButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown,\n> extends ButtonProps {\n    confirmContent?: React.ReactNode;\n    confirmTitle?: React.ReactNode;\n    icon?: ReactElement;\n    data: any;\n    onSuccess?: () => void;\n    onError?: (error: any) => void;\n    mutationMode?: MutationMode;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        UpdateManyParams<RecordType>\n    > & { meta?: any };\n}\n\nconst PREFIX = 'RaBulkUpdateWithConfirmButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.primary.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.primary.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n\nconst defaultIcon = <ActionUpdate />;\n", "import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement } from 'react';\nimport ActionUpdate from '@mui/icons-material/Update';\nimport { alpha } from '@mui/material/styles';\nimport {\n    useUpdateMany,\n    useRefresh,\n    useNotify,\n    useUnselectAll,\n    useResourceContext,\n    useListContext,\n    RaRecord,\n    UpdateManyParams,\n    useTranslate,\n} from 'ra-core';\nimport { UseMutationOptions } from '@tanstack/react-query';\n\nimport { Button, ButtonProps } from './Button';\n\nexport const BulkUpdateWithUndoButton = (\n    props: BulkUpdateWithUndoButtonProps\n) => {\n    const { selectedIds } = useListContext();\n\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const unselectAll = useUnselectAll(resource);\n    const refresh = useRefresh();\n    const translate = useTranslate();\n\n    const {\n        data,\n        label = 'ra.action.update',\n        icon = defaultIcon,\n        successMessage,\n        onClick,\n        onSuccess = () => {\n            notify(\n                successMessage ?? `resources.${resource}.notifications.updated`,\n                {\n                    type: 'info',\n                    messageArgs: {\n                        smart_count: selectedIds.length,\n                        _: translate('ra.notification.updated', {\n                            smart_count: selectedIds.length,\n                        }),\n                    },\n                    undoable: true,\n                }\n            );\n            unselectAll();\n        },\n        onError = (error: Error | string) => {\n            notify(\n                typeof error === 'string'\n                    ? error\n                    : error.message || 'ra.notification.http_error',\n                {\n                    type: 'error',\n                    messageArgs: {\n                        _:\n                            typeof error === 'string'\n                                ? error\n                                : error && error.message\n                                  ? error.message\n                                  : undefined,\n                    },\n                }\n            );\n            refresh();\n        },\n        mutationOptions = {},\n        ...rest\n    } = props;\n    const { meta: mutationMeta, ...otherMutationOptions } = mutationOptions;\n\n    const [updateMany, { isPending }] = useUpdateMany(\n        resource,\n        { ids: selectedIds, data, meta: mutationMeta },\n        {\n            onSuccess,\n            onError,\n            mutationMode: 'undoable',\n            ...otherMutationOptions,\n        }\n    );\n\n    const handleClick = e => {\n        updateMany();\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <StyledButton\n            onClick={handleClick}\n            label={label}\n            disabled={isPending}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </StyledButton>\n    );\n};\n\nconst defaultIcon = <ActionUpdate />;\n\nconst sanitizeRestProps = ({\n    label,\n    onSuccess,\n    onError,\n    ...rest\n}: Omit<BulkUpdateWithUndoButtonProps, 'resource' | 'icon' | 'data'>) => rest;\n\nexport interface BulkUpdateWithUndoButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown,\n> extends ButtonProps {\n    icon?: ReactElement;\n    data: any;\n    onSuccess?: () => void;\n    onError?: (error: any) => void;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        UpdateManyParams<RecordType>\n    > & { meta?: any };\n    successMessage?: string;\n}\n\nconst PREFIX = 'RaBulkUpdateWithUndoButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.primary.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.primary.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n", "import * as React from 'react';\nimport {\n    BulkUpdateWithConfirmButton,\n    BulkUpdateWithConfirmButtonProps,\n} from './BulkUpdateWithConfirmButton';\nimport {\n    BulkUpdateWithUndoButton,\n    BulkUpdateWithUndoButtonProps,\n} from './BulkUpdateWithUndoButton';\nimport { MutationMode } from 'ra-core';\n\n/**\n * Updates the selected rows.\n *\n * To be used inside the <Datagrid bulkActionButtons> prop (where it's enabled by default).\n *\n * @example // basic usage\n * import { BulkUpdateButton, BulkExportButton, List, Datagrid } from 'react-admin';\n *\n * const PostBulkActionButtons = () => (\n *     <>\n *         <BulkExportButton />\n *         <BulkUpdateButton label=\"Reset Views\" data={{ views: 0 }} />\n *     </>\n * );\n *\n * export const PostList = () => (\n *     <List>\n *        <Datagrid bulkActionButtons={<PostBulkActionButtons />}>\n *          ...\n *        </Datagrid>\n *     </List>\n * );\n */\nexport const BulkUpdateButton = (props: BulkUpdateButtonProps) => {\n    const { mutationMode = 'undoable', data = defaultData, ...rest } = props;\n\n    return mutationMode === 'undoable' ? (\n        <BulkUpdateWithUndoButton data={data} {...rest} />\n    ) : (\n        <BulkUpdateWithConfirmButton\n            mutationMode={mutationMode}\n            data={data}\n            {...rest}\n        />\n    );\n};\n\ninterface Props {\n    mutationMode?: MutationMode;\n}\n\nexport type BulkUpdateButtonProps = Props &\n    (BulkUpdateWithUndoButtonProps | BulkUpdateWithConfirmButtonProps);\n\nconst defaultData = [];\n", "import * as React from 'react';\nimport { ReactElement, ReactEventHandler } from 'react';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport clsx from 'clsx';\nimport { UseMutationOptions } from '@tanstack/react-query';\nimport {\n    RaRecord,\n    useDeleteWithUndoController,\n    DeleteParams,\n    useRecordContext,\n    useResourceContext,\n    RedirectionSideEffect,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\nexport const DeleteWithUndoButton = <RecordType extends RaRecord = any>(\n    props: DeleteWithUndoButtonProps<RecordType>\n) => {\n    const {\n        label = 'ra.action.delete',\n        className,\n        icon = defaultIcon,\n        onClick,\n        redirect = 'list',\n        mutationOptions,\n        color = 'error',\n        successMessage,\n        ...rest\n    } = props;\n\n    const record = useRecordContext(props);\n    const resource = useResourceContext(props);\n    const { isPending, handleDelete } = useDeleteWithUndoController({\n        record,\n        resource,\n        redirect,\n        onClick,\n        mutationOptions,\n        successMessage,\n    });\n\n    return (\n        <Button\n            onClick={handleDelete}\n            disabled={isPending}\n            label={label}\n            className={clsx('ra-delete-button', className)}\n            key=\"button\"\n            color={color}\n            {...rest}\n        >\n            {icon}\n        </Button>\n    );\n};\n\nconst defaultIcon = <ActionDelete />;\n\nexport interface DeleteWithUndoButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown,\n> extends ButtonProps {\n    icon?: ReactElement;\n    onClick?: ReactEventHandler<any>;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        DeleteParams<RecordType>\n    >;\n    record?: RecordType;\n    redirect?: RedirectionSideEffect;\n    resource?: string;\n    successMessage?: string;\n}\n", "import React, { Fragment, ReactEventHandler, ReactElement } from 'react';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport clsx from 'clsx';\n\nimport { UseMutationOptions } from '@tanstack/react-query';\nimport {\n    MutationMode,\n    RaRecord,\n    DeleteParams,\n    useDeleteWithConfirmController,\n    useRecordContext,\n    useResourceContext,\n    useTranslate,\n    RedirectionSideEffect,\n} from 'ra-core';\n\nimport { Confirm } from '../layout';\nimport { Button, ButtonProps } from './Button';\nimport { humanize, singularize } from 'inflection';\n\nexport const DeleteWithConfirmButton = <RecordType extends RaRecord = any>(\n    props: DeleteWithConfirmButtonProps<RecordType>\n) => {\n    const {\n        className,\n        confirmTitle = 'ra.message.delete_title',\n        confirmContent = 'ra.message.delete_content',\n        confirmColor = 'primary',\n        icon = defaultIcon,\n        label = 'ra.action.delete',\n        mutationMode = 'pessimistic',\n        onClick,\n        redirect = 'list',\n        translateOptions = {},\n        mutationOptions,\n        color = 'error',\n        successMessage,\n        ...rest\n    } = props;\n    const translate = useTranslate();\n    const record = useRecordContext(props);\n    const resource = useResourceContext(props);\n\n    const {\n        open,\n        isPending,\n        handleDialogOpen,\n        handleDialogClose,\n        handleDelete,\n    } = useDeleteWithConfirmController({\n        record,\n        redirect,\n        mutationMode,\n        onClick,\n        mutationOptions,\n        resource,\n        successMessage,\n    });\n\n    return (\n        <Fragment>\n            <Button\n                onClick={handleDialogOpen}\n                label={label}\n                className={clsx('ra-delete-button', className)}\n                key=\"button\"\n                color={color}\n                {...rest}\n            >\n                {icon}\n            </Button>\n            <Confirm\n                isOpen={open}\n                loading={isPending}\n                title={confirmTitle}\n                content={confirmContent}\n                confirmColor={confirmColor}\n                translateOptions={{\n                    name: translate(`resources.${resource}.forcedCaseName`, {\n                        smart_count: 1,\n                        _: humanize(\n                            translate(`resources.${resource}.name`, {\n                                smart_count: 1,\n                                _: resource ? singularize(resource) : undefined,\n                            }),\n                            true\n                        ),\n                    }),\n                    id: record?.id,\n                    ...translateOptions,\n                }}\n                onConfirm={handleDelete}\n                onClose={handleDialogClose}\n            />\n        </Fragment>\n    );\n};\n\nconst defaultIcon = <ActionDelete />;\n\nexport interface DeleteWithConfirmButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown,\n> extends ButtonProps {\n    confirmTitle?: React.ReactNode;\n    confirmContent?: React.ReactNode;\n    confirmColor?: 'primary' | 'warning';\n    icon?: ReactElement;\n    mutationMode?: MutationMode;\n    onClick?: ReactEventHandler<any>;\n    // May be injected by Toolbar - sanitized in Button\n    translateOptions?: object;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        DeleteParams<RecordType>\n    >;\n    record?: RecordType;\n    redirect?: RedirectionSideEffect;\n    resource?: string;\n    successMessage?: string;\n}\n", "import * as React from 'react';\nimport { ReactElement } from 'react';\nimport { UseMutationOptions } from '@tanstack/react-query';\nimport {\n    RaRecord,\n    MutationMode,\n    DeleteParams,\n    useRecordContext,\n    useSaveContext,\n    SaveContextValue,\n    RedirectionSideEffect,\n    useResourceContext,\n    useCanAccess,\n} from 'ra-core';\n\nimport { ButtonProps } from './Button';\nimport { DeleteWithUndoButton } from './DeleteWithUndoButton';\nimport { DeleteWithConfirmButton } from './DeleteWithConfirmButton';\n\n/**\n * Button used to delete a single record. Added by default by the <Toolbar> of edit and show views.\n *\n * @typedef {Object} Props The props you can use (other props are injected if you used it in the <Toolbar>)\n * @prop {boolean} mutationMode Either 'pessimistic', 'optimistic' or 'undoable'. Determine whether the deletion uses an undo button in a notification or a confirmation dialog. Defaults to 'undoable'.\n * @prop {Object} record The current resource record\n * @prop {string} className\n * @prop {string} label Button label. Defaults to 'ra.action.delete, translated.\n * @prop {boolean} disabled Disable the button.\n * @prop {string} variant Material UI variant for the button. Defaults to 'contained'.\n * @prop {ReactElement} icon Override the icon. Defaults to the Delete icon from Material UI.\n *\n * @param {Props} props\n *\n * @example Usage in the <TopToolbar> of an <Edit> form\n *\n * import * as React from 'react';\n * import { Edit, DeleteButton, TopToolbar } from 'react-admin';\n *\n * const EditActions = props => {\n *     const { data, resource } = props;\n *     return (\n *         <TopToolbar>\n *             <DeleteButton\n *                 mutationMode=\"pessimistic\" // Renders the <DeleteWithConfirmButton>\n *             />\n *         </TopToolbar>\n *     );\n * };\n *\n * const Edit = props => {\n *     return <Edit actions={<EditActions />} {...props} />;\n * };\n */\nexport const DeleteButton = <RecordType extends RaRecord = any>(\n    props: DeleteButtonProps<RecordType>\n) => {\n    const { mutationMode, ...rest } = props;\n    const record = useRecordContext(props);\n    const resource = useResourceContext(props);\n    if (!resource) {\n        throw new Error(\n            '<DeleteButton> components should be used inside a <Resource> component or provided the resource prop.'\n        );\n    }\n    const { canAccess, isPending } = useCanAccess({\n        action: 'delete',\n        resource,\n        record,\n    });\n    const saveContext = useSaveContext(props);\n    if (!record || record.id == null || !canAccess || isPending) {\n        return null;\n    }\n\n    const finalMutationMode = mutationMode\n        ? mutationMode\n        : saveContext?.mutationMode\n          ? saveContext.mutationMode\n          : 'undoable';\n\n    return finalMutationMode === 'undoable' ? (\n        <DeleteWithUndoButton<RecordType> record={record} {...rest} />\n    ) : (\n        <DeleteWithConfirmButton<RecordType>\n            // @ts-ignore I looked for the error for one hour without finding it\n            mutationMode={finalMutationMode}\n            record={record}\n            {...rest}\n        />\n    );\n};\n\nexport interface DeleteButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown,\n> extends ButtonProps,\n        SaveContextValue {\n    confirmTitle?: React.ReactNode;\n    confirmContent?: React.ReactNode;\n    confirmColor?: 'primary' | 'warning';\n    icon?: ReactElement;\n    mutationMode?: MutationMode;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        DeleteParams<RecordType>\n    >;\n    record?: RecordType;\n    redirect?: RedirectionSideEffect;\n    resource?: string;\n    successMessage?: string;\n}\n", "import * as React from 'react';\nimport { ReactElement } from 'react';\nimport clsx from 'clsx';\nimport { styled } from '@mui/material/styles';\nimport ContentCreate from '@mui/icons-material/Create';\nimport { Link } from 'react-router-dom';\nimport {\n    RaRecord,\n    useResourceContext,\n    useRecordContext,\n    useCreatePath,\n    useCanAccess,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\n/**\n * Opens the Edit view for the current record.\n *\n * Reads the record and resource from the context.\n *\n * @example // basic usage\n * import { EditButton } from 'react-admin';\n *\n * const CommentEditButton = () => (\n *     <EditButton label=\"Edit comment\" />\n * );\n */\nexport const EditButton = <RecordType extends RaRecord = any>(\n    props: EditButtonProps<RecordType>\n) => {\n    const {\n        icon = defaultIcon,\n        label = 'ra.action.edit',\n        scrollToTop = true,\n        className,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    if (!resource) {\n        throw new Error(\n            '<EditButton> components should be used inside a <Resource> component or provided with a resource prop. (The <Resource> component set the resource prop for all its children).'\n        );\n    }\n    const record = useRecordContext(props);\n    const createPath = useCreatePath();\n    const { canAccess, isPending } = useCanAccess({\n        action: 'edit',\n        resource,\n        record,\n    });\n    if (!record || !canAccess || isPending) return null;\n    return (\n        <StyledButton\n            component={Link}\n            to={createPath({ type: 'edit', resource, id: record.id })}\n            state={scrollStates[String(scrollToTop)]}\n            label={label}\n            onClick={stopPropagation}\n            className={clsx(EditButtonClasses.root, className)}\n            {...(rest as any)}\n        >\n            {icon}\n        </StyledButton>\n    );\n};\n\n// avoids using useMemo to get a constant value for the link state\nconst scrollStates = {\n    true: { _scrollToTop: true },\n    false: {},\n};\n\nconst defaultIcon = <ContentCreate />;\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\ninterface Props<RecordType extends RaRecord = any> {\n    icon?: ReactElement;\n    label?: string;\n    record?: RecordType;\n    resource?: string;\n    scrollToTop?: boolean;\n}\n\nexport type EditButtonProps<RecordType extends RaRecord = any> =\n    Props<RecordType> & ButtonProps;\n\nconst PREFIX = 'RaEditButton';\n\nexport const EditButtonClasses = {\n    root: `${PREFIX}-root`,\n};\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (_props, styles) => styles.root,\n})({});\n", "import * as React from 'react';\nimport { useCallback } from 'react';\nimport DownloadIcon from '@mui/icons-material/GetApp';\nimport {\n    fetchRelatedRecords,\n    useDataProvider,\n    useNotify,\n    useListContext,\n    Exporter,\n} from 'ra-core';\nimport { Button, ButtonProps } from './Button';\n\nexport const ExportButton = (props: ExportButtonProps) => {\n    const {\n        maxResults = 1000,\n        onClick,\n        label = 'ra.action.export',\n        icon = defaultIcon,\n        exporter: customExporter,\n        meta,\n        ...rest\n    } = props;\n    const {\n        filter,\n        filterValues,\n        resource,\n        sort,\n        exporter: exporterFromContext,\n        total,\n    } = useListContext();\n    const exporter = customExporter || exporterFromContext;\n    const dataProvider = useDataProvider();\n    const notify = useNotify();\n    const handleClick = useCallback(\n        event => {\n            dataProvider\n                .getList(resource, {\n                    sort,\n                    filter: filter\n                        ? { ...filterValues, ...filter }\n                        : filterValues,\n                    pagination: { page: 1, perPage: maxResults },\n                    meta,\n                })\n                .then(\n                    ({ data }) =>\n                        exporter &&\n                        exporter(\n                            data,\n                            fetchRelatedRecords(dataProvider),\n                            dataProvider,\n                            resource\n                        )\n                )\n                .catch(error => {\n                    console.error(error);\n                    notify('ra.notification.http_error', { type: 'error' });\n                });\n            if (typeof onClick === 'function') {\n                onClick(event);\n            }\n        },\n        [\n            dataProvider,\n            exporter,\n            filter,\n            filterValues,\n            maxResults,\n            notify,\n            onClick,\n            resource,\n            sort,\n            meta,\n        ]\n    );\n\n    return (\n        <Button\n            onClick={handleClick}\n            label={label}\n            disabled={total === 0}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\nconst defaultIcon = <DownloadIcon />;\n\nconst sanitizeRestProps = ({\n    resource,\n    ...rest\n}: Omit<ExportButtonProps, 'maxResults' | 'label' | 'exporter' | 'meta'>) =>\n    rest;\n\ninterface Props {\n    exporter?: Exporter;\n    icon?: JSX.Element;\n    label?: string;\n    maxResults?: number;\n    onClick?: (e: Event) => void;\n    resource?: string;\n    meta?: any;\n}\n\nexport type ExportButtonProps = Props & ButtonProps;\n", "import * as React from 'react';\nimport { MouseEvent } from 'react';\nimport { IconButton, IconButtonProps, Tooltip } from '@mui/material';\nimport { useTranslate } from 'ra-core';\n\n/**\n * An IconButton with a tooltip which ensures the tooltip is closed on click to avoid ghost tooltips\n * when the button position changes.\n */\nexport const IconButtonWithTooltip = ({\n    label,\n    onClick,\n    ...props\n}: IconButtonWithTooltipProps) => {\n    const translate = useTranslate();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const translatedLabel = translate(label, { _: label });\n\n    const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n        handleClose();\n        onClick && onClick(event);\n    };\n\n    return (\n        <Tooltip\n            title={translatedLabel}\n            open={open}\n            onOpen={handleOpen}\n            onClose={handleClose}\n        >\n            <IconButton\n                aria-label={translatedLabel}\n                onClick={handleClick}\n                {...props}\n            />\n        </Tooltip>\n    );\n};\n\nexport interface IconButtonWithTooltipProps extends IconButtonProps {\n    label: string;\n}\n", "import * as React from 'react';\nimport { MouseEvent, ReactNode, useState } from 'react';\nimport { useLocaleState, useLocales } from 'ra-core';\nimport { Box, Button, Menu, MenuItem, styled } from '@mui/material';\nimport LanguageIcon from '@mui/icons-material/Translate';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\n/**\n * Language selector. Changes the locale in the app and persists it in\n * preferences so that the app opens with the right locale in the future.\n *\n * Uses i18nProvider.getLocales() to get the list of available locales.\n *\n * @example\n * import { AppBar, TitlePortal, LocalesMenuButton } from 'react-admin';\n *\n * const MyAppBar = () => (\n *     <AppBar>\n *         <TitlePortal />\n *         <LocalesMenuButton />\n *     </AppBar>\n * );\n */\nexport const LocalesMenuButton = (props: LocalesMenuButtonProps) => {\n    const { icon = DefaultIcon, languages: languagesProp } = props;\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const languages = useLocales({ locales: languagesProp });\n    const [locale, setLocale] = useLocaleState();\n\n    const getNameForLocale = (locale: string): string => {\n        const language = languages.find(language => language.locale === locale);\n        return language ? language.name : '';\n    };\n\n    const changeLocale = (locale: string) => (): void => {\n        setLocale(locale);\n        setAnchorEl(null);\n    };\n\n    const handleLanguageClick = (event: MouseEvent<HTMLElement>): void => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = (): void => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <Root component=\"span\">\n            <Button\n                color=\"inherit\"\n                variant=\"text\"\n                aria-controls=\"simple-menu\"\n                aria-label=\"\"\n                aria-haspopup=\"true\"\n                onClick={handleLanguageClick}\n                startIcon={icon}\n                endIcon={<ExpandMoreIcon fontSize=\"small\" />}\n            >\n                {getNameForLocale(locale)}\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {languages.map(language => (\n                    <MenuItem\n                        key={language.locale}\n                        onClick={changeLocale(language.locale)}\n                        selected={language.locale === locale}\n                    >\n                        {language.name}\n                    </MenuItem>\n                ))}\n            </Menu>\n        </Root>\n    );\n};\n\nconst DefaultIcon = <LanguageIcon />;\nconst PREFIX = 'RaLocalesMenuButton';\n\nexport const LocalesMenuButtonClasses = {};\n\nconst Root = styled(Box, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({});\n\nexport interface LocalesMenuButtonProps {\n    icon?: ReactNode;\n    languages?: { locale: string; name: string }[];\n}\n", "import * as React from 'react';\nimport { ReactElement } from 'react';\nimport ActionList from '@mui/icons-material/List';\nimport { Link } from 'react-router-dom';\nimport { useResourceContext, useCreatePath, useCanAccess } from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\n/**\n * Opens the List view of a given resource\n *\n * @example // basic usage\n * import { ListButton } from 'react-admin';\n *\n * const CommentListButton = () => (\n *     <ListButton label=\"Comments\" />\n * );\n *\n * @example // linking back to the list from the Edit view\n * import { TopToolbar, ListButton, ShowButton, Edit } from 'react-admin';\n *\n * const PostEditActions = () => (\n *     <TopToolbar>\n *         <ListButton />\n *         <ShowButton />\n *     </TopToolbar>\n * );\n *\n * export const PostEdit = (props) => (\n *     <Edit actions={<PostEditActions />} {...props}>\n *         ...\n *     </Edit>\n * );\n */\nexport const ListButton = (props: ListButtonProps) => {\n    const {\n        icon = defaultIcon,\n        label = 'ra.action.list',\n        resource: resourceProp,\n        scrollToTop = true,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    if (!resource) {\n        throw new Error(\n            '<ListButton> components should be used inside a <Resource> component or provided the resource prop.'\n        );\n    }\n    const { canAccess, isPending } = useCanAccess({\n        action: 'list',\n        resource,\n    });\n    const createPath = useCreatePath();\n\n    if (!canAccess || isPending) {\n        return null;\n    }\n\n    return (\n        <Button\n            component={Link}\n            to={createPath({ type: 'list', resource })}\n            state={scrollStates[String(scrollToTop)]}\n            label={label}\n            {...(rest as any)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\n// avoids using useMemo to get a constant value for the link state\nconst scrollStates = {\n    true: { _scrollToTop: true },\n    false: {},\n};\n\nconst defaultIcon = <ActionList />;\n\ninterface Props {\n    icon?: ReactElement;\n    label?: string;\n    resource?: string;\n    scrollToTop?: boolean;\n}\n\nexport type ListButtonProps = Props & ButtonProps;\n", "import * as React from 'react';\nimport {\n    RaRecord,\n    useTranslate,\n    usePrevNextController,\n    UsePrevNextControllerProps,\n} from 'ra-core';\nimport NavigateBefore from '@mui/icons-material/NavigateBefore';\nimport NavigateNext from '@mui/icons-material/NavigateNext';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport { Link } from 'react-router-dom';\nimport {\n    Box,\n    Stack,\n    Typography,\n    IconButton,\n    SxProps,\n    styled,\n} from '@mui/material';\nimport clsx from 'clsx';\n\nimport { LinearProgress } from '../layout/LinearProgress';\n\n/**\n * A component used to render the previous and next buttons in a Show or Edit view.\n *\n * The `<PrevNextButtons>` component renders navigation buttons linking to\n * the next and previous records of the current resource, the current index\n * and the total number of records.\n *\n * It uses usePrevNextController to fetch the list of records.\n *\n * `<PrevNextButtons>` can be used anywhere a record context is provided\n * (often inside a `<Show>` or `<Edit>` component).\n *\n * @example <caption>navigate to edit view by default</caption>\n * <ShowButton />\n *\n * @example <caption>navigate to show view</caption>\n * <PrevNextButtons linkType=\"show\" />\n *\n * @example <caption>custom storeKey</caption>\n * <PrevNextButtons storeKey=\"listStoreKey\" />\n *\n * @example <caption>limit the number of records to fetch</caption>\n * <PrevNextButtons limit={500} />\n *\n * @example <caption>customize filters and sort order</caption>\n * <PrevNextButtons\n *     linkType=\"show\"\n *     sort={{\n *         field: 'first_name',\n *         order: 'DESC',\n *     }}\n *     filter={{ q: 'East a' }}\n * />\n *\n * @example <caption>customize style</caption>\n * <PrevNextButtons\n *     sx={{\n *         color: 'blue',\n *         '& .RaPrevNextButton-list': {\n *             marginBottom: '20px',\n *             color: 'red',\n *         },\n *     }}\n * />\n *\n * @example <caption>in an edit view</caption>\n * import * as React from \"react\";\n * import { Edit, PrevNextButtons, ShowButton, SimpleForm, TopToolbar } from 'react-admin';\n *\n * const MyTopToolbar = ({ children }) => (\n *     <TopToolbar>\n *         {children}\n *     </TopToolbar>\n * );\n *\n * export const PostEdit = () => (\n *      <Edit\n *          actions={\n *              <MyTopToolbar>\n *                  <PrevNextButtons\n *                      sort={{\n *                          field: 'first_name',\n *                          order: 'DESC',\n *                      }}\n *                      filter={{ q: 'East a' }}\n *                  />\n *                  <ShowButton />\n *              </MyTopToolbar>\n *          }\n *      >\n *          <SimpleForm>...</SimpleForm>\n *      </Edit>\n * );\n */\n\nexport const PrevNextButtons = <RecordType extends RaRecord = any>(\n    props: PrevNextButtonProps<RecordType>\n) => {\n    const { sx } = props;\n\n    const {\n        hasPrev,\n        hasNext,\n        prevPath,\n        nextPath,\n        index,\n        total,\n        error,\n        isPending,\n    } = usePrevNextController<RecordType>(props);\n\n    const translate = useTranslate();\n\n    if (isPending) {\n        return (\n            <Box minHeight={34} display=\"flex\" alignItems=\"center\">\n                <LinearProgress />\n            </Box>\n        );\n    }\n    if (error) {\n        return (\n            <ErrorIcon\n                color=\"error\"\n                fontSize=\"small\"\n                titleAccess=\"error\"\n                aria-errormessage={error.message}\n            />\n        );\n    }\n    if (!hasPrev && !hasNext) {\n        return <Box minHeight={34} />;\n    }\n\n    return (\n        <Root\n            sx={sx}\n            role=\"navigation\"\n            direction=\"row\"\n            className={clsx(PrevNextButtonClasses.root)}\n        >\n            {hasPrev && prevPath ? (\n                <IconButton\n                    component={Link}\n                    to={prevPath}\n                    aria-label={translate('ra.navigation.previous')}\n                    size=\"small\"\n                >\n                    <NavigateBefore />\n                </IconButton>\n            ) : (\n                <IconButton\n                    aria-label={translate('ra.navigation.previous')}\n                    disabled\n                    size=\"small\"\n                >\n                    <NavigateBefore />\n                </IconButton>\n            )}\n\n            {typeof index === 'number' && (\n                <Typography variant=\"body2\">\n                    {index + 1} / {total}\n                </Typography>\n            )}\n\n            {hasNext && nextPath ? (\n                <IconButton\n                    component={Link}\n                    to={nextPath}\n                    aria-label={translate('ra.navigation.next')}\n                    size=\"small\"\n                >\n                    <NavigateNext />\n                </IconButton>\n            ) : (\n                <IconButton\n                    aria-label={translate('ra.navigation.next')}\n                    disabled\n                    size=\"small\"\n                >\n                    <NavigateNext />\n                </IconButton>\n            )}\n        </Root>\n    );\n};\n\nexport interface PrevNextButtonProps<RecordType extends RaRecord = any>\n    extends UsePrevNextControllerProps<RecordType> {\n    sx?: SxProps;\n}\n\nconst PREFIX = 'RaPrevNextButton';\n\nexport const PrevNextButtonClasses = {\n    root: `${PREFIX}-root`,\n};\n\nconst Root = styled(Stack, {\n    name: PREFIX,\n    overridesResolver: (_props, styles) => styles.root,\n})({\n    display: 'inline-flex',\n    alignItems: 'center',\n    gap: '0.5em',\n});\n", "import * as React from 'react';\nimport { ReactElement, MouseEvent, useCallback } from 'react';\nimport NavigationRefresh from '@mui/icons-material/Refresh';\nimport { useRefresh } from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\nexport const RefreshButton = (props: RefreshButtonProps) => {\n    const {\n        label = 'ra.action.refresh',\n        icon = defaultIcon,\n        onClick,\n        ...rest\n    } = props;\n    const refresh = useRefresh();\n    const handleClick = useCallback(\n        event => {\n            event.preventDefault();\n            refresh();\n            if (typeof onClick === 'function') {\n                onClick(event);\n            }\n        },\n        [refresh, onClick]\n    );\n\n    return (\n        <Button label={label} onClick={handleClick} {...rest}>\n            {icon}\n        </Button>\n    );\n};\n\nconst defaultIcon = <NavigationRefresh />;\n\ninterface Props {\n    label?: string;\n    icon?: ReactElement;\n    onClick?: (e: MouseEvent) => void;\n}\n\nexport type RefreshButtonProps = Props & ButtonProps;\n", "import * as React from 'react';\nimport { useCallback, ReactElement } from 'react';\nimport Tooltip from '@mui/material/Tooltip';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport NavigationRefresh from '@mui/icons-material/Refresh';\nimport { useRefresh, useTranslate } from 'ra-core';\n\nexport const RefreshIconButton = (props: RefreshIconButtonProps) => {\n    const {\n        label = 'ra.action.refresh',\n        icon = defaultIcon,\n        onClick,\n        className,\n        ...rest\n    } = props;\n    const refresh = useRefresh();\n    const translate = useTranslate();\n    const handleClick = useCallback(\n        event => {\n            event.preventDefault();\n            refresh();\n            if (typeof onClick === 'function') {\n                onClick(event);\n            }\n        },\n        [refresh, onClick]\n    );\n\n    return (\n        <Tooltip title={label && translate(label, { _: 'Refresh' })}>\n            <IconButton\n                aria-label={label && translate(label, { _: 'Refresh' })}\n                className={className}\n                color=\"inherit\"\n                onClick={handleClick}\n                {...rest}\n            >\n                {icon}\n            </IconButton>\n        </Tooltip>\n    );\n};\n\nconst defaultIcon = <NavigationRefresh />;\n\ninterface Props {\n    className?: string;\n    icon?: ReactElement;\n    label?: string;\n    onClick?: (e: MouseEvent) => void;\n}\n\nexport type RefreshIconButtonProps = Props & IconButtonProps;\n", "import * as React from 'react';\nimport { MouseEventHandler, ReactElement, useCallback } from 'react';\nimport { UseMutationOptions } from '@tanstack/react-query';\nimport { styled } from '@mui/material/styles';\nimport { Button, ButtonProps, CircularProgress } from '@mui/material';\nimport ContentSave from '@mui/icons-material/Save';\nimport { useFormContext, useFormState } from 'react-hook-form';\nimport {\n    CreateParams,\n    RaRecord,\n    TransformData,\n    UpdateParams,\n    useSaveContext,\n    useTranslate,\n    warning,\n    setSubmissionErrors,\n} from 'ra-core';\n\n/**\n * Submit button for resource forms (Edit and Create).\n *\n * @typedef {Object} Props the props you can use (other props are injected by the <Toolbar>)\n * @prop {string} className\n * @prop {string} label Button label. Defaults to 'ra.action.save', translated.\n * @prop {boolean} disabled Disable the button.\n * @prop {string} variant Material UI variant for the button. Defaults to 'contained'.\n * @prop {ReactElement} icon\n * @prop {function} mutationOptions Object of options passed to react-query.\n * @prop {function} transform Callback to execute before calling the dataProvider. Receives the data from the form, must return that transformed data. Can be asynchronous (and return a Promise)\n * @prop {boolean} alwaysEnable Force enabling the <SaveButton>. If it's not defined, the `<SaveButton>` will be enabled using `react-hook-form`'s `isValidating` state props and form context's `saving` prop (disabled if isValidating or saving, enabled otherwise).\n *\n * @param {Props} props\n *\n * @example // with custom success side effect\n *\n * const MySaveButton = props => {\n *     const notify = useNotify();\n *     const redirect = useRedirect();\n *     const onSuccess = (response) => {\n *         notify(`Post \"${response.data.title}\" saved!`);\n *         redirect('/posts');\n *     };\n *     return <SaveButton {...props} mutationOptions={{ onSuccess }} />;\n * }\n */\nexport const SaveButton = <RecordType extends RaRecord = any>(\n    props: SaveButtonProps<RecordType>\n) => {\n    const {\n        color = 'primary',\n        icon = defaultIcon,\n        invalid,\n        label = 'ra.action.save',\n        onClick,\n        mutationOptions,\n        disabled: disabledProp,\n        type = 'submit',\n        transform,\n        variant = 'contained',\n        alwaysEnable = false,\n        ...rest\n    } = props;\n    const translate = useTranslate();\n    const form = useFormContext();\n    const saveContext = useSaveContext();\n    const { dirtyFields, isValidating, isSubmitting } = useFormState();\n    // useFormState().isDirty might differ from useFormState().dirtyFields (https://github.com/react-hook-form/react-hook-form/issues/4740)\n    const isDirty = Object.keys(dirtyFields).length > 0;\n    // Use form isDirty, isValidating and form context saving to enable or disable the save button\n    // if alwaysEnable is undefined\n    const disabled = valueOrDefault(\n        alwaysEnable === false || alwaysEnable === undefined\n            ? undefined\n            : !alwaysEnable,\n        disabledProp || !isDirty || isValidating || isSubmitting\n    );\n\n    warning(\n        type === 'submit' &&\n            ((mutationOptions &&\n                (mutationOptions.onSuccess || mutationOptions.onError)) ||\n                transform),\n        'Cannot use <SaveButton mutationOptions> props on a button of type \"submit\". To override the default mutation options on a particular save button, set the <SaveButton type=\"button\"> prop, or set mutationOptions in the main view component (<Create> or <Edit>).'\n    );\n\n    const handleSubmit = useCallback(\n        async values => {\n            let errors;\n            if (saveContext?.save) {\n                errors = await saveContext.save(values, {\n                    ...mutationOptions,\n                    transform,\n                });\n            }\n            if (errors != null) {\n                setSubmissionErrors(errors, form.setError);\n            }\n        },\n        [form.setError, saveContext, mutationOptions, transform]\n    );\n\n    const handleClick: MouseEventHandler<HTMLButtonElement> = useCallback(\n        async event => {\n            if (onClick) {\n                onClick(event);\n            }\n            if (event.defaultPrevented) {\n                return;\n            }\n            if (type === 'button') {\n                // this button doesn't submit the form, so it doesn't trigger useIsFormInvalid in <FormContent>\n                // therefore we need to check for errors manually\n                event.stopPropagation();\n                await form.handleSubmit(handleSubmit)(event);\n            }\n        },\n        [onClick, type, form, handleSubmit]\n    );\n\n    const displayedLabel = label && translate(label, { _: label });\n\n    return (\n        <StyledButton\n            variant={variant}\n            type={type}\n            color={color}\n            aria-label={displayedLabel}\n            disabled={disabled}\n            onClick={handleClick}\n            {...rest}\n        >\n            {isSubmitting ? (\n                <CircularProgress\n                    sx={circularProgressStyle}\n                    size={14}\n                    thickness={3}\n                    color=\"inherit\"\n                />\n            ) : (\n                icon\n            )}\n            {displayedLabel}\n        </StyledButton>\n    );\n};\n\nconst circularProgressStyle = {\n    '&.MuiCircularProgress-root': {\n        marginRight: '10px',\n        marginLeft: '2px',\n    },\n};\n\nconst defaultIcon = <ContentSave />;\n\ninterface Props<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown,\n> {\n    className?: string;\n    disabled?: boolean;\n    icon?: ReactElement;\n    invalid?: boolean;\n    label?: string;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        CreateParams<RecordType> | UpdateParams<RecordType>\n    >;\n    transform?: TransformData;\n    variant?: string;\n}\n\nexport type SaveButtonProps<RecordType extends RaRecord = any> =\n    Props<RecordType> &\n        ButtonProps & {\n            alwaysEnable?: boolean;\n        };\n\nconst PREFIX = 'RaSaveButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    position: 'relative',\n    [`& .MuiSvgIcon-root, & .MuiIcon-root, & .MuiCircularProgress-root`]: {\n        marginRight: theme.spacing(1),\n    },\n    [`& .MuiSvgIcon-root, & .MuiIcon-root`]: {\n        fontSize: 18,\n    },\n}));\n\nconst valueOrDefault = (value, defaultValue) =>\n    typeof value === 'undefined' ? defaultValue : value;\n", "import React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Button } from './Button';\n\nexport const SkipNavigationButton = () => {\n    return (\n        <StyledButton\n            onClick={skipToContent}\n            className={'skip-nav-button'}\n            label=\"ra.navigation.skip_nav\"\n            variant=\"contained\"\n        />\n    );\n};\n\nconst PREFIX = 'RaSkipNavigationButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    position: 'fixed',\n    padding: theme.spacing(1),\n    backgroundColor: theme.palette.background.default,\n    color: theme.palette.getContrastText(theme.palette.background.default),\n    transition: theme.transitions.create(['top', 'opacity'], {\n        easing: theme.transitions.easing.easeIn,\n        duration: theme.transitions.duration.leavingScreen,\n    }),\n    left: theme.spacing(2),\n    top: theme.spacing(-10),\n    zIndex: 5000,\n    '&:hover': {\n        opacity: 0.8,\n        backgroundColor: theme.palette.background.default,\n    },\n    '&:focus': {\n        top: theme.spacing(2),\n        transition: theme.transitions.create(['top', 'opacity'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n}));\n\nconst skipToContent = () => {\n    if (typeof document === 'undefined') return;\n    const element = document.getElementById('main-content');\n\n    if (!element) {\n        if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n                'No element with id \"main-content\" was found. Ensure the element that contains your main content has an id of \"main-content\".'\n            );\n        }\n\n        return;\n    }\n\n    element.setAttribute('tabIndex', '-1');\n    element.focus();\n    element.blur();\n    element.removeAttribute('tabIndex');\n};\n", "import * as React from 'react';\nimport { Fragment, useState, ReactElement } from 'react';\nimport ActionUpdate from '@mui/icons-material/Update';\n\nimport { alpha, styled } from '@mui/material/styles';\nimport {\n    useTranslate,\n    useNotify,\n    useResourceContext,\n    MutationMode,\n    RaRecord,\n    useRecordContext,\n    useUpdate,\n    UpdateParams,\n} from 'ra-core';\n\nimport { Confirm } from '../layout';\nimport { Button, ButtonProps } from './Button';\nimport { UseMutationOptions } from '@tanstack/react-query';\nimport { humanize, inflect } from 'inflection';\n\nexport const UpdateWithConfirmButton = (\n    props: UpdateWithConfirmButtonProps\n) => {\n    const notify = useNotify();\n    const translate = useTranslate();\n    const resource = useResourceContext(props);\n    const [isOpen, setOpen] = useState(false);\n    const record = useRecordContext(props);\n\n    const {\n        confirmTitle = 'ra.message.bulk_update_title',\n        confirmContent = 'ra.message.bulk_update_content',\n        data,\n        icon = defaultIcon,\n        label = 'ra.action.update',\n        mutationMode = 'pessimistic',\n        onClick,\n        mutationOptions = {},\n        ...rest\n    } = props;\n    const {\n        meta: mutationMeta,\n        onSuccess = () => {\n            notify(`resources.${resource}.notifications.updated`, {\n                type: 'info',\n                messageArgs: {\n                    smart_count: 1,\n                    _: translate('ra.notification.updated', { smart_count: 1 }),\n                },\n                undoable: mutationMode === 'undoable',\n            });\n        },\n        onError = (error: Error | string) => {\n            notify(\n                typeof error === 'string'\n                    ? error\n                    : error.message || 'ra.notification.http_error',\n                {\n                    type: 'error',\n                    messageArgs: {\n                        _:\n                            typeof error === 'string'\n                                ? error\n                                : error && error.message\n                                  ? error.message\n                                  : undefined,\n                    },\n                }\n            );\n        },\n        onSettled = () => {\n            setOpen(false);\n        },\n        ...otherMutationOptions\n    } = mutationOptions;\n\n    const [update, { isPending }] = useUpdate(\n        resource,\n        { id: record?.id, data, meta: mutationMeta, previousData: record },\n        {\n            onSuccess,\n            onError,\n            onSettled,\n            mutationMode,\n            ...otherMutationOptions,\n        }\n    );\n\n    const handleClick = e => {\n        setOpen(true);\n        e.stopPropagation();\n    };\n\n    const handleDialogClose = () => {\n        setOpen(false);\n    };\n\n    const handleUpdate = e => {\n        update(resource, {\n            id: record?.id,\n            data,\n            meta: mutationMeta,\n            previousData: record,\n        });\n\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <Fragment>\n            <StyledButton\n                onClick={handleClick}\n                label={label}\n                {...sanitizeRestProps(rest)}\n            >\n                {icon}\n            </StyledButton>\n            <Confirm\n                isOpen={isOpen}\n                loading={isPending}\n                title={confirmTitle}\n                content={confirmContent}\n                translateOptions={{\n                    smart_count: 1,\n                    name: translate(`resources.${resource}.forcedCaseName`, {\n                        smart_count: 1,\n                        _: humanize(\n                            translate(`resources.${resource}.name`, {\n                                smart_count: 1,\n                                _: resource ? inflect(resource, 1) : undefined,\n                            }),\n                            true\n                        ),\n                    }),\n                }}\n                onConfirm={handleUpdate}\n                onClose={handleDialogClose}\n            />\n        </Fragment>\n    );\n};\n\nconst sanitizeRestProps = ({\n    label,\n    ...rest\n}: Omit<\n    UpdateWithConfirmButtonProps,\n    'resource' | 'selectedIds' | 'icon' | 'data'\n>) => rest;\n\nexport interface UpdateWithConfirmButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown,\n> extends ButtonProps {\n    confirmContent?: React.ReactNode;\n    confirmTitle?: React.ReactNode;\n    icon?: ReactElement;\n    data: any;\n    mutationMode?: MutationMode;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        UpdateParams<RecordType>\n    > & { meta?: any };\n}\n\nconst PREFIX = 'RaUpdateWithConfirmButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.primary.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.primary.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n\nconst defaultIcon = <ActionUpdate />;\n", "import * as React from 'react';\nimport { alpha, styled } from '@mui/material/styles';\nimport { ReactElement } from 'react';\nimport ActionUpdate from '@mui/icons-material/Update';\nimport {\n    useRefresh,\n    useNotify,\n    useResourceContext,\n    RaRecord,\n    useRecordContext,\n    useUpdate,\n    UpdateParams,\n    useTranslate,\n} from 'ra-core';\nimport { UseMutationOptions } from '@tanstack/react-query';\n\nimport { Button, ButtonProps } from './Button';\n\nexport const UpdateWithUndoButton = (props: UpdateWithUndoButtonProps) => {\n    const record = useRecordContext(props);\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const refresh = useRefresh();\n    const translate = useTranslate();\n\n    const {\n        data,\n        label = 'ra.action.update',\n        icon = defaultIcon,\n        onClick,\n        mutationOptions = {},\n        ...rest\n    } = props;\n\n    const [updateMany, { isPending }] = useUpdate();\n\n    const {\n        meta: mutationMeta,\n        onSuccess = () => {\n            notify(`resources.${resource}.notifications.updated`, {\n                type: 'info',\n                messageArgs: {\n                    smart_count: 1,\n                    _: translate('ra.notification.updated', { smart_count: 1 }),\n                },\n                undoable: true,\n            });\n        },\n        onError = (error: Error | string) => {\n            notify(\n                typeof error === 'string'\n                    ? error\n                    : error.message || 'ra.notification.http_error',\n                {\n                    type: 'error',\n                    messageArgs: {\n                        _:\n                            typeof error === 'string'\n                                ? error\n                                : error && error.message\n                                  ? error.message\n                                  : undefined,\n                    },\n                }\n            );\n            refresh();\n        },\n        ...otherMutationOptions\n    } = mutationOptions;\n\n    const handleClick = e => {\n        if (!record) {\n            throw new Error(\n                'The UpdateWithUndoButton must be used inside a RecordContext.Provider or must be passed a record prop.'\n            );\n        }\n        updateMany(\n            resource,\n            { id: record.id, data, meta: mutationMeta, previousData: record },\n            {\n                onSuccess,\n                onError,\n                mutationMode: 'undoable',\n                ...otherMutationOptions,\n            }\n        );\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n        e.stopPropagation();\n    };\n\n    return (\n        <StyledButton\n            onClick={handleClick}\n            label={label}\n            disabled={isPending}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </StyledButton>\n    );\n};\n\nconst defaultIcon = <ActionUpdate />;\n\nconst sanitizeRestProps = ({\n    label,\n    ...rest\n}: Omit<UpdateWithUndoButtonProps, 'resource' | 'icon' | 'data'>) => rest;\n\nexport interface UpdateWithUndoButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown,\n> extends ButtonProps {\n    icon?: ReactElement;\n    data: any;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        UpdateParams<RecordType>\n    > & { meta?: any };\n}\n\nconst PREFIX = 'RaUpdateWithUndoButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.primary.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.primary.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n", "import * as React from 'react';\nimport {\n    UpdateWithConfirmButton,\n    UpdateWithConfirmButtonProps,\n} from './UpdateWithConfirmButton';\nimport {\n    UpdateWithUndoButton,\n    UpdateWithUndoButtonProps,\n} from './UpdateWithUndoButton';\n\n/**\n * Updates the current record.\n *\n * To be used inside the <Edit actions> prop or <Show actions> prop.\n *\n * @example // basic usage\n * import * as React from 'react';\n * import { Edit, TopToolbar, UpdateButton } from 'react-admin';\n *\n * const PostEditActions = () => (\n *     <TopToolbar>\n *         <UpdateButton label=\"Reset Views\" data={{ views: 0 }} />\n *     </TopToolbar>\n * );\n *\n * export const PostEdit = () => (\n *     <Edit actions={<PostEditActions />}>\n *         ...\n *     </Edit>\n * );\n */\nexport const UpdateButton = (props: UpdateButtonProps) => {\n    const { mutationMode = 'undoable', ...rest } = props;\n\n    return mutationMode === 'undoable' ? (\n        <UpdateWithUndoButton {...rest} />\n    ) : (\n        <UpdateWithConfirmButton mutationMode={mutationMode} {...rest} />\n    );\n};\n\nexport type UpdateButtonProps =\n    | ({\n          mutationMode?: 'undoable';\n      } & UpdateWithUndoButtonProps)\n    | ({\n          mutationMode?: 'pessimistic' | 'optimistic';\n      } & UpdateWithConfirmButtonProps);\n"],
  "mappings": "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",
  "names": ["import_jsx_runtime", "Queue", "import_jsx_runtime", "defaultIcon", "merge", "getLinkParams", "StyledButton", "ContentAdd", "PREFIX", "isEqual", "import_react", "import_jsx_runtime", "defaultIcon", "scrollStates", "stopPropagation", "ImageEye", "React", "import_react", "import_jsx_runtime", "defaultIcon", "ArrowDropDownIcon", "SortIcon", "PREFIX", "import_react", "import_jsx_runtime", "PREFIX", "Root", "LockIcon", "import_react", "import_jsx_runtime", "MenuIcon", "PREFIX", "import_jsx_runtime", "Root", "PREFIX", "import_react", "React", "import_react", "import_jsx_runtime", "Logout", "ExitIcon", "PREFIX", "import_react", "import_jsx_runtime", "import_jsx_runtime", "defaultIcon", "Root", "PREFIX", "AccountCircle", "import_jsx_runtime", "import_jsx_runtime", "import_react", "import_react", "useTheme", "import_react", "import_jsx_runtime", "theme", "componentsOverrides", "alert", "darkPalette", "lightPalette", "componentsOverrides", "alert", "darkPalette", "lightPalette", "import_jsx_runtime", "useTheme", "Brightness7Icon", "Brightness4Icon", "import_jsx_runtime", "PREFIX", "React", "import_jsx_runtime", "ButtonProps", "import_react", "import_jsx_runtime", "import_react", "import_jsx_runtime", "PREFIX", "Root", "React", "import_jsx_runtime", "Root", "import_jsx_runtime", "import_react", "import_jsx_runtime", "import_jsx_runtime", "version", "DeleteIcon", "CloseIcon", "PREFIX", "React", "import_Settings", "import_jsx_runtime", "SettingsIcon", "import_jsx_runtime", "import_jsx_runtime", "import_jsx_runtime", "PREFIX", "Root", "DEFAULT_ICON", "WarningAmber", "import_jsx_runtime", "PREFIX", "Root", "import_jsx_runtime", "import_react", "import_jsx_runtime", "ActionCheck", "AlertError", "PREFIX", "import_react", "import_jsx_runtime", "StyledMenuItem", "PREFIX", "import_jsx_runtime", "DashboardIcon", "import_jsx_runtime", "import_react", "import_jsx_runtime", "PREFIX", "Root", "import_react", "import_jsx_runtime", "PREFIX", "lodashGet", "import_get", "import_react", "import_jsx_runtime", "DefaultIcon", "import_jsx_runtime", "import_jsx_runtime", "Root", "PREFIX", "lodashGet", "import_jsx_runtime", "PREFIX", "Root", "import_jsx_runtime", "PREFIX", "import_jsx_runtime", "PREFIX", "import_jsx_runtime", "import_History", "import_jsx_runtime", "PREFIX", "Root", "React", "import_react", "import_jsx_runtime", "PREFIX", "import_jsx_runtime", "PREFIX", "import_react", "import_jsx_runtime", "defaultIcon", "StyledButton", "sanitizeRestProps", "PREFIX", "ActionDelete", "import_Delete", "import_jsx_runtime", "defaultIcon", "StyledButton", "sanitizeRestProps", "ActionDelete", "PREFIX", "import_jsx_runtime", "import_react", "import_jsx_runtime", "defaultIcon", "sanitizeRestProps", "DownloadIcon", "import_react", "import_inflection", "import_jsx_runtime", "defaultIcon", "StyledButton", "sanitizeRestProps", "PREFIX", "ActionUpdate", "import_Update", "import_jsx_runtime", "defaultIcon", "StyledButton", "sanitizeRestProps", "ActionUpdate", "PREFIX", "import_jsx_runtime", "import_Delete", "import_jsx_runtime", "defaultIcon", "ActionDelete", "import_react", "import_Delete", "import_inflection", "import_jsx_runtime", "defaultIcon", "ActionDelete", "import_jsx_runtime", "import_jsx_runtime", "defaultIcon", "StyledButton", "scrollStates", "stopPropagation", "ContentCreate", "PREFIX", "import_react", "import_GetApp", "import_jsx_runtime", "defaultIcon", "sanitizeRestProps", "DownloadIcon", "React", "import_jsx_runtime", "import_react", "import_ExpandMore", "import_jsx_runtime", "DefaultIcon", "locale", "language", "Root", "ExpandMoreIcon", "LanguageIcon", "PREFIX", "import_jsx_runtime", "defaultIcon", "scrollStates", "ActionList", "import_Error", "import_jsx_runtime", "ErrorIcon", "Root", "NavigateBefore", "NavigateNext", "PREFIX", "import_react", "import_jsx_runtime", "defaultIcon", "NavigationRefresh", "import_react", "import_Refresh", "import_jsx_runtime", "defaultIcon", "NavigationRefresh", "import_react", "import_jsx_runtime", "defaultIcon", "StyledButton", "ContentSave", "PREFIX", "import_jsx_runtime", "StyledButton", "PREFIX", "import_react", "import_Update", "import_inflection", "import_jsx_runtime", "defaultIcon", "StyledButton", "sanitizeRestProps", "PREFIX", "ActionUpdate", "import_Update", "import_jsx_runtime", "defaultIcon", "StyledButton", "sanitizeRestProps", "ActionUpdate", "PREFIX", "import_jsx_runtime"]
}
