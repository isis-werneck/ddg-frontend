import {
  PreferenceKeyContextProvider,
  fetchRelatedRecords,
  require_AccountCircle,
  require_Add,
  require_ArrowDropDown,
  require_Brightness4,
  require_Brightness7,
  require_CancelOutlined,
  require_CheckCircle,
  require_Create,
  require_Dashboard,
  require_Delete,
  require_DeleteOutline,
  require_DragIndicator,
  require_Error,
  require_ErrorOutline,
  require_ExpandMore,
  require_GetApp,
  require_History,
  require_HotTub,
  require_List,
  require_Lock,
  require_Menu,
  require_NavigateBefore,
  require_NavigateNext,
  require_PowerSettingsNew,
  require_Queue,
  require_Refresh,
  require_RemoveRedEye,
  require_Report,
  require_Save,
  require_Settings,
  require_Sort,
  require_Translate,
  require_Update,
  require_ViewList,
  require_WarningAmber,
  require_css_mediaquery,
  require_get,
  require_inflection,
  require_isEqual,
  require_merge,
  require_query_string,
  setSubmissionErrors,
  shallowEqual,
  useAuthProvider_default,
  useAuthState_default,
  useBasename,
  useCanAccess,
  useCreatePath,
  useDataProvider,
  useDeleteMany,
  useDeleteWithConfirmController_default,
  useDeleteWithUndoController_default,
  useGetIdentity,
  useGetResourceLabel,
  useHasDashboard,
  useListContext,
  useListSortContext,
  useLoading,
  useLocaleState,
  useLocales,
  useLogout_default,
  useNotify,
  usePreferencesEditor,
  usePrevNextController,
  useRecordContext,
  useRefresh,
  useRemoveItemsFromStore,
  useResourceContext,
  useResourceDefinitions,
  useSafeSetState,
  useSaveContext,
  useSetInspectorTitle,
  useStore,
  useTimeout,
  useTranslate,
  useTranslateLabel,
  useUnselectAll,
  useUpdate,
  useUpdateMany,
  warning_default
} from "./chunk-7XKTCTAG.js";
import {
  useFormContext,
  useFormState
} from "./chunk-4HT3YCKZ.js";
import {
  Link,
  useMatch
} from "./chunk-IOMFACPP.js";
import "./chunk-CZVV7UDY.js";
import {
  Alert_default,
  AppBar_default,
  Avatar_default,
  Box_default,
  CardContent_default,
  CircularProgress_default,
  DialogContentText_default,
  DialogTitle_default,
  Drawer_default,
  Fab_default,
  LinearProgress_default,
  Slide_default,
  Snackbar_default,
  Stack_default,
  Toolbar_default,
  Tooltip_default,
  useScrollTrigger
} from "./chunk-VT2BCI43.js";
import {
  Button_default,
  DialogActions_default,
  DialogContent_default,
  Dialog_default,
  ListItemIcon_default,
  ListItemText_default,
  MenuItem_default
} from "./chunk-5GFOAYMS.js";
import "./chunk-P54YSDAW.js";
import {
  IconButton_default,
  MenuList_default,
  Menu_default,
  Paper_default,
  Typography_default,
  alpha,
  darken,
  useMediaQuery,
  useTheme,
  useThemeProps
} from "./chunk-JTBHIBOX.js";
import {
  createTheme_default2 as createTheme_default,
  styled_default
} from "./chunk-HFPPQGHU.js";
import {
  require_react_dom
} from "./chunk-276SZO74.js";
import {
  require_jsx_runtime
} from "./chunk-CRNJR6QK.js";
import {
  clsx_default,
  deepmerge,
  init_clsx,
  init_esm
} from "./chunk-CFMGK5OC.js";
import "./chunk-QZVMM6GT.js";
import {
  require_react
} from "./chunk-ZMLY2J2T.js";
import {
  __toESM
} from "./chunk-4B2QHNJT.js";

// node_modules/ra-ui-materialui/src/button/CloneButton.tsx
var import_react = __toESM(require_react());
var import_Queue = __toESM(require_Queue());
var import_query_string = __toESM(require_query_string());

// node_modules/ra-ui-materialui/src/button/Button.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var Button = (inProps) => {
  const props = useThemeProps({ props: inProps, name: "RaButton" });
  const {
    alignIcon = "left",
    children,
    className,
    disabled,
    label,
    color = "primary",
    size = "small",
    to: locationDescriptor,
    ...rest
  } = props;
  const translate = useTranslate();
  const translatedLabel = label ? translate(label, { _: label }) : void 0;
  const linkParams = getLinkParams(locationDescriptor);
  const isXSmall = useMediaQuery(
    (theme) => theme.breakpoints.down("sm")
  );
  return isXSmall ? label && !disabled ? (0, import_jsx_runtime.jsx)(Tooltip_default, { title: translatedLabel, children: (0, import_jsx_runtime.jsx)(
    IconButton_default,
    {
      "aria-label": translatedLabel,
      className,
      color,
      size: "large",
      ...linkParams,
      ...rest,
      children
    }
  ) }) : (0, import_jsx_runtime.jsx)(
    IconButton_default,
    {
      className,
      color,
      disabled,
      size: "large",
      ...linkParams,
      ...rest,
      children
    }
  ) : (0, import_jsx_runtime.jsx)(
    StyledButton,
    {
      className,
      color,
      size,
      "aria-label": translatedLabel,
      disabled,
      startIcon: alignIcon === "left" && children ? children : void 0,
      endIcon: alignIcon === "right" && children ? children : void 0,
      ...linkParams,
      ...rest,
      children: translatedLabel
    }
  );
};
var PREFIX = "RaButton";
var StyledButton = styled_default(Button_default, {
  name: PREFIX,
  overridesResolver: (props, styles) => styles.root
})({
  "&.MuiButton-sizeSmall": {
    // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240
    lineHeight: 1.5
  }
});
var getLinkParams = (locationDescriptor) => {
  if (locationDescriptor == void 0) {
    return void 0;
  }
  if (typeof locationDescriptor === "string") {
    return { to: locationDescriptor };
  }
  const { redirect, replace, state, ...to } = locationDescriptor;
  return {
    to,
    redirect,
    replace,
    state
  };
};

// node_modules/ra-ui-materialui/src/button/CloneButton.tsx
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var CloneButton = (props) => {
  const {
    label = "ra.action.clone",
    scrollToTop = true,
    icon = defaultIcon,
    ...rest
  } = props;
  const resource = useResourceContext(props);
  const record = useRecordContext(props);
  const createPath = useCreatePath();
  const pathname = createPath({ resource, type: "create" });
  return (0, import_jsx_runtime2.jsx)(
    Button,
    {
      component: Link,
      to: record ? {
        pathname,
        search: (0, import_query_string.stringify)({
          source: JSON.stringify(omitId(record))
        })
      } : pathname,
      state: { _scrollToTop: scrollToTop },
      label,
      onClick: stopPropagation,
      ...sanitizeRestProps(rest),
      children: icon
    }
  );
};
var defaultIcon = (0, import_jsx_runtime2.jsx)(import_Queue.default, {});
var stopPropagation = (e) => e.stopPropagation();
var omitId = ({ id, ...rest }) => rest;
var sanitizeRestProps = ({
  resource,
  record,
  ...rest
}) => rest;
var CloneButton_default = (0, import_react.memo)(CloneButton);

// node_modules/ra-ui-materialui/src/button/CreateButton.tsx
var React = __toESM(require_react());
var import_Add = __toESM(require_Add());
init_clsx();
var import_isEqual = __toESM(require_isEqual());
var import_merge = __toESM(require_merge());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var CreateButton = (props) => {
  const {
    className,
    icon = defaultIcon2,
    label = "ra.action.create",
    resource: resourceProp,
    scrollToTop = true,
    variant,
    to: locationDescriptor,
    state: initialState = {},
    ...rest
  } = props;
  const resource = useResourceContext(props);
  if (!resource) {
    throw new Error(
      "<CreateButton> components should be used inside a <Resource> component or provided the resource prop."
    );
  }
  const { canAccess, isPending } = useCanAccess({
    action: "create",
    resource
  });
  const createPath = useCreatePath();
  const translate = useTranslate();
  const isSmall = useMediaQuery(
    (theme) => theme.breakpoints.down("md")
  );
  const state = (0, import_merge.default)(
    {},
    scrollStates.get(String(scrollToTop)),
    initialState
  );
  const linkParams = getLinkParams2(locationDescriptor);
  if (!canAccess || isPending) {
    return null;
  }
  return isSmall ? (0, import_jsx_runtime3.jsx)(
    StyledFab,
    {
      component: Link,
      to: createPath({ resource, type: "create" }),
      state,
      color: "primary",
      className: clsx_default(CreateButtonClasses.floating, className),
      "aria-label": label && translate(label),
      ...rest,
      ...linkParams,
      children: icon
    }
  ) : (0, import_jsx_runtime3.jsx)(
    StyledButton2,
    {
      component: Link,
      to: createPath({ resource, type: "create" }),
      state,
      className: clsx_default(CreateButtonClasses.root, className),
      label,
      variant,
      ...rest,
      ...linkParams,
      children: icon
    }
  );
};
var scrollStates = /* @__PURE__ */ new Map([
  ["true", { _scrollToTop: true }],
  ["false", {}]
]);
var defaultIcon2 = (0, import_jsx_runtime3.jsx)(import_Add.default, {});
var PREFIX2 = "RaCreateButton";
var CreateButtonClasses = {
  root: `${PREFIX2}-root`,
  floating: `${PREFIX2}-floating`
};
var StyledFab = styled_default(Fab_default, {
  name: PREFIX2,
  overridesResolver: (_props, styles) => styles.root
})(({ theme }) => ({
  [`&.${CreateButtonClasses.floating}`]: {
    color: theme.palette.getContrastText(theme.palette.primary.main),
    margin: 0,
    top: "auto",
    right: 20,
    bottom: 60,
    left: "auto",
    position: "fixed",
    zIndex: 1e3
  }
}));
var StyledButton2 = styled_default(Button, {
  name: PREFIX2,
  overridesResolver: (_props, styles) => styles.root
})({});
var CreateButton_default = React.memo(CreateButton, (prevProps, nextProps) => {
  return prevProps.resource === nextProps.resource && prevProps.label === nextProps.label && prevProps.translate === nextProps.translate && prevProps.disabled === nextProps.disabled && (0, import_isEqual.default)(prevProps.to, nextProps.to) && (0, import_isEqual.default)(prevProps.state, nextProps.state);
});
var getLinkParams2 = (locationDescriptor) => {
  if (locationDescriptor == void 0) {
    return void 0;
  }
  if (typeof locationDescriptor === "string") {
    return { to: locationDescriptor };
  }
  const { redirect, replace, state, ...to } = locationDescriptor;
  return {
    to,
    redirect,
    replace,
    state
  };
};

// node_modules/ra-ui-materialui/src/button/ShowButton.tsx
var import_react2 = __toESM(require_react());
var import_RemoveRedEye = __toESM(require_RemoveRedEye());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var ShowButton = (props) => {
  const {
    icon = defaultIcon3,
    label = "ra.action.show",
    record: recordProp,
    resource: resourceProp,
    scrollToTop = true,
    ...rest
  } = props;
  const resource = useResourceContext(props);
  if (!resource) {
    throw new Error(
      "<ShowButton> components should be used inside a <Resource> component or provided the resource prop."
    );
  }
  const record = useRecordContext(props);
  const createPath = useCreatePath();
  const { canAccess, isPending } = useCanAccess({
    action: "show",
    resource,
    record
  });
  if (!record || !canAccess || isPending) return null;
  return (0, import_jsx_runtime4.jsx)(
    Button,
    {
      component: Link,
      to: createPath({ type: "show", resource, id: record.id }),
      state: scrollStates2[String(scrollToTop)],
      label,
      onClick: stopPropagation2,
      ...rest,
      children: icon
    }
  );
};
var scrollStates2 = {
  true: { _scrollToTop: true },
  false: {}
};
var defaultIcon3 = (0, import_jsx_runtime4.jsx)(import_RemoveRedEye.default, {});
var stopPropagation2 = (e) => e.stopPropagation();
var PureShowButton = (0, import_react2.memo)(
  ShowButton,
  (prevProps, nextProps) => prevProps.resource === nextProps.resource && (prevProps.record && nextProps.record ? prevProps.record.id === nextProps.record.id : prevProps.record == nextProps.record) && // eslint-disable-line eqeqeq
  prevProps.label === nextProps.label && prevProps.disabled === nextProps.disabled
);
var ShowButton_default = PureShowButton;

// node_modules/ra-ui-materialui/src/button/SortButton.tsx
var React2 = __toESM(require_react());
var import_react3 = __toESM(require_react());
init_clsx();
var import_Sort = __toESM(require_Sort());
var import_ArrowDropDown = __toESM(require_ArrowDropDown());
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var SortButton = (props) => {
  const {
    fields,
    label = "ra.sort.sort_by",
    icon = defaultIcon4,
    sx,
    className,
    resource: resourceProp
  } = props;
  const {
    resource: resourceFromContext,
    sort,
    setSort
  } = useListSortContext();
  const resource = resourceProp || resourceFromContext;
  const translate = useTranslate();
  const translateLabel = useTranslateLabel();
  const isXSmall = useMediaQuery(
    (theme) => theme.breakpoints.down("sm")
  );
  const [anchorEl, setAnchorEl] = React2.useState(null);
  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  const handleChangeSort = (event) => {
    const field = event.currentTarget.dataset.sort;
    if (!field) {
      throw new Error(
        "<SortButton> MenuItems should have a data-sort attribute"
      );
    }
    setSort({
      field,
      order: field === sort.field ? inverseOrder(sort.order) : "ASC"
    });
    setAnchorEl(null);
  };
  const buttonLabel = translate(label, {
    field: translateLabel({
      resource,
      source: sort.field
    }),
    order: translate(`ra.sort.${sort.order}`),
    _: label
  });
  return (0, import_jsx_runtime5.jsxs)(Root, { sx, className: clsx_default(className, classNames.root), children: [
    isXSmall ? (0, import_jsx_runtime5.jsx)(Tooltip_default, { title: buttonLabel, children: (0, import_jsx_runtime5.jsx)(
      IconButton_default,
      {
        "aria-label": buttonLabel,
        color: "primary",
        onClick: handleClick,
        size: "large",
        children: icon
      }
    ) }) : (0, import_jsx_runtime5.jsx)(
      Button_default,
      {
        "aria-controls": "simple-menu",
        "aria-haspopup": "true",
        color: "primary",
        onClick: handleClick,
        startIcon: icon,
        endIcon: (0, import_jsx_runtime5.jsx)(import_ArrowDropDown.default, {}),
        size: "small",
        children: buttonLabel
      }
    ),
    (0, import_jsx_runtime5.jsx)(
      Menu_default,
      {
        id: "simple-menu",
        anchorEl,
        keepMounted: true,
        open: Boolean(anchorEl),
        onClose: handleClose,
        children: fields.map((field) => (0, import_jsx_runtime5.jsxs)(
          MenuItem_default,
          {
            onClick: handleChangeSort,
            "data-sort": field,
            children: [
              translateLabel({
                resource,
                source: field
              }),
              " ",
              translate(
                `ra.sort.${sort.field === field ? inverseOrder(sort.order) : "ASC"}`
              )
            ]
          },
          field
        ))
      }
    )
  ] });
};
var defaultIcon4 = (0, import_jsx_runtime5.jsx)(import_Sort.default, {});
var inverseOrder = (sort) => sort === "ASC" ? "DESC" : "ASC";
var arePropsEqual = (prevProps, nextProps) => shallowEqual(prevProps.fields, nextProps.fields);
var PREFIX3 = "RaSortButton";
var classNames = {
  root: `${PREFIX3}-root`
};
var Root = styled_default("span", {
  name: PREFIX3,
  overridesResolver: (props, styles) => styles.root
})({
  [`.${classNames.root}`]: {},
  "& .MuiButton-sizeSmall": {
    // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240
    lineHeight: 1.5
  },
  "& .MuiButton-endIcon": { ml: 0 }
});
var SortButton_default = (0, import_react3.memo)(SortButton, arePropsEqual);

// node_modules/ra-ui-materialui/src/button/BulkDeleteWithConfirmButton.tsx
var import_react21 = __toESM(require_react());
var import_Delete = __toESM(require_Delete());

// node_modules/ra-ui-materialui/src/layout/AccessDenied.tsx
var import_Lock = __toESM(require_Lock());
init_clsx();
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var PREFIX4 = "RaAccessDenied";
var AccessDeniedClasses = {
  root: `${PREFIX4}-root`,
  icon: `${PREFIX4}-icon`,
  message: `${PREFIX4}-message`
};
var Root2 = styled_default("div", {
  name: PREFIX4,
  overridesResolver: (props, styles) => styles.root
})({
  display: "flex",
  flexDirection: "column",
  justifyContent: "center",
  alignItems: "center",
  height: "100%",
  [`& .${AccessDeniedClasses.message}`]: {
    textAlign: "center",
    paddingTop: "1em",
    paddingBottom: "1em",
    opacity: 0.5
  },
  [`& .${AccessDeniedClasses.icon}`]: {
    width: "9em",
    height: "9em"
  }
});
var DEFAULT_ICON = (0, import_jsx_runtime6.jsx)(import_Lock.default, { className: AccessDeniedClasses.icon });

// node_modules/ra-ui-materialui/src/layout/AppBar.tsx
var import_react10 = __toESM(require_react());

// node_modules/ra-ui-materialui/src/layout/SidebarToggleButton.tsx
var import_Menu = __toESM(require_Menu());

// node_modules/ra-ui-materialui/src/layout/useSidebarState.ts
var useSidebarState = () => {
  const isXSmall = useMediaQuery(
    (theme) => theme == null ? void 0 : theme.breakpoints.down("sm"),
    { noSsr: true }
  );
  return useStore("sidebar.open", isXSmall ? false : true);
};

// node_modules/ra-ui-materialui/src/layout/SidebarToggleButton.tsx
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var SidebarToggleButton = (props) => {
  const translate = useTranslate();
  const { className } = props;
  const [open, setOpen] = useSidebarState();
  return (0, import_jsx_runtime7.jsx)(
    Tooltip_default,
    {
      className,
      title: translate(
        open ? "ra.action.close_menu" : "ra.action.open_menu",
        { _: "Open/Close menu" }
      ),
      enterDelay: 500,
      children: (0, import_jsx_runtime7.jsx)(StyledIconButton, { color: "inherit", onClick: () => setOpen(!open), children: (0, import_jsx_runtime7.jsx)(
        import_Menu.default,
        {
          classes: {
            root: open ? SidebarToggleButtonClasses.menuButtonIconOpen : SidebarToggleButtonClasses.menuButtonIconClosed
          }
        }
      ) })
    }
  );
};
var PREFIX5 = "RaSidebarToggleButton";
var SidebarToggleButtonClasses = {
  menuButtonIconClosed: `${PREFIX5}-menuButtonIconClosed`,
  menuButtonIconOpen: `${PREFIX5}-menuButtonIconOpen`
};
var StyledIconButton = styled_default(IconButton_default, {
  name: PREFIX5,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  [`& .${SidebarToggleButtonClasses.menuButtonIconClosed}`]: {
    transition: theme.transitions.create(["transform"], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen
    }),
    transform: "rotate(0deg)"
  },
  [`& .${SidebarToggleButtonClasses.menuButtonIconOpen}`]: {
    transition: theme.transitions.create(["transform"], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen
    }),
    transform: "rotate(180deg)"
  }
}));

// node_modules/ra-ui-materialui/src/layout/LoadingIndicator.tsx
init_clsx();
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var LoadingIndicator = (props) => {
  const { className, onClick, sx, ...rest } = props;
  const loading = useLoading();
  const theme = useTheme();
  return (0, import_jsx_runtime8.jsxs)(Root3, { className, sx, children: [
    (0, import_jsx_runtime8.jsx)(
      RefreshIconButton,
      {
        className: `${LoadingIndicatorClasses.loadedIcon} ${loading && LoadingIndicatorClasses.loadedLoading}`,
        onClick
      }
    ),
    loading && (0, import_jsx_runtime8.jsx)(
      CircularProgress_default,
      {
        className: clsx_default(
          "app-loader",
          LoadingIndicatorClasses.loader
        ),
        color: "inherit",
        size: theme.spacing(2),
        thickness: 6,
        ...rest
      }
    )
  ] });
};
var PREFIX6 = "RaLoadingIndicator";
var LoadingIndicatorClasses = {
  loader: `${PREFIX6}-loader`,
  loadedLoading: `${PREFIX6}-loadedLoading`,
  loadedIcon: `${PREFIX6}-loadedIcon`
};
var Root3 = styled_default("div", {
  name: PREFIX6,
  overridesResolver: (_, styles) => styles.root
})({
  position: "relative",
  [`& .${LoadingIndicatorClasses.loadedIcon}`]: {
    [`&.${LoadingIndicatorClasses.loadedLoading}`]: {
      opacity: 0
    }
  },
  [`& .${LoadingIndicatorClasses.loader}`]: {
    position: "absolute",
    top: "30%",
    left: "30%"
  }
});

// node_modules/ra-ui-materialui/src/layout/UserMenu.tsx
var import_AccountCircle = __toESM(require_AccountCircle());
var import_react6 = __toESM(require_react());

// node_modules/ra-ui-materialui/src/auth/Logout.tsx
var React3 = __toESM(require_react());
var import_react4 = __toESM(require_react());
var import_PowerSettingsNew = __toESM(require_PowerSettingsNew());
init_clsx();
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var Logout = React3.forwardRef(
  function Logout2(props, ref) {
    const { className, redirectTo, icon, ...rest } = props;
    const { authenticated } = useAuthState_default();
    const isXSmall = useMediaQuery(
      (theme) => theme.breakpoints.down("sm")
    );
    const translate = useTranslate();
    const logout = useLogout_default();
    const handleClick = (0, import_react4.useCallback)(
      () => logout(null, redirectTo, false),
      [redirectTo, logout]
    );
    if (!authenticated) return null;
    return (0, import_jsx_runtime9.jsxs)(
      StyledMenuItem,
      {
        className: clsx_default("logout", className),
        onClick: handleClick,
        ref,
        component: isXSmall ? "span" : "li",
        ...rest,
        children: [
          (0, import_jsx_runtime9.jsx)(ListItemIcon_default, { className: LogoutClasses.icon, children: icon ? icon : (0, import_jsx_runtime9.jsx)(import_PowerSettingsNew.default, { fontSize: "small" }) }),
          (0, import_jsx_runtime9.jsx)(ListItemText_default, { children: translate("ra.auth.logout", { _: "Logout" }) })
        ]
      }
    );
  }
);
var PREFIX7 = "RaLogout";
var LogoutClasses = {
  icon: `${PREFIX7}-icon`
};
var StyledMenuItem = styled_default(MenuItem_default, {
  name: PREFIX7,
  overridesResolver: (props, styles) => styles.root
})({
  [`& .${LogoutClasses.icon}`]: {}
});

// node_modules/ra-ui-materialui/src/layout/UserMenuContext.ts
var import_react5 = __toESM(require_react());
var UserMenuContext = (0, import_react5.createContext)(
  void 0
);

// node_modules/ra-ui-materialui/src/layout/UserMenuContextProvider.tsx
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var UserMenuContextProvider = ({ children, value }) => (0, import_jsx_runtime10.jsx)(UserMenuContext.Provider, { value, children });

// node_modules/ra-ui-materialui/src/layout/UserMenu.tsx
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var UserMenu = (props) => {
  const [anchorEl, setAnchorEl] = (0, import_react6.useState)(null);
  const translate = useTranslate();
  const { isPending, identity } = useGetIdentity();
  const authProvider = useAuthProvider_default();
  const isLargeEnough = useMediaQuery(
    (theme) => theme.breakpoints.up("sm")
  );
  const {
    children = !!authProvider ? (0, import_jsx_runtime11.jsx)(Logout, {}) : null,
    className,
    label = "ra.auth.user_menu",
    icon = defaultIcon5
  } = props;
  const handleMenu = (event) => setAnchorEl(event.currentTarget);
  const handleClose = (0, import_react6.useCallback)(() => setAnchorEl(null), []);
  const context = (0, import_react6.useMemo)(() => ({ onClose: handleClose }), [handleClose]);
  if (!children) return null;
  const open = Boolean(anchorEl);
  return (0, import_jsx_runtime11.jsxs)(Root4, { className, children: [
    isLargeEnough && !isPending && (identity == null ? void 0 : identity.fullName) ? (0, import_jsx_runtime11.jsx)(
      Button_default,
      {
        "aria-label": label && translate(label, { _: label }),
        className: UserMenuClasses.userButton,
        color: "inherit",
        startIcon: identity.avatar ? (0, import_jsx_runtime11.jsx)(
          Avatar_default,
          {
            className: UserMenuClasses.avatar,
            src: identity.avatar,
            alt: identity.fullName
          }
        ) : icon,
        onClick: handleMenu,
        variant: "text",
        children: identity.fullName
      }
    ) : (0, import_jsx_runtime11.jsx)(Tooltip_default, { title: label && translate(label, { _: "Profile" }), children: (0, import_jsx_runtime11.jsx)(
      IconButton_default,
      {
        "aria-label": label && translate(label, { _: "Profile" }),
        "aria-owns": open ? "menu-appbar" : void 0,
        "aria-haspopup": true,
        color: "inherit",
        onClick: handleMenu,
        children: !isPending && (identity == null ? void 0 : identity.avatar) ? (0, import_jsx_runtime11.jsx)(
          Avatar_default,
          {
            className: UserMenuClasses.avatar,
            src: identity.avatar,
            alt: identity.fullName
          }
        ) : icon
      }
    ) }),
    (0, import_jsx_runtime11.jsx)(UserMenuContextProvider, { value: context, children: (0, import_jsx_runtime11.jsx)(
      Menu_default,
      {
        id: "menu-appbar",
        disableScrollLock: true,
        anchorEl,
        anchorOrigin: AnchorOrigin,
        transformOrigin: TransformOrigin,
        open,
        onClose: handleClose,
        children
      }
    ) })
  ] });
};
var PREFIX8 = "RaUserMenu";
var UserMenuClasses = {
  userButton: `${PREFIX8}-userButton`,
  avatar: `${PREFIX8}-avatar`
};
var Root4 = styled_default("div", {
  name: PREFIX8,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  [`& .${UserMenuClasses.userButton}`]: {
    textTransform: "none",
    marginInlineStart: theme.spacing(0.5)
  },
  [`& .${UserMenuClasses.avatar}`]: {
    width: theme.spacing(3),
    height: theme.spacing(3)
  }
}));
var defaultIcon5 = (0, import_jsx_runtime11.jsx)(import_AccountCircle.default, {});
var AnchorOrigin = {
  vertical: "bottom",
  horizontal: "right"
};
var TransformOrigin = {
  vertical: "top",
  horizontal: "right"
};

// node_modules/ra-ui-materialui/src/layout/HideOnScroll.tsx
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var HideOnScroll = (props) => {
  const { children, className } = props;
  const trigger = useScrollTrigger();
  return (0, import_jsx_runtime12.jsx)(
    Slide_default,
    {
      appear: false,
      direction: "down",
      in: !trigger,
      className,
      children
    }
  );
};

// node_modules/ra-ui-materialui/src/layout/TitlePortal.tsx
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var TitlePortal = (props) => (0, import_jsx_runtime13.jsx)(
  Typography_default,
  {
    flex: "1",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    overflow: "hidden",
    variant: "h6",
    color: "inherit",
    id: "react-admin-title",
    ...props
  }
);

// node_modules/ra-ui-materialui/src/theme/useThemesContext.ts
var import_react8 = __toESM(require_react());

// node_modules/ra-ui-materialui/src/theme/ThemesContext.ts
var import_react7 = __toESM(require_react());
var ThemesContext = (0, import_react7.createContext)({});

// node_modules/ra-ui-materialui/src/theme/useThemesContext.ts
var useThemesContext = (params) => {
  const { lightTheme, darkTheme, defaultTheme } = params || {};
  const context = (0, import_react8.useContext)(ThemesContext);
  return {
    lightTheme: lightTheme || context.lightTheme,
    darkTheme: darkTheme || context.darkTheme,
    defaultTheme: defaultTheme ?? context.defaultTheme
  };
};

// node_modules/ra-ui-materialui/src/button/ToggleThemeButton.tsx
var import_Brightness4 = __toESM(require_Brightness4());
var import_Brightness7 = __toESM(require_Brightness7());

// node_modules/ra-ui-materialui/src/theme/useTheme.ts
var useTheme2 = (type) => {
  const { darkTheme } = useThemesContext();
  const prefersDarkMode = useMediaQuery("(prefers-color-scheme: dark)", {
    noSsr: true
  });
  const [theme, setter] = useStore(
    "theme",
    type ?? (prefersDarkMode && darkTheme ? "dark" : "light")
  );
  return [darkTheme != null ? theme : "light", setter];
};

// node_modules/ra-ui-materialui/src/theme/ThemeProvider.tsx
var import_react9 = __toESM(require_react());
var import_jsx_runtime14 = __toESM(require_jsx_runtime());

// node_modules/ra-ui-materialui/src/theme/defaultTheme.ts
init_esm();
var defaultThemeInvariants = {
  typography: {
    h6: {
      fontWeight: 400
    }
  },
  sidebar: {
    width: 240,
    closedWidth: 50
  },
  components: {
    MuiAutocomplete: {
      defaultProps: {
        fullWidth: true
      },
      variants: [
        {
          props: {},
          style: ({ theme }) => ({
            [theme.breakpoints.down("sm")]: { width: "100%" }
          })
        }
      ]
    },
    MuiTextField: {
      defaultProps: {
        variant: "filled",
        margin: "dense",
        size: "small",
        fullWidth: true
      },
      variants: [
        {
          props: {},
          style: ({ theme }) => ({
            [theme.breakpoints.down("sm")]: { width: "100%" }
          })
        }
      ]
    },
    MuiFormControl: {
      defaultProps: {
        variant: "filled",
        margin: "dense",
        size: "small",
        fullWidth: true
      }
    },
    RaSimpleFormIterator: {
      defaultProps: {
        fullWidth: true
      }
    },
    RaTranslatableInputs: {
      defaultProps: {
        fullWidth: true
      }
    }
  }
};
var defaultLightTheme = deepmerge(
  defaultThemeInvariants,
  {
    palette: {
      background: {
        default: "#fafafb"
      },
      secondary: {
        light: "#6ec6ff",
        main: "#2196f3",
        dark: "#0069c0",
        contrastText: "#fff"
      }
    },
    components: {
      MuiFilledInput: {
        styleOverrides: {
          root: {
            backgroundColor: "rgba(0, 0, 0, 0.04)",
            "&$disabled": {
              backgroundColor: "rgba(0, 0, 0, 0.04)"
            }
          }
        }
      }
    }
  }
);
var defaultDarkTheme = deepmerge(
  defaultThemeInvariants,
  {
    palette: {
      mode: "dark",
      primary: {
        main: "#90caf9"
      },
      background: {
        default: "#313131"
      }
    }
  }
);

// node_modules/ra-ui-materialui/src/theme/nanoTheme.ts
var componentsOverrides = (theme) => ({
  MuiAlert: {
    defaultProps: {
      variant: "outlined"
    }
  },
  MuiAppBar: {
    defaultProps: {
      elevation: 1
    }
  },
  MuiAutocomplete: {
    defaultProps: {
      fullWidth: true
    },
    variants: [
      {
        props: {},
        style: ({ theme: theme2 }) => ({
          [theme2.breakpoints.down("sm")]: { width: "100%" }
        })
      }
    ],
    styleOverrides: {
      root: {
        "& label+.MuiInput-root.MuiInputBase-root": {
          marginTop: theme.spacing(1.5)
        },
        "& label[data-shrink=false]+.MuiInput-root.MuiInputBase-root": {
          marginTop: 0,
          paddingBottom: theme.spacing(2)
        }
      },
      input: {
        padding: theme.spacing(0.5)
      }
    }
  },
  MuiButton: {
    defaultProps: {
      variant: "text",
      size: "small"
    },
    styleOverrides: {
      root: {
        paddingTop: theme.spacing(0.2),
        paddingBottom: theme.spacing(0.2)
      }
    }
  },
  MuiCard: {
    defaultProps: {
      square: true
    }
  },
  MuiChip: {
    defaultProps: {
      variant: "outlined"
    }
  },
  MuiFormControl: {
    defaultProps: {
      variant: "standard",
      margin: "dense",
      size: "small",
      fullWidth: true
    }
  },
  MuiFormHelperText: {
    defaultProps: {
      margin: "dense"
    }
  },
  MuiIconButton: {
    defaultProps: {
      size: "small"
    }
  },
  MuiInputBase: {
    styleOverrides: {
      root: {
        "label+&.MuiInputBase-root": {
          marginTop: theme.spacing(1.5)
        },
        "label[data-shrink=false]+&.MuiInputBase-root": {
          marginTop: 0,
          paddingBottom: theme.spacing(1.5)
        }
      },
      input: {
        padding: theme.spacing(0.5)
      }
    }
  },
  MuiInputLabel: {
    styleOverrides: {
      root: {
        paddingLeft: theme.spacing(0.5)
      }
    },
    defaultProps: {
      margin: "dense"
    }
  },
  MuiListItem: {
    defaultProps: {
      dense: true
    }
  },
  MuiListItemIcon: {
    styleOverrides: {
      root: {
        "&.MuiListItemIcon-root": {
          minWidth: theme.spacing(3.5)
        }
      }
    }
  },
  MuiMenuItem: {
    styleOverrides: {
      root: {
        paddingTop: theme.spacing(0.5),
        paddingBottom: theme.spacing(0.5),
        paddingLeft: theme.spacing(1),
        paddingRight: theme.spacing(1)
      }
    }
  },
  MuiOutlinedInput: {
    defaultProps: {
      margin: "dense"
    },
    styleOverrides: {
      input: {
        padding: 16
      }
    }
  },
  MuiPaper: {
    styleOverrides: {
      elevation1: {
        boxShadow: theme.shadows[1]
      },
      root: {
        backgroundColor: theme.palette.background.default
      }
    }
  },
  MuiSnackbar: {
    styleOverrides: {
      root: {
        "& .RaNotification-error": {
          border: `1px solid ${theme.palette.error.main}`,
          backgroundColor: `${theme.palette.common.white} !important`,
          color: `${theme.palette.error.main} !important`
        },
        "& .RaNotification-warning": {
          border: `1px solid ${theme.palette.warning.main}`,
          backgroundColor: `${theme.palette.common.white} !important`,
          color: `${theme.palette.warning.main} !important`
        },
        "& .RaNotification-info": {
          border: `1px solid ${theme.palette.info.main}`,
          backgroundColor: `${theme.palette.common.white} !important`,
          color: `${theme.palette.info.main} !important`
        },
        "& .RaNotification-success": {
          border: `1px solid ${theme.palette.success.main}`,
          backgroundColor: `${theme.palette.common.white} !important`,
          color: `${theme.palette.success.main} !important`
        }
      }
    }
  },
  MuiTabs: {
    styleOverrides: {
      root: {
        "&.MuiTabs-root": {
          minHeight: theme.spacing(3.5)
        }
      }
    }
  },
  MuiTab: {
    styleOverrides: {
      root: {
        "&.MuiTab-root": {
          padding: `${theme.spacing(0.5)} ${theme.spacing(1)}`,
          minHeight: theme.spacing(3.5),
          minWidth: theme.spacing(10)
        }
      }
    }
  },
  MuiTable: {
    defaultProps: {
      size: "small"
    }
  },
  MuiTableCell: {
    styleOverrides: {
      root: {
        padding: theme.spacing(1),
        "&.MuiTableCell-sizeSmall": {
          padding: theme.spacing(0.5)
        },
        "&.MuiTableCell-paddingNone": {
          padding: 0
        }
      }
    }
  },
  MuiTextField: {
    defaultProps: {
      variant: "standard",
      margin: "dense",
      size: "small",
      fullWidth: true
    },
    variants: [
      {
        props: {},
        style: ({ theme: theme2 }) => ({
          [theme2.breakpoints.down("sm")]: { width: "100%" }
        })
      }
    ]
  },
  MuiToolbar: {
    defaultProps: {
      variant: "dense"
    },
    styleOverrides: {
      root: {
        minHeight: theme.spacing(4.5)
      },
      regular: {
        backgroundColor: theme.palette.background.paper
      }
    }
  },
  RaDatagrid: {
    styleOverrides: {
      root: {
        "& .RaDatagrid-headerCell": {
          color: theme.palette.primary.main
        }
      }
    }
  },
  RaFilterForm: {
    styleOverrides: {
      root: {
        [theme.breakpoints.up("sm")]: {
          minHeight: theme.spacing(7.1)
        }
      }
    }
  },
  RaFilterFormInput: {
    styleOverrides: {
      root: {
        "& .RaFilterFormInput-hideButton": {
          marginBottom: theme.spacing(0.5)
        }
      }
    }
  },
  RaLayout: {
    styleOverrides: {
      root: {
        "& .RaLayout-appFrame": {
          marginTop: theme.spacing(5)
        }
      }
    }
  },
  RaLoadingIndicator: {
    styleOverrides: {
      root: {
        "& .RaLoadingIndicator-loader": {
          top: "20%",
          left: "20%"
        }
      }
    }
  },
  RaMenuItemLink: {
    styleOverrides: {
      root: {
        paddingLeft: theme.spacing(1),
        paddingRight: theme.spacing(1),
        "&.RaMenuItemLink-active": {
          color: theme.palette.primary.dark,
          fontWeight: 700,
          "& .MuiSvgIcon-root": {
            fill: theme.palette.primary.dark
          }
        }
      }
    }
  },
  RaSimpleFormIterator: {
    defaultProps: {
      fullWidth: true
    }
  },
  RaTranslatableInputs: {
    defaultProps: {
      fullWidth: true
    }
  }
});
var alert = {
  error: { main: "#B57185" },
  warning: { main: "#F2CB05" },
  info: { main: "#39AEA9" },
  success: { main: "#00745F" }
};
var darkPalette = {
  mode: "dark",
  primary: { main: "#f9fafb" },
  secondary: { main: "#a0a0a0" },
  background: { default: "#363D40" },
  ...alert
};
var lightPalette = {
  mode: "light",
  primary: { main: "#00585C" },
  secondary: { main: "#64B4B8" },
  background: { default: "#f9fafb" },
  text: { primary: "#212b36" },
  ...alert
};
var createNanoTheme = (palette) => {
  const themeOptions = {
    palette,
    shape: { borderRadius: 0 },
    sidebar: {
      width: 200,
      closedWidth: 36
    },
    spacing: 8,
    typography: {
      fontFamily: "Onest, sans-serif",
      fontSize: 12,
      h1: { fontSize: "7rem" },
      h2: { fontWeight: 400 },
      h3: { fontWeight: 500 },
      h4: { fontWeight: 700 },
      h5: { fontWeight: 700 }
    }
  };
  const theme = createTheme_default(themeOptions);
  theme.components = componentsOverrides(theme);
  return theme;
};
var nanoLightTheme = createNanoTheme(lightPalette);
var nanoDarkTheme = createNanoTheme(darkPalette);

// node_modules/ra-ui-materialui/src/theme/radiantTheme.ts
var componentsOverrides2 = (theme) => {
  const shadows = [
    alpha(theme.palette.primary.main, 0.2),
    alpha(theme.palette.primary.main, 0.1),
    alpha(theme.palette.primary.main, 0.05)
  ];
  return {
    MuiAppBar: {
      styleOverrides: {
        colorSecondary: {
          backgroundColor: theme.palette.background.default,
          color: theme.palette.text.primary
        }
      }
    },
    MuiAutocomplete: {
      defaultProps: {
        fullWidth: true
      }
    },
    MuiButton: {
      defaultProps: {
        variant: "outlined"
      },
      styleOverrides: {
        sizeSmall: {
          padding: `${theme.spacing(0.5)} ${theme.spacing(1.5)}`
        }
      }
    },
    MuiFormControl: {
      defaultProps: {
        variant: "outlined",
        margin: "dense",
        size: "small",
        fullWidth: true
      }
    },
    MuiPaper: {
      styleOverrides: {
        elevation1: {
          boxShadow: `${shadows[0]} -2px 2px, ${shadows[1]} -4px 4px,${shadows[2]} -6px 6px`
        },
        root: {
          backgroundClip: "padding-box"
        }
      }
    },
    MuiTableCell: {
      styleOverrides: {
        root: {
          padding: theme.spacing(1.5),
          "&.MuiTableCell-sizeSmall": {
            padding: theme.spacing(1)
          },
          "&.MuiTableCell-paddingNone": {
            padding: 0
          }
        }
      }
    },
    MuiTableRow: {
      styleOverrides: {
        root: {
          "&:last-child td": { border: 0 }
        }
      }
    },
    MuiTextField: {
      defaultProps: {
        variant: "outlined",
        margin: "dense",
        size: "small",
        fullWidth: true
      }
    },
    RaDatagrid: {
      styleOverrides: {
        root: {
          "& .RaDatagrid-headerCell": {
            color: theme.palette.primary.main
          }
        }
      }
    },
    RaFilterForm: {
      styleOverrides: {
        root: {
          [theme.breakpoints.up("sm")]: {
            minHeight: theme.spacing(6)
          }
        }
      }
    },
    RaLayout: {
      styleOverrides: {
        root: {
          "& .RaLayout-appFrame": { marginTop: theme.spacing(5) }
        }
      }
    },
    RaMenuItemLink: {
      styleOverrides: {
        root: {
          borderLeft: `3px solid ${theme.palette.primary.contrastText}`,
          "&:hover": {
            borderRadius: "0px 100px 100px 0px"
          },
          "&.RaMenuItemLink-active": {
            borderLeft: `3px solid ${theme.palette.primary.main}`,
            borderRadius: "0px 100px 100px 0px",
            backgroundImage: `linear-gradient(98deg, ${theme.palette.primary.light}, ${theme.palette.primary.dark} 94%)`,
            boxShadow: theme.shadows[1],
            color: theme.palette.primary.contrastText,
            "& .MuiSvgIcon-root": {
              fill: theme.palette.primary.contrastText
            }
          }
        }
      }
    },
    RaSimpleFormIterator: {
      defaultProps: {
        fullWidth: true
      }
    },
    RaTranslatableInputs: {
      defaultProps: {
        fullWidth: true
      }
    }
  };
};
var alert2 = {
  error: { main: "#DB488B" },
  warning: { main: "#F2E963" },
  info: { main: "#3ED0EB" },
  success: { main: "#0FBF9F" }
};
var darkPalette2 = {
  primary: { main: "#9055fd" },
  secondary: { main: "#FF83F6" },
  background: { default: "#110e1c", paper: "#151221" },
  ...alert2,
  mode: "dark"
};
var lightPalette2 = {
  primary: { main: "#9055fd" },
  secondary: { main: "#A270FF" },
  background: { default: "#f0f1f6" },
  text: {
    primary: "#544f5a",
    secondary: "#89868D"
  },
  ...alert2,
  mode: "light"
};
var createRadiantTheme = (palette) => {
  const themeOptions = {
    palette,
    shape: { borderRadius: 6 },
    sidebar: { width: 250 },
    spacing: 10,
    typography: {
      fontFamily: "Gabarito, tahoma, sans-serif",
      h1: {
        fontWeight: 500,
        fontSize: "6rem"
      },
      h2: { fontWeight: 600 },
      h3: { fontWeight: 700 },
      h4: { fontWeight: 800 },
      h5: { fontWeight: 900 },
      button: { textTransform: void 0, fontWeight: 700 }
    }
  };
  const theme = createTheme_default(themeOptions);
  theme.components = componentsOverrides2(theme);
  return theme;
};
var radiantLightTheme = createRadiantTheme(lightPalette2);
var radiantDarkTheme = createRadiantTheme(darkPalette2);

// node_modules/ra-ui-materialui/src/theme/houseTheme.ts
var componentsOverrides3 = (theme) => ({
  MuiBackdrop: {
    styleOverrides: {
      root: {
        backgroundColor: alpha(darken("#000C57", 0.4), 0.2),
        backdropFilter: "blur(2px)",
        "&.MuiBackdrop-invisible": {
          backgroundColor: "transparent",
          backdropFilter: "blur(2px)"
        }
      }
    }
  },
  MuiAutocomplete: {
    defaultProps: {
      fullWidth: true
    }
  },
  MuiFormControl: {
    defaultProps: {
      margin: "dense",
      fullWidth: true
    }
  },
  MuiOutlinedInput: {
    styleOverrides: {
      input: {
        padding: `${theme.spacing(1)} ${theme.spacing(2)}`
      }
    }
  },
  MuiTab: {
    styleOverrides: {
      root: {
        padding: 0,
        height: 38,
        minHeight: 38,
        borderRadius: 6,
        transition: "color .2s",
        "&.MuiButtonBase-root": {
          minWidth: "auto",
          paddingLeft: 20,
          paddingRight: 20,
          marginRight: 4
        },
        "&.Mui-selected, &.Mui-selected:hover": {
          color: theme.palette.primary.contrastText,
          zIndex: 5
        },
        "&:hover": {
          color: theme.palette.primary.main
        }
      }
    }
  },
  MuiTableRow: {
    styleOverrides: {
      root: {
        "&:last-child td": { border: 0 }
      }
    }
  },
  MuiTableCell: {
    styleOverrides: {
      root: {
        padding: theme.spacing(2),
        "&.MuiTableCell-sizeSmall": {
          padding: theme.spacing(1.5)
        },
        "&.MuiTableCell-paddingNone": {
          padding: theme.spacing(0.5)
        }
      }
    }
  },
  MuiTabs: {
    styleOverrides: {
      root: {
        height: 38,
        minHeight: 38,
        overflow: "visible"
      },
      indicator: {
        height: 38,
        minHeight: 38,
        borderRadius: 6,
        border: `1px solid ${theme.palette.primary.light}`,
        boxShadow: theme.shadows[1]
      },
      scrollableX: {
        overflow: "visible !important"
      }
    }
  },
  MuiTextField: {
    defaultProps: {
      variant: "outlined",
      fullWidth: true
    }
  },
  RaAppBar: {
    styleOverrides: {
      root: {
        color: theme.palette.text.primary,
        "& .RaAppBar-toolbar": {
          backgroundColor: theme.palette.primary.main,
          color: theme.palette.background.default,
          backgroundImage: `linear-gradient(310deg, ${theme.palette.primary.light}, ${theme.palette.secondary.main})`
        }
      }
    }
  },
  RaMenuItemLink: {
    styleOverrides: {
      root: {
        padding: 10,
        marginRight: 10,
        marginLeft: 10,
        "&:hover": {
          borderRadius: 5
        },
        "&.RaMenuItemLink-active": {
          borderRadius: 10,
          backgroundColor: theme.palette.common.white,
          color: theme.palette.primary.main,
          "&:before": {
            content: '""',
            position: "absolute",
            top: "0; right: 0; bottom: 0; left: 0",
            zIndex: "-1",
            margin: "-2px",
            borderRadius: "12px",
            background: `linear-gradient(310deg, ${theme.palette.primary.light}, ${theme.palette.secondary.main})`
          },
          "& .MuiSvgIcon-root": {
            fill: theme.palette.primary.main
          }
        }
      }
    }
  },
  RaSimpleFormIterator: {
    defaultProps: {
      fullWidth: true
    }
  },
  RaTranslatableInputs: {
    defaultProps: {
      fullWidth: true
    }
  }
});
var alert3 = {
  error: { main: "#DB488B" },
  warning: { main: "#8C701B" },
  info: { main: "#3ED0EB" },
  success: { main: "#0FBF9F" }
};
var darkPalette3 = {
  primary: { main: "#ec7a77", light: "#fbcf33" },
  background: { default: "#363D40", paper: "#2B3033" },
  ...alert3,
  mode: "dark"
};
var lightPalette3 = {
  primary: { main: "#344767", light: "#7928ca" },
  secondary: { main: "#f90283" },
  background: { default: "#f7f8f9", paper: "#ffffff" },
  ...alert3,
  mode: "light"
};
var createHouseTheme = (palette) => {
  const themeOptions = {
    palette,
    shape: { borderRadius: 20 },
    sidebar: { width: 250 },
    spacing: 9,
    typography: { fontFamily: `'Open Sans', sans-serif` }
  };
  const theme = createTheme_default(themeOptions);
  theme.components = componentsOverrides3(theme);
  return theme;
};
var houseLightTheme = createHouseTheme(lightPalette3);
var houseDarkTheme = createHouseTheme(darkPalette3);

// node_modules/ra-ui-materialui/src/button/ToggleThemeButton.tsx
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var ToggleThemeButton = () => {
  const translate = useTranslate();
  const { darkTheme, defaultTheme } = useThemesContext();
  const prefersDarkMode = useMediaQuery("(prefers-color-scheme: dark)", {
    noSsr: true
  });
  const [theme, setTheme] = useTheme2(
    defaultTheme || (prefersDarkMode && darkTheme ? "dark" : "light")
  );
  const handleTogglePaletteType = () => {
    setTheme(theme === "dark" ? "light" : "dark");
  };
  const toggleThemeTitle = translate("ra.action.toggle_theme", {
    _: "Toggle Theme"
  });
  return (0, import_jsx_runtime15.jsx)(Tooltip_default, { title: toggleThemeTitle, enterDelay: 300, children: (0, import_jsx_runtime15.jsx)(
    IconButton_default,
    {
      color: "inherit",
      onClick: handleTogglePaletteType,
      "aria-label": toggleThemeTitle,
      children: theme === "dark" ? (0, import_jsx_runtime15.jsx)(import_Brightness7.default, {}) : (0, import_jsx_runtime15.jsx)(import_Brightness4.default, {})
    }
  ) });
};

// node_modules/ra-ui-materialui/src/layout/AppBar.tsx
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var AppBar = (0, import_react10.memo)((props) => {
  const {
    alwaysOn,
    children,
    className,
    color = "secondary",
    toolbar = defaultToolbarElement,
    userMenu = DefaultUserMenu,
    container: Container = alwaysOn ? "div" : HideOnScroll,
    ...rest
  } = props;
  const isXSmall = useMediaQuery(
    (theme) => theme.breakpoints.down("sm")
  );
  return (0, import_jsx_runtime16.jsx)(Container, { className, children: (0, import_jsx_runtime16.jsx)(
    StyledAppBar,
    {
      className: AppBarClasses.appBar,
      color,
      ...rest,
      children: (0, import_jsx_runtime16.jsxs)(
        Toolbar_default,
        {
          disableGutters: true,
          variant: isXSmall ? "regular" : "dense",
          className: AppBarClasses.toolbar,
          children: [
            (0, import_jsx_runtime16.jsx)(SidebarToggleButton, { className: AppBarClasses.menuButton }),
            import_react10.Children.count(children) === 0 ? (0, import_jsx_runtime16.jsx)(TitlePortal, { className: AppBarClasses.title }) : children,
            toolbar,
            typeof userMenu === "boolean" ? userMenu === true ? (0, import_jsx_runtime16.jsx)(UserMenu, {}) : null : userMenu
          ]
        }
      )
    }
  ) });
});
var DefaultToolbar = () => {
  const locales = useLocales();
  const { darkTheme } = useThemesContext();
  return (0, import_jsx_runtime16.jsxs)(import_jsx_runtime16.Fragment, { children: [
    locales && locales.length > 1 ? (0, import_jsx_runtime16.jsx)(LocalesMenuButton, {}) : null,
    darkTheme && (0, import_jsx_runtime16.jsx)(ToggleThemeButton, {}),
    (0, import_jsx_runtime16.jsx)(LoadingIndicator, {})
  ] });
};
var defaultToolbarElement = (0, import_jsx_runtime16.jsx)(DefaultToolbar, {});
var DefaultUserMenu = (0, import_jsx_runtime16.jsx)(UserMenu, {});
var PREFIX9 = "RaAppBar";
var AppBarClasses = {
  appBar: `${PREFIX9}-appBar`,
  toolbar: `${PREFIX9}-toolbar`,
  menuButton: `${PREFIX9}-menuButton`,
  menuButtonIconClosed: `${PREFIX9}-menuButtonIconClosed`,
  menuButtonIconOpen: `${PREFIX9}-menuButtonIconOpen`,
  title: `${PREFIX9}-title`
};
var StyledAppBar = styled_default(AppBar_default, {
  name: PREFIX9,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  [`& .${AppBarClasses.toolbar}`]: {
    padding: `0 ${theme.spacing(1)}`,
    [theme.breakpoints.down("md")]: {
      minHeight: theme.spacing(6)
    }
  },
  [`& .${AppBarClasses.menuButton}`]: {
    marginRight: "0.2em"
  },
  [`& .${AppBarClasses.title}`]: {}
}));

// node_modules/ra-ui-materialui/src/layout/ApplicationUpdatedNotification.tsx
var React4 = __toESM(require_react());
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
var ApplicationUpdatedNotification = React4.forwardRef((props, ref) => {
  const {
    ButtonProps: ButtonProps19,
    updateText = "ra.action.update_application",
    notificationText = "ra.notification.application_update_available",
    ...alertProps
  } = props;
  const translate = useTranslate();
  const handleButtonClick = () => {
    window.location.reload();
  };
  return (0, import_jsx_runtime17.jsx)(
    Alert_default,
    {
      ref,
      severity: "info",
      action: (0, import_jsx_runtime17.jsx)(
        Button_default,
        {
          color: "inherit",
          size: "small",
          onClick: handleButtonClick,
          ...ButtonProps19,
          children: translate(updateText, { _: updateText })
        }
      ),
      ...alertProps,
      children: translate(notificationText, { _: notificationText })
    }
  );
});

// node_modules/ra-ui-materialui/src/layout/AuthenticationError.tsx
var import_WarningAmber = __toESM(require_WarningAmber());
init_clsx();

// node_modules/ra-ui-materialui/src/layout/Title.tsx
var import_react13 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/ra-ui-materialui/src/layout/PageTitle.tsx
var import_jsx_runtime18 = __toESM(require_jsx_runtime());

// node_modules/ra-ui-materialui/src/preferences/Configurable.tsx
var import_react11 = __toESM(require_react());
var import_Settings = __toESM(require_Settings());
init_clsx();
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var PREFIX10 = "RaConfigurable";
var ConfigurableClasses = {
  root: `${PREFIX10}-root`,
  editMode: `${PREFIX10}-editMode`,
  editorActive: `${PREFIX10}-editorActive`
};
var Root5 = styled_default("span", {
  name: PREFIX10,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  position: "relative",
  display: "inline-block",
  [`&.${ConfigurableClasses.editMode}`]: {
    transition: theme.transitions.create("outline"),
    outline: `${alpha(theme.palette.warning.main, 0.3)} solid 2px`
  },
  [`&.${ConfigurableClasses.editMode}:hover `]: {
    outline: `${alpha(theme.palette.warning.main, 0.5)} solid 2px`
  },
  [`&.${ConfigurableClasses.editMode}.${ConfigurableClasses.editorActive} , &.${ConfigurableClasses.editMode}.${ConfigurableClasses.editorActive}:hover `]: {
    outline: `${theme.palette.warning.main} solid 2px`
  }
}));

// node_modules/ra-ui-materialui/src/preferences/FieldToggle.tsx
var React5 = __toESM(require_react());
var import_DragIndicator = __toESM(require_DragIndicator());
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var Root6 = styled_default("li", {
  name: "RaFieldToggle",
  overridesResolver: (_props, styles) => styles.root
})(({ theme }) => ({
  display: "flex",
  justifyContent: "space-between",
  paddingLeft: 0,
  "& svg": {
    cursor: "move"
  },
  "&.drag-active": {
    background: "transparent",
    color: "transparent",
    outline: `1px solid ${theme.palette.action.selected}`,
    "& .MuiSwitch-root, & svg": {
      visibility: "hidden"
    }
  }
}));

// node_modules/ra-ui-materialui/src/preferences/FieldsSelector.tsx
var import_jsx_runtime21 = __toESM(require_jsx_runtime());

// node_modules/ra-ui-materialui/src/preferences/Inspector.tsx
var import_react12 = __toESM(require_react());
var import_CancelOutlined = __toESM(require_CancelOutlined());
var import_DeleteOutline = __toESM(require_DeleteOutline());

// node_modules/ra-ui-materialui/src/preferences/InspectorRoot.tsx
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var InspectorRoot = () => {
  const translate = useTranslate();
  useSetInspectorTitle("ra.configurable.inspector.title", {
    _: "Inspector"
  });
  return (0, import_jsx_runtime22.jsx)(Typography_default, { children: translate("ra.configurable.inspector.content", {
    _: "Hover the application UI elements to configure them"
  }) });
};

// node_modules/ra-ui-materialui/src/preferences/Inspector.tsx
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var Inspector = () => {
  const { isEnabled, disable, title, titleOptions, editor, preferenceKey } = usePreferencesEditor();
  const isDragging = (0, import_react12.useRef)(false);
  const removeItems = useRemoveItemsFromStore(preferenceKey);
  const theme = useTheme();
  const translate = useTranslate();
  const [version, setVersion] = (0, import_react12.useState)(0);
  const [dialogPosition, setDialogPosition] = useStore(
    "ra.inspector.position",
    {
      x: (
        // We want it positioned to the far right of the screen
        (document == null ? void 0 : document.body.clientWidth) - // So we remove its size (see the root css class)
        theme.breakpoints.values.sm / 2 - // And add a margin
        8
      ),
      y: 8
    }
  );
  const [clickPosition, setClickPosition] = (0, import_react12.useState)();
  const handleDragStart = (e) => {
    const draggedElement = document == null ? void 0 : document.elementFromPoint(e.clientX, e.clientY);
    if ((draggedElement == null ? void 0 : draggedElement.id) !== "inspector-dialog-title") {
      return;
    }
    isDragging.current = true;
    e.dataTransfer.effectAllowed = "move";
    e.dataTransfer.setData("inspector", "");
    setTimeout(() => {
      e.target.classList.add("hide");
    }, 0);
    setClickPosition({
      x: e.clientX - dialogPosition.x,
      y: e.clientY - dialogPosition.y
    });
  };
  const handleDragEnd = (e) => {
    if (isDragging.current && clickPosition) {
      setDialogPosition({
        x: e.clientX - clickPosition.x,
        y: e.clientY - clickPosition.y
      });
      e.target.classList.remove("hide");
      isDragging.current = false;
    }
  };
  (0, import_react12.useEffect)(() => {
    if (!isEnabled) return;
    const handleDragover = (e) => {
      if (e.dataTransfer.types.includes("inspector")) {
        e.preventDefault();
      }
    };
    document == null ? void 0 : document.addEventListener("dragover", handleDragover);
    return () => {
      document == null ? void 0 : document.removeEventListener("dragover", handleDragover);
    };
  }, [isEnabled]);
  (0, import_react12.useEffect)(() => {
    if (!isEnabled) return;
    const moveInspectorIfOutsideScreen = () => {
      window == null ? void 0 : window.requestAnimationFrame(() => {
        setDialogPosition((position) => ({
          x: Math.min(
            position.x,
            (document == null ? void 0 : document.body.clientWidth) - theme.breakpoints.values.sm / 2 - 8
          ),
          y: Math.min(position.y, (window == null ? void 0 : window.innerHeight) - 50)
        }));
      });
    };
    moveInspectorIfOutsideScreen();
    window == null ? void 0 : window.addEventListener("resize", moveInspectorIfOutsideScreen);
    return () => {
      window == null ? void 0 : window.removeEventListener("resize", moveInspectorIfOutsideScreen);
    };
  }, [isEnabled, setDialogPosition, theme.breakpoints.values.sm]);
  const handleReset = () => {
    removeItems();
    setVersion((version2) => version2 + 1);
  };
  if (!isEnabled) return null;
  return (0, import_jsx_runtime23.jsxs)(
    StyledPaper,
    {
      className: InspectorClasses.modal,
      elevation: 3,
      draggable: true,
      onDragStart: handleDragStart,
      onDragEnd: handleDragEnd,
      sx: { left: dialogPosition.x, top: dialogPosition.y },
      children: [
        (0, import_jsx_runtime23.jsxs)("div", { className: InspectorClasses.title, children: [
          (0, import_jsx_runtime23.jsx)(
            Typography_default,
            {
              id: "inspector-dialog-title",
              variant: "overline",
              component: "div",
              py: 1,
              px: 2,
              flex: "1",
              children: title && translate(title, titleOptions)
            }
          ),
          (0, import_jsx_runtime23.jsx)("span", { id: "inspector-toolbar" }),
          preferenceKey && (0, import_jsx_runtime23.jsx)(
            IconButton_default,
            {
              "aria-label": translate("ra.action.remove"),
              onClick: handleReset,
              size: "small",
              children: (0, import_jsx_runtime23.jsx)(import_DeleteOutline.default, { fontSize: "inherit" })
            }
          ),
          (0, import_jsx_runtime23.jsx)(
            IconButton_default,
            {
              "aria-label": translate("ra.action.close"),
              onClick: disable,
              size: "small",
              sx: { mr: 1 },
              children: (0, import_jsx_runtime23.jsx)(import_CancelOutlined.default, { fontSize: "inherit" })
            }
          )
        ] }),
        (0, import_jsx_runtime23.jsx)("div", { className: InspectorClasses.content, children: (0, import_jsx_runtime23.jsx)(PreferenceKeyContextProvider, { value: preferenceKey, children: editor || (0, import_jsx_runtime23.jsx)(InspectorRoot, {}) }) }, version)
      ]
    }
  );
};
var PREFIX11 = "RaInspector";
var InspectorClasses = {
  modal: `${PREFIX11}-modal`,
  title: `${PREFIX11}-title`,
  content: `${PREFIX11}-content`
};
var StyledPaper = styled_default(Paper_default, {
  name: PREFIX11,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  position: "fixed",
  zIndex: theme.zIndex.modal + 1,
  width: theme.breakpoints.values.sm / 2,
  transition: theme.transitions.create(["height", "width"]),
  "&.hide": {
    display: "none"
  },
  [`& .${InspectorClasses.title}`]: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    cursor: "move"
  },
  [`& .${InspectorClasses.content}`]: {
    overflowY: "auto",
    maxHeight: "75vh",
    padding: theme.spacing(2),
    paddingTop: 0
  }
}));
Inspector.displayName = "Inspector";

// node_modules/ra-ui-materialui/src/preferences/InspectorButton.tsx
var React6 = __toESM(require_react());
var import_Settings2 = __toESM(require_Settings());
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var InspectorButton = React6.forwardRef(
  ({
    label = "ra.configurable.configureMode",
    SvgIconProps = {},
    ...props
  }, ref) => {
    const { enable, disable, setPreferenceKey, isEnabled } = usePreferencesEditor();
    const translate = useTranslate();
    const handleClick = () => {
      if (isEnabled) {
        disable();
        setPreferenceKey(null);
      } else {
        enable();
      }
    };
    const translatedLabel = translate(label, { _: "Configure mode" });
    return (0, import_jsx_runtime24.jsx)(Tooltip_default, { title: translatedLabel, children: (0, import_jsx_runtime24.jsx)(
      IconButton_default,
      {
        "aria-label": translatedLabel,
        onClick: handleClick,
        color: "inherit",
        ref,
        ...props,
        children: (0, import_jsx_runtime24.jsx)(import_Settings2.default, { fontSize: "inherit", ...SvgIconProps })
      }
    ) });
  }
);

// node_modules/ra-ui-materialui/src/layout/PageTitleConfigurable.tsx
var import_jsx_runtime25 = __toESM(require_jsx_runtime());

// node_modules/ra-ui-materialui/src/layout/Title.tsx
var import_jsx_runtime26 = __toESM(require_jsx_runtime());

// node_modules/ra-ui-materialui/src/layout/AuthenticationError.tsx
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var PREFIX12 = "RaAuthenticationError";
var AuthenticationErrorClasses = {
  root: `${PREFIX12}-root`,
  icon: `${PREFIX12}-icon`,
  message: `${PREFIX12}-message`
};
var Root7 = styled_default("div", {
  name: PREFIX12,
  overridesResolver: (props, styles) => styles.root
})({
  display: "flex",
  flexDirection: "column",
  justifyContent: "center",
  alignItems: "center",
  height: "100%",
  [`& .${AuthenticationErrorClasses.message}`]: {
    textAlign: "center",
    paddingTop: "1em",
    paddingBottom: "1em",
    opacity: 0.5
  },
  [`& .${AuthenticationErrorClasses.icon}`]: {
    width: "9em",
    height: "9em"
  }
});
var DEFAULT_ICON2 = (0, import_jsx_runtime27.jsx)(import_WarningAmber.default, { className: AuthenticationErrorClasses.icon });

// node_modules/ra-ui-materialui/src/layout/CardContentInner.tsx
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var PREFIX13 = "RaCardContentInner";
var CardContentInnerClasses = {
  root: `${PREFIX13}-root`
};
var Root8 = styled_default(CardContent_default, {
  name: PREFIX13,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  paddingTop: 0,
  paddingBottom: 0,
  "&:first-of-type": {
    paddingTop: 16
  },
  "&:last-child": {
    paddingBottom: 16,
    [theme.breakpoints.only("xs")]: {
      paddingBottom: 70
    }
  }
}));

// node_modules/ra-ui-materialui/src/layout/CheckForApplicationUpdate.tsx
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var DEFAULT_NOTIFICATION = (0, import_jsx_runtime29.jsx)(ApplicationUpdatedNotification, {});

// node_modules/ra-ui-materialui/src/layout/Confirm.tsx
var import_react14 = __toESM(require_react());
var import_CheckCircle = __toESM(require_CheckCircle());
var import_ErrorOutline = __toESM(require_ErrorOutline());
init_clsx();
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var Confirm = (props) => {
  const {
    className,
    isOpen = false,
    loading,
    title,
    content,
    cancel = "ra.action.cancel",
    confirm = "ra.action.confirm",
    confirmColor = "primary",
    ConfirmIcon = import_CheckCircle.default,
    CancelIcon = import_ErrorOutline.default,
    onClose,
    onConfirm,
    translateOptions = {},
    ...rest
  } = props;
  const translate = useTranslate();
  const handleConfirm = (0, import_react14.useCallback)(
    (e) => {
      e.stopPropagation();
      onConfirm(e);
    },
    [onConfirm]
  );
  const handleClick = (0, import_react14.useCallback)((e) => {
    e.stopPropagation();
  }, []);
  return (0, import_jsx_runtime30.jsxs)(
    StyledDialog,
    {
      className,
      open: isOpen,
      onClose,
      onClick: handleClick,
      "aria-labelledby": "alert-dialog-title",
      ...rest,
      children: [
        (0, import_jsx_runtime30.jsx)(DialogTitle_default, { id: "alert-dialog-title", children: typeof title === "string" ? translate(title, { _: title, ...translateOptions }) : title }),
        (0, import_jsx_runtime30.jsx)(DialogContent_default, { children: typeof content === "string" ? (0, import_jsx_runtime30.jsx)(DialogContentText_default, { children: translate(content, {
          _: content,
          ...translateOptions
        }) }) : content }),
        (0, import_jsx_runtime30.jsxs)(DialogActions_default, { children: [
          (0, import_jsx_runtime30.jsx)(
            Button_default,
            {
              disabled: loading,
              onClick: onClose,
              startIcon: (0, import_jsx_runtime30.jsx)(CancelIcon, {}),
              children: translate(cancel, { _: cancel })
            }
          ),
          (0, import_jsx_runtime30.jsx)(
            Button_default,
            {
              disabled: loading,
              onClick: handleConfirm,
              className: clsx_default("ra-confirm", {
                [ConfirmClasses.confirmWarning]: confirmColor === "warning",
                [ConfirmClasses.confirmPrimary]: confirmColor === "primary"
              }),
              autoFocus: true,
              startIcon: (0, import_jsx_runtime30.jsx)(ConfirmIcon, {}),
              children: translate(confirm, { _: confirm })
            }
          )
        ] })
      ]
    }
  );
};
var PREFIX14 = "RaConfirm";
var ConfirmClasses = {
  confirmPrimary: `${PREFIX14}-confirmPrimary`,
  confirmWarning: `${PREFIX14}-confirmWarning`
};
var StyledDialog = styled_default(Dialog_default, {
  name: PREFIX14,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  [`& .${ConfirmClasses.confirmPrimary}`]: {
    color: theme.palette.primary.main
  },
  [`& .${ConfirmClasses.confirmWarning}`]: {
    color: theme.palette.error.main,
    "&:hover": {
      backgroundColor: alpha(theme.palette.error.main, 0.12),
      // Reset on mouse devices
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }
}));

// node_modules/ra-ui-materialui/src/layout/DashboardMenuItem.tsx
var import_Dashboard = __toESM(require_Dashboard());

// node_modules/ra-ui-materialui/src/layout/MenuItemLink.tsx
var import_react15 = __toESM(require_react());
init_clsx();
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
var MenuItemLink = (0, import_react15.forwardRef)((props, ref) => {
  const {
    className,
    primaryText,
    leftIcon,
    onClick,
    sidebarIsOpen,
    tooltipProps,
    children,
    ...rest
  } = props;
  const isSmall = useMediaQuery((theme) => theme.breakpoints.down("md"));
  const translate = useTranslate();
  const basename = useBasename();
  const [open, setOpen] = useSidebarState();
  const handleMenuTap = (0, import_react15.useCallback)(
    (e) => {
      if (isSmall) {
        setOpen(false);
      }
      onClick && onClick(e);
    },
    [setOpen, isSmall, onClick]
  );
  const to = (typeof props.to === "string" ? props.to : props.to.pathname) || "";
  const match = useMatch({ path: to, end: to === `${basename}/` });
  const renderMenuItem = () => {
    return (0, import_jsx_runtime31.jsxs)(
      StyledMenuItem2,
      {
        className: clsx_default(className, {
          [MenuItemLinkClasses.active]: !!match
        }),
        component: LinkRef,
        ref,
        tabIndex: 0,
        ...rest,
        onClick: handleMenuTap,
        children: [
          leftIcon && (0, import_jsx_runtime31.jsx)(ListItemIcon_default, { className: MenuItemLinkClasses.icon, children: leftIcon }),
          children ? children : typeof primaryText === "string" ? translate(primaryText, { _: primaryText }) : primaryText
        ]
      }
    );
  };
  return open ? renderMenuItem() : (0, import_jsx_runtime31.jsx)(
    Tooltip_default,
    {
      title: typeof primaryText === "string" ? translate(primaryText, { _: primaryText }) : primaryText,
      placement: "right",
      ...tooltipProps,
      children: renderMenuItem()
    }
  );
});
var PREFIX15 = "RaMenuItemLink";
var MenuItemLinkClasses = {
  active: `${PREFIX15}-active`,
  icon: `${PREFIX15}-icon`
};
var StyledMenuItem2 = styled_default(MenuItem_default, {
  name: PREFIX15,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  color: theme.palette.text.secondary,
  [`&.${MenuItemLinkClasses.active}`]: {
    color: theme.palette.text.primary
  },
  [`& .${MenuItemLinkClasses.icon}`]: { minWidth: theme.spacing(5) }
}));
var LinkRef = (0, import_react15.forwardRef)((props, ref) => (0, import_jsx_runtime31.jsx)(Link, { ref, ...props }));

// node_modules/ra-ui-materialui/src/layout/DashboardMenuItem.tsx
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
var DashboardMenuItem = (props) => {
  const basename = useBasename();
  const {
    leftIcon = (0, import_jsx_runtime32.jsx)(import_Dashboard.default, {}),
    to = `${basename}/`,
    primaryText = "ra.page.dashboard",
    ...rest
  } = props;
  return (0, import_jsx_runtime32.jsx)(
    MenuItemLink,
    {
      leftIcon,
      to,
      primaryText,
      ...rest
    }
  );
};

// node_modules/ra-ui-materialui/src/layout/DeviceTestWrapper.tsx
var import_css_mediaquery = __toESM(require_css_mediaquery());
var import_jsx_runtime33 = __toESM(require_jsx_runtime());

// node_modules/ra-ui-materialui/src/layout/Error.tsx
var import_react16 = __toESM(require_react());
var import_Report = __toESM(require_Report());
var import_ExpandMore = __toESM(require_ExpandMore());
var import_History = __toESM(require_History());
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var PREFIX16 = "RaError";
var ErrorClasses = {
  container: `${PREFIX16}-container`,
  title: `${PREFIX16}-title`,
  icon: `${PREFIX16}-icon`,
  panel: `${PREFIX16}-panel`,
  panelSumary: `${PREFIX16}-panelSumary`,
  panelDetails: `${PREFIX16}-panelDetails`,
  toolbar: `${PREFIX16}-toolbar`,
  advice: `${PREFIX16}-advice`
};
var Root9 = styled_default("div", {
  name: PREFIX16,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  display: "flex",
  flexDirection: "column",
  alignItems: "center",
  justifyContent: "center",
  [theme.breakpoints.down("md")]: {
    padding: "1em"
  },
  fontFamily: "Roboto, sans-serif",
  opacity: 0.5,
  [`& .${ErrorClasses.title}`]: {
    display: "flex",
    alignItems: "center"
  },
  [`& .${ErrorClasses.icon}`]: {
    width: "2em",
    height: "2em",
    marginRight: "0.5em"
  },
  [`& .${ErrorClasses.panel}`]: {
    marginTop: "1em",
    maxWidth: "60em"
  },
  [`& .${ErrorClasses.panelSumary}`]: {
    userSelect: "all"
  },
  [`& .${ErrorClasses.panelDetails}`]: {
    whiteSpace: "pre-wrap"
  },
  [`& .${ErrorClasses.toolbar}`]: {
    marginTop: "2em"
  },
  [`& .${ErrorClasses.advice}`]: {
    marginTop: "2em"
  }
}));

// node_modules/ra-ui-materialui/src/layout/Layout.tsx
var import_react18 = __toESM(require_react());
init_clsx();

// node_modules/ra-ui-materialui/src/layout/Sidebar.tsx
var import_get = __toESM(require_get());
var import_jsx_runtime35 = __toESM(require_jsx_runtime());
var PREFIX17 = "RaSidebar";
var SidebarClasses = {
  docked: `${PREFIX17}-docked`,
  paper: `${PREFIX17}-paper`,
  paperAnchorLeft: `${PREFIX17}-paperAnchorLeft`,
  paperAnchorRight: `${PREFIX17}-paperAnchorRight`,
  paperAnchorTop: `${PREFIX17}-paperAnchorTop`,
  paperAnchorBottom: `${PREFIX17}-paperAnchorBottom`,
  paperAnchorDockedLeft: `${PREFIX17}-paperAnchorDockedLeft`,
  paperAnchorDockedTop: `${PREFIX17}-paperAnchorDockedTop`,
  paperAnchorDockedRight: `${PREFIX17}-paperAnchorDockedRight`,
  paperAnchorDockedBottom: `${PREFIX17}-paperAnchorDockedBottom`,
  modal: `${PREFIX17}-modal`,
  fixed: `${PREFIX17}-fixed`,
  appBarCollapsed: `${PREFIX17}-appBarCollapsed`
};
var StyledDrawer = styled_default(Drawer_default, {
  name: PREFIX17,
  slot: "Root",
  overridesResolver: (props, styles) => styles.root,
  shouldForwardProp: () => true
})(({ open, theme }) => ({
  height: "calc(100vh - 3em)",
  marginTop: 0,
  transition: theme.transitions.create("margin", {
    easing: theme.transitions.easing.easeOut,
    duration: theme.transitions.duration.enteringScreen
  }),
  [`&.${SidebarClasses.appBarCollapsed}`]: {
    // compensate the margin of the Layout appFrame instead of removing it in the Layout
    // because otherwise, the appFrame content without margin may revert the scrollTrigger,
    // leading to a visual jiggle
    marginTop: theme.spacing(-6),
    [theme.breakpoints.down("sm")]: {
      marginTop: theme.spacing(-7)
    },
    transition: theme.transitions.create("margin", {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen
    })
  },
  [`& .${SidebarClasses.docked}`]: {},
  [`& .${SidebarClasses.paper}`]: {},
  [`& .${SidebarClasses.paperAnchorLeft}`]: {},
  [`& .${SidebarClasses.paperAnchorRight}`]: {},
  [`& .${SidebarClasses.paperAnchorTop}`]: {},
  [`& .${SidebarClasses.paperAnchorBottom}`]: {},
  [`& .${SidebarClasses.paperAnchorDockedLeft}`]: {},
  [`& .${SidebarClasses.paperAnchorDockedTop}`]: {},
  [`& .${SidebarClasses.paperAnchorDockedRight}`]: {},
  [`& .${SidebarClasses.paperAnchorDockedBottom}`]: {},
  [`& .${SidebarClasses.modal}`]: {},
  [`& .${SidebarClasses.fixed}`]: {
    position: "fixed",
    height: "calc(100vh - 3em)",
    overflowX: "hidden",
    // hide scrollbar
    scrollbarWidth: "none",
    msOverflowStyle: "none",
    "&::-webkit-scrollbar": {
      display: "none"
    }
  },
  [`& .MuiPaper-root`]: {
    position: "relative",
    width: open ? (0, import_get.default)(theme, "sidebar.width", DRAWER_WIDTH) : (0, import_get.default)(theme, "sidebar.closedWidth", CLOSED_DRAWER_WIDTH),
    transition: theme.transitions.create("width", {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen
    }),
    backgroundColor: "transparent",
    borderRight: "none",
    [theme.breakpoints.only("xs")]: {
      marginTop: 0,
      height: "100vh",
      position: "inherit",
      backgroundColor: theme.palette.background.default
    },
    [theme.breakpoints.up("md")]: {
      border: "none"
    },
    zIndex: "inherit"
  }
}));
var DRAWER_WIDTH = 240;
var CLOSED_DRAWER_WIDTH = 55;

// node_modules/ra-ui-materialui/src/layout/Menu.tsx
var import_get2 = __toESM(require_get());
init_clsx();

// node_modules/ra-ui-materialui/src/layout/ResourceMenuItem.tsx
var import_react17 = __toESM(require_react());
var import_ViewList = __toESM(require_ViewList());
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
var ResourceMenuItem = ({ name }) => {
  const resources = useResourceDefinitions();
  const { canAccess, isPending } = useCanAccess({
    action: "list",
    resource: name
  });
  const getResourceLabel = useGetResourceLabel();
  const createPath = useCreatePath();
  if (!resources || !resources[name] || isPending || canAccess === false)
    return null;
  return (0, import_jsx_runtime36.jsx)(
    MenuItemLink,
    {
      to: createPath({
        resource: name,
        type: "list"
      }),
      state: { _scrollToTop: true },
      primaryText: (0, import_jsx_runtime36.jsx)(import_jsx_runtime36.Fragment, { children: getResourceLabel(name, 2) }),
      leftIcon: resources[name].icon ? (0, import_react17.createElement)(resources[name].icon) : (0, import_jsx_runtime36.jsx)(import_ViewList.default, {})
    }
  );
};

// node_modules/ra-ui-materialui/src/layout/ResourceMenuItems.tsx
var import_jsx_runtime37 = __toESM(require_jsx_runtime());
var ResourceMenuItems = () => {
  const resources = useResourceDefinitions();
  return (0, import_jsx_runtime37.jsx)(import_jsx_runtime37.Fragment, { children: Object.keys(resources).filter((name) => resources[name].hasList).map((name) => (0, import_jsx_runtime37.jsx)(ResourceMenuItem, { name }, name)) });
};

// node_modules/ra-ui-materialui/src/layout/Menu.tsx
var import_jsx_runtime38 = __toESM(require_jsx_runtime());
var Menu = (props) => {
  const { children, className, ...rest } = props;
  const hasDashboard = useHasDashboard();
  const [open] = useSidebarState();
  return (0, import_jsx_runtime38.jsxs)(
    Root10,
    {
      className: clsx_default(
        {
          [MenuClasses.open]: open,
          [MenuClasses.closed]: !open
        },
        className
      ),
      ...rest,
      children: [
        hasDashboard && !children && (0, import_jsx_runtime38.jsx)(DashboardMenuItem, {}),
        children ?? (0, import_jsx_runtime38.jsx)(ResourceMenuItems, {})
      ]
    }
  );
};
Menu.Item = MenuItemLink;
Menu.DashboardItem = DashboardMenuItem;
Menu.ResourceItem = ResourceMenuItem;
Menu.ResourceItems = ResourceMenuItems;
var PREFIX18 = "RaMenu";
var MenuClasses = {
  open: `${PREFIX18}-open`,
  closed: `${PREFIX18}-closed`
};
var Root10 = styled_default(MenuList_default, {
  name: PREFIX18,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  display: "flex",
  flexDirection: "column",
  justifyContent: "flex-start",
  [theme.breakpoints.only("xs")]: {
    marginTop: 0
  },
  transition: theme.transitions.create("width", {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen
  }),
  [`&.${MenuClasses.open}`]: {
    width: (0, import_get2.default)(theme, "sidebar.width", DRAWER_WIDTH)
  },
  [`&.${MenuClasses.closed}`]: {
    width: (0, import_get2.default)(theme, "sidebar.closedWidth", CLOSED_DRAWER_WIDTH)
  }
}));

// node_modules/ra-ui-materialui/src/layout/Loading.tsx
var import_jsx_runtime39 = __toESM(require_jsx_runtime());
var PREFIX19 = "RaLoading";
var LoadingClasses = {
  root: `${PREFIX19}-root`,
  icon: `${PREFIX19}-icon`,
  message: `${PREFIX19}-message`
};
var Root11 = styled_default("div", {
  name: PREFIX19,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  display: "flex",
  flexDirection: "column",
  justifyContent: "center",
  alignItems: "center",
  height: "100%",
  [`& .${LoadingClasses.message}`]: {
    textAlign: "center",
    fontFamily: "Roboto, sans-serif",
    color: theme.palette.text.disabled,
    paddingTop: "1em",
    paddingBottom: "1em"
  },
  [`& .${LoadingClasses.icon}`]: {
    width: "9em",
    height: "9em"
  }
}));

// node_modules/ra-ui-materialui/src/layout/Layout.tsx
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
var PREFIX20 = "RaLayout";
var LayoutClasses = {
  appFrame: `${PREFIX20}-appFrame`,
  contentWithSidebar: `${PREFIX20}-contentWithSidebar`,
  content: `${PREFIX20}-content`
};
var Core = styled_default("div", {
  name: PREFIX20,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  display: "flex",
  flexDirection: "column",
  zIndex: 1,
  minHeight: "100vh",
  backgroundColor: theme.palette.background.default,
  position: "relative",
  minWidth: "fit-content",
  width: "100%",
  color: theme.palette.getContrastText(theme.palette.background.default),
  [`& .${LayoutClasses.appFrame}`]: {
    display: "flex",
    flexDirection: "column",
    flexGrow: 1,
    marginTop: theme.spacing(6),
    [theme.breakpoints.down("sm")]: {
      marginTop: theme.spacing(7)
    }
  },
  [`& .${LayoutClasses.contentWithSidebar}`]: {
    display: "flex",
    flexGrow: 1,
    transition: theme.transitions.create("margin", {
      easing: theme.transitions.easing.easeOut,
      duration: theme.transitions.duration.enteringScreen
    })
  },
  [`& .${LayoutClasses.content}`]: {
    backgroundColor: theme.palette.background.default,
    zIndex: 2,
    display: "flex",
    flexDirection: "column",
    flexGrow: 1,
    flexBasis: 0,
    padding: 0,
    [theme.breakpoints.up("xs")]: {
      paddingRight: theme.spacing(1),
      paddingLeft: theme.spacing(1)
    }
  }
}));

// node_modules/ra-ui-materialui/src/layout/LinearProgress.tsx
var import_jsx_runtime41 = __toESM(require_jsx_runtime());
var LinearProgress = ({
  timeout = 1e3,
  ...props
}) => {
  const { className, ...rest } = props;
  const oneSecondHasPassed = useTimeout(timeout);
  return oneSecondHasPassed ? (0, import_jsx_runtime41.jsx)(StyledProgress, { className, ...rest }) : (0, import_jsx_runtime41.jsx)(Box_default, { my: 1, height: 4, component: "span", display: "block" });
};
LinearProgress.displayName = "LinearProgress";
var PREFIX21 = "RaLinearProgress";
var StyledProgress = styled_default(LinearProgress_default, {
  name: PREFIX21,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  margin: `${theme.spacing(1)} 0`,
  width: theme.spacing(20)
}));

// node_modules/ra-ui-materialui/src/layout/LoadingPage.tsx
var import_jsx_runtime42 = __toESM(require_jsx_runtime());

// node_modules/ra-ui-materialui/src/layout/NotFound.tsx
var import_HotTub = __toESM(require_HotTub());
var import_History2 = __toESM(require_History());
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
var PREFIX22 = "RaNotFound";
var NotFoundClasses = {
  icon: `${PREFIX22}-icon`,
  message: `${PREFIX22}-message`,
  toolbar: `${PREFIX22}-toolbar`
};
var Root12 = styled_default("div", {
  name: PREFIX22,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  display: "flex",
  flexDirection: "column",
  justifyContent: "center",
  [theme.breakpoints.up("md")]: {
    height: "100%"
  },
  [theme.breakpoints.down("md")]: {
    height: "100vh",
    marginTop: "-3em"
  },
  [`& .${NotFoundClasses.icon}`]: {
    width: "9em",
    height: "9em"
  },
  [`& .${NotFoundClasses.message}`]: {
    textAlign: "center",
    fontFamily: "Roboto, sans-serif",
    opacity: 0.5,
    margin: "0 1em"
  },
  [`& .${NotFoundClasses.toolbar}`]: {
    textAlign: "center",
    marginTop: "2em"
  }
}));

// node_modules/ra-ui-materialui/src/layout/Notification.tsx
var React9 = __toESM(require_react());
var import_react19 = __toESM(require_react());
init_clsx();
var import_jsx_runtime44 = __toESM(require_jsx_runtime());
var PREFIX23 = "RaNotification";
var NotificationClasses = {
  success: `${PREFIX23}-success`,
  error: `${PREFIX23}-error`,
  warning: `${PREFIX23}-warning`,
  undo: `${PREFIX23}-undo`,
  multiLine: `${PREFIX23}-multiLine`
};
var StyledSnackbar = styled_default(Snackbar_default, {
  name: PREFIX23,
  overridesResolver: (props, styles) => styles.root
})(({ theme, type }) => ({
  [`& .${NotificationClasses.success}`]: {
    backgroundColor: theme == null ? void 0 : theme.palette.success.main,
    color: theme == null ? void 0 : theme.palette.success.contrastText
  },
  [`& .${NotificationClasses.error}`]: {
    backgroundColor: theme == null ? void 0 : theme.palette.error.main,
    color: theme == null ? void 0 : theme.palette.error.contrastText
  },
  [`& .${NotificationClasses.warning}`]: {
    backgroundColor: theme == null ? void 0 : theme.palette.warning.main,
    color: theme == null ? void 0 : theme.palette.warning.contrastText
  },
  [`& .${NotificationClasses.undo}`]: {
    color: type === "success" ? theme == null ? void 0 : theme.palette.success.contrastText : theme == null ? void 0 : theme.palette.primary.light
  },
  [`& .${NotificationClasses.multiLine}`]: {
    whiteSpace: "pre-wrap"
  }
}));

// node_modules/ra-ui-materialui/src/layout/TopToolbar.tsx
var import_jsx_runtime45 = __toESM(require_jsx_runtime());
var PREFIX24 = "RaTopToolbar";
var StyledToolbar = styled_default(Toolbar_default, {
  name: PREFIX24,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  display: "flex",
  justifyContent: "flex-end",
  alignItems: "flex-end",
  gap: theme.spacing(1),
  whiteSpace: "nowrap",
  flex: "0 1 auto",
  padding: theme.spacing(0.5),
  paddingBottom: theme.spacing(1),
  [theme.breakpoints.down("md")]: {
    flex: "0 1 100%"
  },
  [theme.breakpoints.down("sm")]: {
    backgroundColor: theme.palette.background.paper,
    padding: 0,
    paddingBottom: 0
  }
}));

// node_modules/ra-ui-materialui/src/layout/useUserMenu.ts
var import_react20 = __toESM(require_react());

// node_modules/ra-ui-materialui/src/button/BulkDeleteWithConfirmButton.tsx
var import_inflection = __toESM(require_inflection());
var import_jsx_runtime46 = __toESM(require_jsx_runtime());
var BulkDeleteWithConfirmButton = (props) => {
  const {
    confirmTitle = "ra.message.bulk_delete_title",
    confirmContent = "ra.message.bulk_delete_content",
    confirmColor = "primary",
    icon = defaultIcon6,
    label = "ra.action.delete",
    mutationMode = "pessimistic",
    mutationOptions = {},
    successMessage,
    onClick,
    ...rest
  } = props;
  const { meta: mutationMeta, ...otherMutationOptions } = mutationOptions;
  const { selectedIds, onUnselectItems } = useListContext();
  const [isOpen, setOpen] = useSafeSetState(false);
  const notify = useNotify();
  const resource = useResourceContext(props);
  const refresh = useRefresh();
  const translate = useTranslate();
  const [deleteMany, { isPending }] = useDeleteMany(
    resource,
    { ids: selectedIds, meta: mutationMeta },
    {
      onSuccess: () => {
        refresh();
        notify(
          successMessage ?? `resources.${resource}.notifications.deleted`,
          {
            type: "info",
            messageArgs: {
              smart_count: selectedIds.length,
              _: translate("ra.notification.deleted", {
                smart_count: selectedIds.length
              })
            },
            undoable: mutationMode === "undoable"
          }
        );
        onUnselectItems();
        setOpen(false);
      },
      onError: (error) => {
        notify(
          typeof error === "string" ? error : error.message || "ra.notification.http_error",
          {
            type: "error",
            messageArgs: {
              _: typeof error === "string" ? error : error && error.message ? error.message : void 0
            }
          }
        );
        setOpen(false);
      },
      mutationMode,
      ...otherMutationOptions
    }
  );
  const handleClick = (e) => {
    setOpen(true);
    e.stopPropagation();
  };
  const handleDialogClose = () => {
    setOpen(false);
  };
  const handleDelete = (e) => {
    deleteMany();
    if (typeof onClick === "function") {
      onClick(e);
    }
  };
  return (0, import_jsx_runtime46.jsxs)(import_react21.Fragment, { children: [
    (0, import_jsx_runtime46.jsx)(
      StyledButton3,
      {
        onClick: handleClick,
        label,
        ...sanitizeRestProps2(rest),
        children: icon
      }
    ),
    (0, import_jsx_runtime46.jsx)(
      Confirm,
      {
        isOpen,
        loading: isPending,
        title: confirmTitle,
        content: confirmContent,
        confirmColor,
        translateOptions: {
          smart_count: selectedIds.length,
          name: translate(`resources.${resource}.forcedCaseName`, {
            smart_count: selectedIds.length,
            _: (0, import_inflection.humanize)(
              translate(`resources.${resource}.name`, {
                smart_count: selectedIds.length,
                _: resource ? (0, import_inflection.inflect)(resource, selectedIds.length) : void 0
              }),
              true
            )
          })
        },
        onConfirm: handleDelete,
        onClose: handleDialogClose
      }
    )
  ] });
};
var sanitizeRestProps2 = ({
  classes,
  label,
  ...rest
}) => rest;
var PREFIX25 = "RaBulkDeleteWithConfirmButton";
var StyledButton3 = styled_default(Button, {
  name: PREFIX25,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  color: theme.palette.error.main,
  "&:hover": {
    backgroundColor: alpha(theme.palette.error.main, 0.12),
    // Reset on mouse devices
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  }
}));
var defaultIcon6 = (0, import_jsx_runtime46.jsx)(import_Delete.default, {});

// node_modules/ra-ui-materialui/src/button/BulkDeleteWithUndoButton.tsx
var import_Delete2 = __toESM(require_Delete());
var import_jsx_runtime47 = __toESM(require_jsx_runtime());
var BulkDeleteWithUndoButton = (props) => {
  const {
    label = "ra.action.delete",
    icon = defaultIcon7,
    onClick,
    mutationOptions = {},
    successMessage,
    ...rest
  } = props;
  const { meta: mutationMeta, ...otherMutationOptions } = mutationOptions;
  const { selectedIds, onUnselectItems } = useListContext();
  const notify = useNotify();
  const resource = useResourceContext(props);
  const refresh = useRefresh();
  const translate = useTranslate();
  const [deleteMany, { isPending }] = useDeleteMany();
  const handleClick = (e) => {
    deleteMany(
      resource,
      { ids: selectedIds, meta: mutationMeta },
      {
        onSuccess: () => {
          notify(
            successMessage ?? `resources.${resource}.notifications.deleted`,
            {
              type: "info",
              messageArgs: {
                smart_count: selectedIds.length,
                _: translate("ra.notification.deleted", {
                  smart_count: selectedIds.length
                })
              },
              undoable: true
            }
          );
          onUnselectItems();
        },
        onError: (error) => {
          notify(
            typeof error === "string" ? error : error.message || "ra.notification.http_error",
            {
              type: "error",
              messageArgs: {
                _: typeof error === "string" ? error : error && error.message ? error.message : void 0
              }
            }
          );
          refresh();
        },
        mutationMode: "undoable",
        ...otherMutationOptions
      }
    );
    if (typeof onClick === "function") {
      onClick(e);
    }
  };
  return (0, import_jsx_runtime47.jsx)(
    StyledButton4,
    {
      onClick: handleClick,
      label,
      disabled: isPending,
      ...sanitizeRestProps3(rest),
      children: icon
    }
  );
};
var defaultIcon7 = (0, import_jsx_runtime47.jsx)(import_Delete2.default, {});
var sanitizeRestProps3 = ({
  classes,
  label,
  ...rest
}) => rest;
var PREFIX26 = "RaBulkDeleteWithUndoButton";
var StyledButton4 = styled_default(Button, {
  name: PREFIX26,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  color: theme.palette.error.main,
  "&:hover": {
    backgroundColor: alpha(theme.palette.error.main, 0.12),
    // Reset on mouse devices
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  }
}));

// node_modules/ra-ui-materialui/src/button/BulkDeleteButton.tsx
var import_jsx_runtime48 = __toESM(require_jsx_runtime());
var BulkDeleteButton = ({
  mutationMode = "undoable",
  ...props
}) => {
  const resource = useResourceContext(props);
  if (!resource) {
    throw new Error(
      "<BulkDeleteButton> components should be used inside a <Resource> component or provided with a resource prop."
    );
  }
  const { canAccess, isPending } = useCanAccess({
    action: "delete",
    resource
  });
  if (!canAccess || isPending) {
    return null;
  }
  return mutationMode === "undoable" ? (0, import_jsx_runtime48.jsx)(BulkDeleteWithUndoButton, { ...props }) : (0, import_jsx_runtime48.jsx)(BulkDeleteWithConfirmButton, { mutationMode, ...props });
};

// node_modules/ra-ui-materialui/src/button/BulkExportButton.tsx
var import_react22 = __toESM(require_react());
var import_GetApp = __toESM(require_GetApp());
var import_jsx_runtime49 = __toESM(require_jsx_runtime());
var BulkExportButton = (props) => {
  const {
    onClick,
    label = "ra.action.export",
    icon = defaultIcon8,
    exporter: customExporter,
    meta,
    ...rest
  } = props;
  const resource = useResourceContext(props);
  const { exporter: exporterFromContext, selectedIds } = useListContext();
  const exporter = customExporter || exporterFromContext;
  const dataProvider = useDataProvider();
  const notify = useNotify();
  const handleClick = (0, import_react22.useCallback)(
    (event) => {
      if (exporter && resource) {
        dataProvider.getMany(resource, { ids: selectedIds, meta }).then(
          ({ data }) => exporter(
            data,
            fetchRelatedRecords(dataProvider),
            dataProvider,
            resource
          )
        ).catch((error) => {
          console.error(error);
          notify("ra.notification.http_error", {
            type: "error"
          });
        });
      }
      if (typeof onClick === "function") {
        onClick(event);
      }
    },
    [dataProvider, exporter, notify, onClick, resource, selectedIds, meta]
  );
  return (0, import_jsx_runtime49.jsx)(
    Button,
    {
      onClick: handleClick,
      label,
      ...sanitizeRestProps4(rest),
      children: icon
    }
  );
};
var defaultIcon8 = (0, import_jsx_runtime49.jsx)(import_GetApp.default, {});
var sanitizeRestProps4 = ({
  resource,
  ...rest
}) => rest;

// node_modules/ra-ui-materialui/src/button/BulkUpdateWithConfirmButton.tsx
var import_react23 = __toESM(require_react());
var import_Update = __toESM(require_Update());
var import_inflection2 = __toESM(require_inflection());
var import_jsx_runtime50 = __toESM(require_jsx_runtime());
var BulkUpdateWithConfirmButton = (props) => {
  const notify = useNotify();
  const translate = useTranslate();
  const resource = useResourceContext(props);
  const unselectAll = useUnselectAll(resource);
  const [isOpen, setOpen] = (0, import_react23.useState)(false);
  const { selectedIds } = useListContext();
  const {
    confirmTitle = "ra.message.bulk_update_title",
    confirmContent = "ra.message.bulk_update_content",
    data,
    icon = defaultIcon9,
    label = "ra.action.update",
    mutationMode = "pessimistic",
    onClick,
    onSuccess = () => {
      notify(`resources.${resource}.notifications.updated`, {
        type: "info",
        messageArgs: {
          smart_count: selectedIds.length,
          _: translate("ra.notification.updated", {
            smart_count: selectedIds.length
          })
        },
        undoable: mutationMode === "undoable"
      });
      unselectAll();
      setOpen(false);
    },
    onError = (error) => {
      notify(
        typeof error === "string" ? error : error.message || "ra.notification.http_error",
        {
          type: "error",
          messageArgs: {
            _: typeof error === "string" ? error : error && error.message ? error.message : void 0
          }
        }
      );
      setOpen(false);
    },
    mutationOptions = {},
    ...rest
  } = props;
  const { meta: mutationMeta, ...otherMutationOptions } = mutationOptions;
  const [updateMany, { isPending }] = useUpdateMany(
    resource,
    { ids: selectedIds, data, meta: mutationMeta },
    {
      onSuccess,
      onError,
      mutationMode,
      ...otherMutationOptions
    }
  );
  const handleClick = (e) => {
    setOpen(true);
    e.stopPropagation();
  };
  const handleDialogClose = () => {
    setOpen(false);
  };
  const handleUpdate = (e) => {
    updateMany();
    if (typeof onClick === "function") {
      onClick(e);
    }
  };
  return (0, import_jsx_runtime50.jsxs)(import_react23.Fragment, { children: [
    (0, import_jsx_runtime50.jsx)(
      StyledButton5,
      {
        onClick: handleClick,
        label,
        ...sanitizeRestProps5(rest),
        children: icon
      }
    ),
    (0, import_jsx_runtime50.jsx)(
      Confirm,
      {
        isOpen,
        loading: isPending,
        title: confirmTitle,
        content: confirmContent,
        translateOptions: {
          smart_count: selectedIds.length,
          name: translate(`resources.${resource}.forcedCaseName`, {
            smart_count: selectedIds.length,
            _: (0, import_inflection2.humanize)(
              translate(`resources.${resource}.name`, {
                smart_count: selectedIds.length,
                _: resource ? (0, import_inflection2.inflect)(resource, selectedIds.length) : void 0
              }),
              true
            )
          })
        },
        onConfirm: handleUpdate,
        onClose: handleDialogClose
      }
    )
  ] });
};
var sanitizeRestProps5 = ({
  label,
  onSuccess,
  onError,
  ...rest
}) => rest;
var PREFIX27 = "RaBulkUpdateWithConfirmButton";
var StyledButton5 = styled_default(Button, {
  name: PREFIX27,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  color: theme.palette.primary.main,
  "&:hover": {
    backgroundColor: alpha(theme.palette.primary.main, 0.12),
    // Reset on mouse devices
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  }
}));
var defaultIcon9 = (0, import_jsx_runtime50.jsx)(import_Update.default, {});

// node_modules/ra-ui-materialui/src/button/BulkUpdateWithUndoButton.tsx
var import_Update2 = __toESM(require_Update());
var import_jsx_runtime51 = __toESM(require_jsx_runtime());
var BulkUpdateWithUndoButton = (props) => {
  const { selectedIds } = useListContext();
  const notify = useNotify();
  const resource = useResourceContext(props);
  const unselectAll = useUnselectAll(resource);
  const refresh = useRefresh();
  const translate = useTranslate();
  const {
    data,
    label = "ra.action.update",
    icon = defaultIcon10,
    successMessage,
    onClick,
    onSuccess = () => {
      notify(
        successMessage ?? `resources.${resource}.notifications.updated`,
        {
          type: "info",
          messageArgs: {
            smart_count: selectedIds.length,
            _: translate("ra.notification.updated", {
              smart_count: selectedIds.length
            })
          },
          undoable: true
        }
      );
      unselectAll();
    },
    onError = (error) => {
      notify(
        typeof error === "string" ? error : error.message || "ra.notification.http_error",
        {
          type: "error",
          messageArgs: {
            _: typeof error === "string" ? error : error && error.message ? error.message : void 0
          }
        }
      );
      refresh();
    },
    mutationOptions = {},
    ...rest
  } = props;
  const { meta: mutationMeta, ...otherMutationOptions } = mutationOptions;
  const [updateMany, { isPending }] = useUpdateMany(
    resource,
    { ids: selectedIds, data, meta: mutationMeta },
    {
      onSuccess,
      onError,
      mutationMode: "undoable",
      ...otherMutationOptions
    }
  );
  const handleClick = (e) => {
    updateMany();
    if (typeof onClick === "function") {
      onClick(e);
    }
  };
  return (0, import_jsx_runtime51.jsx)(
    StyledButton6,
    {
      onClick: handleClick,
      label,
      disabled: isPending,
      ...sanitizeRestProps6(rest),
      children: icon
    }
  );
};
var defaultIcon10 = (0, import_jsx_runtime51.jsx)(import_Update2.default, {});
var sanitizeRestProps6 = ({
  label,
  onSuccess,
  onError,
  ...rest
}) => rest;
var PREFIX28 = "RaBulkUpdateWithUndoButton";
var StyledButton6 = styled_default(Button, {
  name: PREFIX28,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  color: theme.palette.primary.main,
  "&:hover": {
    backgroundColor: alpha(theme.palette.primary.main, 0.12),
    // Reset on mouse devices
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  }
}));

// node_modules/ra-ui-materialui/src/button/BulkUpdateButton.tsx
var import_jsx_runtime52 = __toESM(require_jsx_runtime());
var BulkUpdateButton = (props) => {
  const { mutationMode = "undoable", data = defaultData, ...rest } = props;
  return mutationMode === "undoable" ? (0, import_jsx_runtime52.jsx)(BulkUpdateWithUndoButton, { data, ...rest }) : (0, import_jsx_runtime52.jsx)(
    BulkUpdateWithConfirmButton,
    {
      mutationMode,
      data,
      ...rest
    }
  );
};
var defaultData = [];

// node_modules/ra-ui-materialui/src/button/DeleteWithUndoButton.tsx
var import_Delete3 = __toESM(require_Delete());
init_clsx();
var import_jsx_runtime53 = __toESM(require_jsx_runtime());
var DeleteWithUndoButton = (props) => {
  const {
    label = "ra.action.delete",
    className,
    icon = defaultIcon11,
    onClick,
    redirect = "list",
    mutationOptions,
    color = "error",
    successMessage,
    ...rest
  } = props;
  const record = useRecordContext(props);
  const resource = useResourceContext(props);
  const { isPending, handleDelete } = useDeleteWithUndoController_default({
    record,
    resource,
    redirect,
    onClick,
    mutationOptions,
    successMessage
  });
  return (0, import_jsx_runtime53.jsx)(
    Button,
    {
      onClick: handleDelete,
      disabled: isPending,
      label,
      className: clsx_default("ra-delete-button", className),
      color,
      ...rest,
      children: icon
    },
    "button"
  );
};
var defaultIcon11 = (0, import_jsx_runtime53.jsx)(import_Delete3.default, {});

// node_modules/ra-ui-materialui/src/button/DeleteWithConfirmButton.tsx
var import_react24 = __toESM(require_react());
var import_Delete4 = __toESM(require_Delete());
init_clsx();
var import_inflection3 = __toESM(require_inflection());
var import_jsx_runtime54 = __toESM(require_jsx_runtime());
var DeleteWithConfirmButton = (props) => {
  const {
    className,
    confirmTitle = "ra.message.delete_title",
    confirmContent = "ra.message.delete_content",
    confirmColor = "primary",
    icon = defaultIcon12,
    label = "ra.action.delete",
    mutationMode = "pessimistic",
    onClick,
    redirect = "list",
    translateOptions = {},
    mutationOptions,
    color = "error",
    successMessage,
    ...rest
  } = props;
  const translate = useTranslate();
  const record = useRecordContext(props);
  const resource = useResourceContext(props);
  const {
    open,
    isPending,
    handleDialogOpen,
    handleDialogClose,
    handleDelete
  } = useDeleteWithConfirmController_default({
    record,
    redirect,
    mutationMode,
    onClick,
    mutationOptions,
    resource,
    successMessage
  });
  return (0, import_jsx_runtime54.jsxs)(import_react24.Fragment, { children: [
    (0, import_jsx_runtime54.jsx)(
      Button,
      {
        onClick: handleDialogOpen,
        label,
        className: clsx_default("ra-delete-button", className),
        color,
        ...rest,
        children: icon
      },
      "button"
    ),
    (0, import_jsx_runtime54.jsx)(
      Confirm,
      {
        isOpen: open,
        loading: isPending,
        title: confirmTitle,
        content: confirmContent,
        confirmColor,
        translateOptions: {
          name: translate(`resources.${resource}.forcedCaseName`, {
            smart_count: 1,
            _: (0, import_inflection3.humanize)(
              translate(`resources.${resource}.name`, {
                smart_count: 1,
                _: resource ? (0, import_inflection3.singularize)(resource) : void 0
              }),
              true
            )
          }),
          id: record == null ? void 0 : record.id,
          ...translateOptions
        },
        onConfirm: handleDelete,
        onClose: handleDialogClose
      }
    )
  ] });
};
var defaultIcon12 = (0, import_jsx_runtime54.jsx)(import_Delete4.default, {});

// node_modules/ra-ui-materialui/src/button/DeleteButton.tsx
var import_jsx_runtime55 = __toESM(require_jsx_runtime());
var DeleteButton = (props) => {
  const { mutationMode, ...rest } = props;
  const record = useRecordContext(props);
  const resource = useResourceContext(props);
  if (!resource) {
    throw new Error(
      "<DeleteButton> components should be used inside a <Resource> component or provided the resource prop."
    );
  }
  const { canAccess, isPending } = useCanAccess({
    action: "delete",
    resource,
    record
  });
  const saveContext = useSaveContext(props);
  if (!record || record.id == null || !canAccess || isPending) {
    return null;
  }
  const finalMutationMode = mutationMode ? mutationMode : (saveContext == null ? void 0 : saveContext.mutationMode) ? saveContext.mutationMode : "undoable";
  return finalMutationMode === "undoable" ? (0, import_jsx_runtime55.jsx)(DeleteWithUndoButton, { record, ...rest }) : (0, import_jsx_runtime55.jsx)(
    DeleteWithConfirmButton,
    {
      mutationMode: finalMutationMode,
      record,
      ...rest
    }
  );
};

// node_modules/ra-ui-materialui/src/button/EditButton.tsx
init_clsx();
var import_Create = __toESM(require_Create());
var import_jsx_runtime56 = __toESM(require_jsx_runtime());
var EditButton = (props) => {
  const {
    icon = defaultIcon13,
    label = "ra.action.edit",
    scrollToTop = true,
    className,
    ...rest
  } = props;
  const resource = useResourceContext(props);
  if (!resource) {
    throw new Error(
      "<EditButton> components should be used inside a <Resource> component or provided with a resource prop. (The <Resource> component set the resource prop for all its children)."
    );
  }
  const record = useRecordContext(props);
  const createPath = useCreatePath();
  const { canAccess, isPending } = useCanAccess({
    action: "edit",
    resource,
    record
  });
  if (!record || !canAccess || isPending) return null;
  return (0, import_jsx_runtime56.jsx)(
    StyledButton7,
    {
      component: Link,
      to: createPath({ type: "edit", resource, id: record.id }),
      state: scrollStates3[String(scrollToTop)],
      label,
      onClick: stopPropagation3,
      className: clsx_default(EditButtonClasses.root, className),
      ...rest,
      children: icon
    }
  );
};
var scrollStates3 = {
  true: { _scrollToTop: true },
  false: {}
};
var defaultIcon13 = (0, import_jsx_runtime56.jsx)(import_Create.default, {});
var stopPropagation3 = (e) => e.stopPropagation();
var PREFIX29 = "RaEditButton";
var EditButtonClasses = {
  root: `${PREFIX29}-root`
};
var StyledButton7 = styled_default(Button, {
  name: PREFIX29,
  overridesResolver: (_props, styles) => styles.root
})({});

// node_modules/ra-ui-materialui/src/button/ExportButton.tsx
var import_react25 = __toESM(require_react());
var import_GetApp2 = __toESM(require_GetApp());
var import_jsx_runtime57 = __toESM(require_jsx_runtime());
var ExportButton = (props) => {
  const {
    maxResults = 1e3,
    onClick,
    label = "ra.action.export",
    icon = defaultIcon14,
    exporter: customExporter,
    meta,
    ...rest
  } = props;
  const {
    filter,
    filterValues,
    resource,
    sort,
    exporter: exporterFromContext,
    total
  } = useListContext();
  const exporter = customExporter || exporterFromContext;
  const dataProvider = useDataProvider();
  const notify = useNotify();
  const handleClick = (0, import_react25.useCallback)(
    (event) => {
      dataProvider.getList(resource, {
        sort,
        filter: filter ? { ...filterValues, ...filter } : filterValues,
        pagination: { page: 1, perPage: maxResults },
        meta
      }).then(
        ({ data }) => exporter && exporter(
          data,
          fetchRelatedRecords(dataProvider),
          dataProvider,
          resource
        )
      ).catch((error) => {
        console.error(error);
        notify("ra.notification.http_error", { type: "error" });
      });
      if (typeof onClick === "function") {
        onClick(event);
      }
    },
    [
      dataProvider,
      exporter,
      filter,
      filterValues,
      maxResults,
      notify,
      onClick,
      resource,
      sort,
      meta
    ]
  );
  return (0, import_jsx_runtime57.jsx)(
    Button,
    {
      onClick: handleClick,
      label,
      disabled: total === 0,
      ...sanitizeRestProps7(rest),
      children: icon
    }
  );
};
var defaultIcon14 = (0, import_jsx_runtime57.jsx)(import_GetApp2.default, {});
var sanitizeRestProps7 = ({
  resource,
  ...rest
}) => rest;

// node_modules/ra-ui-materialui/src/button/IconButtonWithTooltip.tsx
var React11 = __toESM(require_react());
var import_jsx_runtime58 = __toESM(require_jsx_runtime());
var IconButtonWithTooltip = ({
  label,
  onClick,
  ...props
}) => {
  const translate = useTranslate();
  const [open, setOpen] = React11.useState(false);
  const handleClose = () => {
    setOpen(false);
  };
  const handleOpen = () => {
    setOpen(true);
  };
  const translatedLabel = translate(label, { _: label });
  const handleClick = (event) => {
    handleClose();
    onClick && onClick(event);
  };
  return (0, import_jsx_runtime58.jsx)(
    Tooltip_default,
    {
      title: translatedLabel,
      open,
      onOpen: handleOpen,
      onClose: handleClose,
      children: (0, import_jsx_runtime58.jsx)(
        IconButton_default,
        {
          "aria-label": translatedLabel,
          onClick: handleClick,
          ...props
        }
      )
    }
  );
};

// node_modules/ra-ui-materialui/src/button/LocalesMenuButton.tsx
var import_react26 = __toESM(require_react());
var import_Translate = __toESM(require_Translate());
var import_ExpandMore2 = __toESM(require_ExpandMore());
var import_jsx_runtime59 = __toESM(require_jsx_runtime());
var LocalesMenuButton = (props) => {
  const { icon = DefaultIcon2, languages: languagesProp } = props;
  const [anchorEl, setAnchorEl] = (0, import_react26.useState)(null);
  const languages = useLocales({ locales: languagesProp });
  const [locale, setLocale] = useLocaleState();
  const getNameForLocale = (locale2) => {
    const language = languages.find((language2) => language2.locale === locale2);
    return language ? language.name : "";
  };
  const changeLocale = (locale2) => () => {
    setLocale(locale2);
    setAnchorEl(null);
  };
  const handleLanguageClick = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  return (0, import_jsx_runtime59.jsxs)(Root13, { component: "span", children: [
    (0, import_jsx_runtime59.jsx)(
      Button_default,
      {
        color: "inherit",
        variant: "text",
        "aria-controls": "simple-menu",
        "aria-label": "",
        "aria-haspopup": "true",
        onClick: handleLanguageClick,
        startIcon: icon,
        endIcon: (0, import_jsx_runtime59.jsx)(import_ExpandMore2.default, { fontSize: "small" }),
        children: getNameForLocale(locale)
      }
    ),
    (0, import_jsx_runtime59.jsx)(
      Menu_default,
      {
        id: "simple-menu",
        anchorEl,
        keepMounted: true,
        open: Boolean(anchorEl),
        onClose: handleClose,
        children: languages.map((language) => (0, import_jsx_runtime59.jsx)(
          MenuItem_default,
          {
            onClick: changeLocale(language.locale),
            selected: language.locale === locale,
            children: language.name
          },
          language.locale
        ))
      }
    )
  ] });
};
var DefaultIcon2 = (0, import_jsx_runtime59.jsx)(import_Translate.default, {});
var PREFIX30 = "RaLocalesMenuButton";
var LocalesMenuButtonClasses = {};
var Root13 = styled_default(Box_default, {
  name: PREFIX30,
  overridesResolver: (props, styles) => styles.root
})({});

// node_modules/ra-ui-materialui/src/button/ListButton.tsx
var import_List = __toESM(require_List());
var import_jsx_runtime60 = __toESM(require_jsx_runtime());
var ListButton = (props) => {
  const {
    icon = defaultIcon15,
    label = "ra.action.list",
    resource: resourceProp,
    scrollToTop = true,
    ...rest
  } = props;
  const resource = useResourceContext(props);
  if (!resource) {
    throw new Error(
      "<ListButton> components should be used inside a <Resource> component or provided the resource prop."
    );
  }
  const { canAccess, isPending } = useCanAccess({
    action: "list",
    resource
  });
  const createPath = useCreatePath();
  if (!canAccess || isPending) {
    return null;
  }
  return (0, import_jsx_runtime60.jsx)(
    Button,
    {
      component: Link,
      to: createPath({ type: "list", resource }),
      state: scrollStates4[String(scrollToTop)],
      label,
      ...rest,
      children: icon
    }
  );
};
var scrollStates4 = {
  true: { _scrollToTop: true },
  false: {}
};
var defaultIcon15 = (0, import_jsx_runtime60.jsx)(import_List.default, {});

// node_modules/ra-ui-materialui/src/button/PrevNextButtons.tsx
var import_NavigateBefore = __toESM(require_NavigateBefore());
var import_NavigateNext = __toESM(require_NavigateNext());
var import_Error2 = __toESM(require_Error());
init_clsx();
var import_jsx_runtime61 = __toESM(require_jsx_runtime());
var PrevNextButtons = (props) => {
  const { sx } = props;
  const {
    hasPrev,
    hasNext,
    prevPath,
    nextPath,
    index,
    total,
    error,
    isPending
  } = usePrevNextController(props);
  const translate = useTranslate();
  if (isPending) {
    return (0, import_jsx_runtime61.jsx)(Box_default, { minHeight: 34, display: "flex", alignItems: "center", children: (0, import_jsx_runtime61.jsx)(LinearProgress, {}) });
  }
  if (error) {
    return (0, import_jsx_runtime61.jsx)(
      import_Error2.default,
      {
        color: "error",
        fontSize: "small",
        titleAccess: "error",
        "aria-errormessage": error.message
      }
    );
  }
  if (!hasPrev && !hasNext) {
    return (0, import_jsx_runtime61.jsx)(Box_default, { minHeight: 34 });
  }
  return (0, import_jsx_runtime61.jsxs)(
    Root14,
    {
      sx,
      role: "navigation",
      direction: "row",
      className: clsx_default(PrevNextButtonClasses.root),
      children: [
        hasPrev && prevPath ? (0, import_jsx_runtime61.jsx)(
          IconButton_default,
          {
            component: Link,
            to: prevPath,
            "aria-label": translate("ra.navigation.previous"),
            size: "small",
            children: (0, import_jsx_runtime61.jsx)(import_NavigateBefore.default, {})
          }
        ) : (0, import_jsx_runtime61.jsx)(
          IconButton_default,
          {
            "aria-label": translate("ra.navigation.previous"),
            disabled: true,
            size: "small",
            children: (0, import_jsx_runtime61.jsx)(import_NavigateBefore.default, {})
          }
        ),
        typeof index === "number" && (0, import_jsx_runtime61.jsxs)(Typography_default, { variant: "body2", children: [
          index + 1,
          " / ",
          total
        ] }),
        hasNext && nextPath ? (0, import_jsx_runtime61.jsx)(
          IconButton_default,
          {
            component: Link,
            to: nextPath,
            "aria-label": translate("ra.navigation.next"),
            size: "small",
            children: (0, import_jsx_runtime61.jsx)(import_NavigateNext.default, {})
          }
        ) : (0, import_jsx_runtime61.jsx)(
          IconButton_default,
          {
            "aria-label": translate("ra.navigation.next"),
            disabled: true,
            size: "small",
            children: (0, import_jsx_runtime61.jsx)(import_NavigateNext.default, {})
          }
        )
      ]
    }
  );
};
var PREFIX31 = "RaPrevNextButton";
var PrevNextButtonClasses = {
  root: `${PREFIX31}-root`
};
var Root14 = styled_default(Stack_default, {
  name: PREFIX31,
  overridesResolver: (_props, styles) => styles.root
})({
  display: "inline-flex",
  alignItems: "center",
  gap: "0.5em"
});

// node_modules/ra-ui-materialui/src/button/RefreshButton.tsx
var import_react27 = __toESM(require_react());
var import_Refresh = __toESM(require_Refresh());
var import_jsx_runtime62 = __toESM(require_jsx_runtime());
var RefreshButton = (props) => {
  const {
    label = "ra.action.refresh",
    icon = defaultIcon16,
    onClick,
    ...rest
  } = props;
  const refresh = useRefresh();
  const handleClick = (0, import_react27.useCallback)(
    (event) => {
      event.preventDefault();
      refresh();
      if (typeof onClick === "function") {
        onClick(event);
      }
    },
    [refresh, onClick]
  );
  return (0, import_jsx_runtime62.jsx)(Button, { label, onClick: handleClick, ...rest, children: icon });
};
var defaultIcon16 = (0, import_jsx_runtime62.jsx)(import_Refresh.default, {});

// node_modules/ra-ui-materialui/src/button/RefreshIconButton.tsx
var import_react28 = __toESM(require_react());
var import_Refresh2 = __toESM(require_Refresh());
var import_jsx_runtime63 = __toESM(require_jsx_runtime());
var RefreshIconButton = (props) => {
  const {
    label = "ra.action.refresh",
    icon = defaultIcon17,
    onClick,
    className,
    ...rest
  } = props;
  const refresh = useRefresh();
  const translate = useTranslate();
  const handleClick = (0, import_react28.useCallback)(
    (event) => {
      event.preventDefault();
      refresh();
      if (typeof onClick === "function") {
        onClick(event);
      }
    },
    [refresh, onClick]
  );
  return (0, import_jsx_runtime63.jsx)(Tooltip_default, { title: label && translate(label, { _: "Refresh" }), children: (0, import_jsx_runtime63.jsx)(
    IconButton_default,
    {
      "aria-label": label && translate(label, { _: "Refresh" }),
      className,
      color: "inherit",
      onClick: handleClick,
      ...rest,
      children: icon
    }
  ) });
};
var defaultIcon17 = (0, import_jsx_runtime63.jsx)(import_Refresh2.default, {});

// node_modules/ra-ui-materialui/src/button/SaveButton.tsx
var import_react29 = __toESM(require_react());
var import_Save = __toESM(require_Save());
var import_jsx_runtime64 = __toESM(require_jsx_runtime());
var SaveButton = (props) => {
  const {
    color = "primary",
    icon = defaultIcon18,
    invalid,
    label = "ra.action.save",
    onClick,
    mutationOptions,
    disabled: disabledProp,
    type = "submit",
    transform,
    variant = "contained",
    alwaysEnable = false,
    ...rest
  } = props;
  const translate = useTranslate();
  const form = useFormContext();
  const saveContext = useSaveContext();
  const { dirtyFields, isValidating, isSubmitting } = useFormState();
  const isDirty = Object.keys(dirtyFields).length > 0;
  const disabled = valueOrDefault(
    alwaysEnable === false || alwaysEnable === void 0 ? void 0 : !alwaysEnable,
    disabledProp || !isDirty || isValidating || isSubmitting
  );
  warning_default(
    type === "submit" && (mutationOptions && (mutationOptions.onSuccess || mutationOptions.onError) || transform),
    'Cannot use <SaveButton mutationOptions> props on a button of type "submit". To override the default mutation options on a particular save button, set the <SaveButton type="button"> prop, or set mutationOptions in the main view component (<Create> or <Edit>).'
  );
  const handleSubmit = (0, import_react29.useCallback)(
    async (values) => {
      let errors;
      if (saveContext == null ? void 0 : saveContext.save) {
        errors = await saveContext.save(values, {
          ...mutationOptions,
          transform
        });
      }
      if (errors != null) {
        setSubmissionErrors(errors, form.setError);
      }
    },
    [form.setError, saveContext, mutationOptions, transform]
  );
  const handleClick = (0, import_react29.useCallback)(
    async (event) => {
      if (onClick) {
        onClick(event);
      }
      if (event.defaultPrevented) {
        return;
      }
      if (type === "button") {
        event.stopPropagation();
        await form.handleSubmit(handleSubmit)(event);
      }
    },
    [onClick, type, form, handleSubmit]
  );
  const displayedLabel = label && translate(label, { _: label });
  return (0, import_jsx_runtime64.jsxs)(
    StyledButton8,
    {
      variant,
      type,
      color,
      "aria-label": displayedLabel,
      disabled,
      onClick: handleClick,
      ...rest,
      children: [
        isSubmitting ? (0, import_jsx_runtime64.jsx)(
          CircularProgress_default,
          {
            sx: circularProgressStyle,
            size: 14,
            thickness: 3,
            color: "inherit"
          }
        ) : icon,
        displayedLabel
      ]
    }
  );
};
var circularProgressStyle = {
  "&.MuiCircularProgress-root": {
    marginRight: "10px",
    marginLeft: "2px"
  }
};
var defaultIcon18 = (0, import_jsx_runtime64.jsx)(import_Save.default, {});
var PREFIX32 = "RaSaveButton";
var StyledButton8 = styled_default(Button_default, {
  name: PREFIX32,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  position: "relative",
  [`& .MuiSvgIcon-root, & .MuiIcon-root, & .MuiCircularProgress-root`]: {
    marginRight: theme.spacing(1)
  },
  [`& .MuiSvgIcon-root, & .MuiIcon-root`]: {
    fontSize: 18
  }
}));
var valueOrDefault = (value, defaultValue) => typeof value === "undefined" ? defaultValue : value;

// node_modules/ra-ui-materialui/src/button/SkipNavigationButton.tsx
var import_jsx_runtime65 = __toESM(require_jsx_runtime());
var SkipNavigationButton = () => {
  return (0, import_jsx_runtime65.jsx)(
    StyledButton9,
    {
      onClick: skipToContent,
      className: "skip-nav-button",
      label: "ra.navigation.skip_nav",
      variant: "contained"
    }
  );
};
var PREFIX33 = "RaSkipNavigationButton";
var StyledButton9 = styled_default(Button, {
  name: PREFIX33,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  position: "fixed",
  padding: theme.spacing(1),
  backgroundColor: theme.palette.background.default,
  color: theme.palette.getContrastText(theme.palette.background.default),
  transition: theme.transitions.create(["top", "opacity"], {
    easing: theme.transitions.easing.easeIn,
    duration: theme.transitions.duration.leavingScreen
  }),
  left: theme.spacing(2),
  top: theme.spacing(-10),
  zIndex: 5e3,
  "&:hover": {
    opacity: 0.8,
    backgroundColor: theme.palette.background.default
  },
  "&:focus": {
    top: theme.spacing(2),
    transition: theme.transitions.create(["top", "opacity"], {
      easing: theme.transitions.easing.easeOut,
      duration: theme.transitions.duration.enteringScreen
    })
  }
}));
var skipToContent = () => {
  if (typeof document === "undefined") return;
  const element = document.getElementById("main-content");
  if (!element) {
    if (true) {
      console.warn(
        'No element with id "main-content" was found. Ensure the element that contains your main content has an id of "main-content".'
      );
    }
    return;
  }
  element.setAttribute("tabIndex", "-1");
  element.focus();
  element.blur();
  element.removeAttribute("tabIndex");
};

// node_modules/ra-ui-materialui/src/button/UpdateWithConfirmButton.tsx
var import_react30 = __toESM(require_react());
var import_Update3 = __toESM(require_Update());
var import_inflection4 = __toESM(require_inflection());
var import_jsx_runtime66 = __toESM(require_jsx_runtime());
var UpdateWithConfirmButton = (props) => {
  const notify = useNotify();
  const translate = useTranslate();
  const resource = useResourceContext(props);
  const [isOpen, setOpen] = (0, import_react30.useState)(false);
  const record = useRecordContext(props);
  const {
    confirmTitle = "ra.message.bulk_update_title",
    confirmContent = "ra.message.bulk_update_content",
    data,
    icon = defaultIcon19,
    label = "ra.action.update",
    mutationMode = "pessimistic",
    onClick,
    mutationOptions = {},
    ...rest
  } = props;
  const {
    meta: mutationMeta,
    onSuccess = () => {
      notify(`resources.${resource}.notifications.updated`, {
        type: "info",
        messageArgs: {
          smart_count: 1,
          _: translate("ra.notification.updated", { smart_count: 1 })
        },
        undoable: mutationMode === "undoable"
      });
    },
    onError = (error) => {
      notify(
        typeof error === "string" ? error : error.message || "ra.notification.http_error",
        {
          type: "error",
          messageArgs: {
            _: typeof error === "string" ? error : error && error.message ? error.message : void 0
          }
        }
      );
    },
    onSettled = () => {
      setOpen(false);
    },
    ...otherMutationOptions
  } = mutationOptions;
  const [update, { isPending }] = useUpdate(
    resource,
    { id: record == null ? void 0 : record.id, data, meta: mutationMeta, previousData: record },
    {
      onSuccess,
      onError,
      onSettled,
      mutationMode,
      ...otherMutationOptions
    }
  );
  const handleClick = (e) => {
    setOpen(true);
    e.stopPropagation();
  };
  const handleDialogClose = () => {
    setOpen(false);
  };
  const handleUpdate = (e) => {
    update(resource, {
      id: record == null ? void 0 : record.id,
      data,
      meta: mutationMeta,
      previousData: record
    });
    if (typeof onClick === "function") {
      onClick(e);
    }
  };
  return (0, import_jsx_runtime66.jsxs)(import_react30.Fragment, { children: [
    (0, import_jsx_runtime66.jsx)(
      StyledButton10,
      {
        onClick: handleClick,
        label,
        ...sanitizeRestProps8(rest),
        children: icon
      }
    ),
    (0, import_jsx_runtime66.jsx)(
      Confirm,
      {
        isOpen,
        loading: isPending,
        title: confirmTitle,
        content: confirmContent,
        translateOptions: {
          smart_count: 1,
          name: translate(`resources.${resource}.forcedCaseName`, {
            smart_count: 1,
            _: (0, import_inflection4.humanize)(
              translate(`resources.${resource}.name`, {
                smart_count: 1,
                _: resource ? (0, import_inflection4.inflect)(resource, 1) : void 0
              }),
              true
            )
          })
        },
        onConfirm: handleUpdate,
        onClose: handleDialogClose
      }
    )
  ] });
};
var sanitizeRestProps8 = ({
  label,
  ...rest
}) => rest;
var PREFIX34 = "RaUpdateWithConfirmButton";
var StyledButton10 = styled_default(Button, {
  name: PREFIX34,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  color: theme.palette.primary.main,
  "&:hover": {
    backgroundColor: alpha(theme.palette.primary.main, 0.12),
    // Reset on mouse devices
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  }
}));
var defaultIcon19 = (0, import_jsx_runtime66.jsx)(import_Update3.default, {});

// node_modules/ra-ui-materialui/src/button/UpdateWithUndoButton.tsx
var import_Update4 = __toESM(require_Update());
var import_jsx_runtime67 = __toESM(require_jsx_runtime());
var UpdateWithUndoButton = (props) => {
  const record = useRecordContext(props);
  const notify = useNotify();
  const resource = useResourceContext(props);
  const refresh = useRefresh();
  const translate = useTranslate();
  const {
    data,
    label = "ra.action.update",
    icon = defaultIcon20,
    onClick,
    mutationOptions = {},
    ...rest
  } = props;
  const [updateMany, { isPending }] = useUpdate();
  const {
    meta: mutationMeta,
    onSuccess = () => {
      notify(`resources.${resource}.notifications.updated`, {
        type: "info",
        messageArgs: {
          smart_count: 1,
          _: translate("ra.notification.updated", { smart_count: 1 })
        },
        undoable: true
      });
    },
    onError = (error) => {
      notify(
        typeof error === "string" ? error : error.message || "ra.notification.http_error",
        {
          type: "error",
          messageArgs: {
            _: typeof error === "string" ? error : error && error.message ? error.message : void 0
          }
        }
      );
      refresh();
    },
    ...otherMutationOptions
  } = mutationOptions;
  const handleClick = (e) => {
    if (!record) {
      throw new Error(
        "The UpdateWithUndoButton must be used inside a RecordContext.Provider or must be passed a record prop."
      );
    }
    updateMany(
      resource,
      { id: record.id, data, meta: mutationMeta, previousData: record },
      {
        onSuccess,
        onError,
        mutationMode: "undoable",
        ...otherMutationOptions
      }
    );
    if (typeof onClick === "function") {
      onClick(e);
    }
    e.stopPropagation();
  };
  return (0, import_jsx_runtime67.jsx)(
    StyledButton11,
    {
      onClick: handleClick,
      label,
      disabled: isPending,
      ...sanitizeRestProps9(rest),
      children: icon
    }
  );
};
var defaultIcon20 = (0, import_jsx_runtime67.jsx)(import_Update4.default, {});
var sanitizeRestProps9 = ({
  label,
  ...rest
}) => rest;
var PREFIX35 = "RaUpdateWithUndoButton";
var StyledButton11 = styled_default(Button, {
  name: PREFIX35,
  overridesResolver: (props, styles) => styles.root
})(({ theme }) => ({
  color: theme.palette.primary.main,
  "&:hover": {
    backgroundColor: alpha(theme.palette.primary.main, 0.12),
    // Reset on mouse devices
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  }
}));

// node_modules/ra-ui-materialui/src/button/UpdateButton.tsx
var import_jsx_runtime68 = __toESM(require_jsx_runtime());
var UpdateButton = (props) => {
  const { mutationMode = "undoable", ...rest } = props;
  return mutationMode === "undoable" ? (0, import_jsx_runtime68.jsx)(UpdateWithUndoButton, { ...rest }) : (0, import_jsx_runtime68.jsx)(UpdateWithConfirmButton, { mutationMode, ...rest });
};
export {
  BulkDeleteButton,
  BulkDeleteWithConfirmButton,
  BulkDeleteWithUndoButton,
  BulkExportButton,
  BulkUpdateButton,
  BulkUpdateWithConfirmButton,
  BulkUpdateWithUndoButton,
  Button,
  CloneButton_default as CloneButton,
  CreateButton_default as CreateButton,
  CreateButtonClasses,
  DeleteButton,
  DeleteWithConfirmButton,
  DeleteWithUndoButton,
  EditButton,
  EditButtonClasses,
  ExportButton,
  IconButtonWithTooltip,
  ListButton,
  LocalesMenuButton,
  LocalesMenuButtonClasses,
  PrevNextButtonClasses,
  PrevNextButtons,
  RefreshButton,
  RefreshIconButton,
  SaveButton,
  ShowButton_default as ShowButton,
  SkipNavigationButton,
  SortButton_default as SortButton,
  ToggleThemeButton,
  UpdateButton,
  UpdateWithConfirmButton,
  UpdateWithUndoButton
};
//# sourceMappingURL=ra-ui-materialui_src_button.js.map
